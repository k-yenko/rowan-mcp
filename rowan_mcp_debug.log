2025-08-02 13:40:45,107 - mcp.server.lowlevel.server - DEBUG - Initializing server 'Rowan MCP Server'
2025-08-02 13:40:45,107 - mcp.server.lowlevel.server - DEBUG - Registering handler for ListToolsRequest
2025-08-02 13:40:45,107 - mcp.server.lowlevel.server - DEBUG - Registering handler for ListResourcesRequest
2025-08-02 13:40:45,107 - mcp.server.lowlevel.server - DEBUG - Registering handler for ListResourceTemplatesRequest
2025-08-02 13:40:45,107 - mcp.server.lowlevel.server - DEBUG - Registering handler for PromptListRequest
2025-08-02 13:40:45,107 - mcp.server.lowlevel.server - DEBUG - Registering handler for CallToolRequest
2025-08-02 13:40:45,107 - mcp.server.lowlevel.server - DEBUG - Registering handler for ReadResourceRequest
2025-08-02 13:40:45,107 - mcp.server.lowlevel.server - DEBUG - Registering handler for GetPromptRequest
2025-08-02 13:40:45,120 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - INFO - ============================================================
2025-08-02 13:40:45,120 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - INFO - submit_basic_calculation_workflow called with:
2025-08-02 13:40:45,120 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - INFO -   method: gfn2-xtb (type: <class 'str'>)
2025-08-02 13:40:45,120 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - INFO -   tasks: ['optimize'] (type: <class 'list'>)
2025-08-02 13:40:45,120 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - INFO -   mode: auto
2025-08-02 13:40:45,120 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - INFO -   engine: xtb
2025-08-02 13:40:45,120 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - INFO -   name: Test with tasks list
2025-08-02 13:40:45,120 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - INFO -   initial_molecule: dict with keys ['smiles', 'charge', 'multiplicity', 'atoms']...
2025-08-02 13:40:45,120 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - INFO -     SMILES in dict: CCCC
2025-08-02 13:40:45,120 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - INFO - Extracting SMILES from dict: CCCC
2025-08-02 13:40:45,141 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - DEBUG - Successfully created StJamesMolecule from extracted SMILES
2025-08-02 13:40:45,141 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - INFO - Calling rowan.submit_basic_calculation_workflow...
2025-08-02 13:40:45,168 - httpcore.connection - DEBUG - connect_tcp.started host='api.rowansci.com' port=443 local_address=None timeout=5.0 socket_options=None
2025-08-02 13:40:45,264 - httpcore.connection - DEBUG - connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x1096470e0>
2025-08-02 13:40:45,264 - httpcore.connection - DEBUG - start_tls.started ssl_context=<ssl.SSLContext object at 0x10966af90> server_hostname='api.rowansci.com' timeout=5.0
2025-08-02 13:40:45,374 - httpcore.connection - DEBUG - start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x1096d8550>
2025-08-02 13:40:45,374 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-08-02 13:40:45,374 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-08-02 13:40:45,375 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-08-02 13:40:45,375 - httpcore.http11 - DEBUG - send_request_body.complete
2025-08-02 13:40:45,375 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-08-02 13:40:46,037 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sat, 02 Aug 2025 20:40:46 GMT'), (b'Content-Type', b'application/json'), (b'Content-Length', b'2072'), (b'Connection', b'keep-alive'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains')])
2025-08-02 13:40:46,038 - httpx - INFO - HTTP Request: POST https://api.rowansci.com/workflow "HTTP/1.1 200 OK"
2025-08-02 13:40:46,038 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-08-02 13:40:46,038 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-08-02 13:40:46,038 - httpcore.http11 - DEBUG - response_closed.started
2025-08-02 13:40:46,039 - httpcore.http11 - DEBUG - response_closed.complete
2025-08-02 13:40:46,040 - httpcore.connection - DEBUG - close.started
2025-08-02 13:40:46,040 - httpcore.connection - DEBUG - close.complete
2025-08-02 13:40:46,040 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - INFO - SUCCESS: Workflow submitted with UUID: 4d395ec6-2b8c-4dbe-85fa-f23bacc4d3c1
2025-08-02 13:40:46,040 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - INFO - ============================================================
2025-08-02 13:40:46,040 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - INFO - submit_basic_calculation_workflow called with:
2025-08-02 13:40:46,040 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - INFO -   method: gfn2-xtb (type: <class 'str'>)
2025-08-02 13:40:46,041 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - INFO -   tasks: None (type: <class 'NoneType'>)
2025-08-02 13:40:46,041 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - INFO -   mode: auto
2025-08-02 13:40:46,041 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - INFO -   engine: xtb
2025-08-02 13:40:46,041 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - INFO -   name: Test with tasks None
2025-08-02 13:40:46,041 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - INFO -   initial_molecule: dict with keys ['smiles', 'charge', 'multiplicity', 'atoms']...
2025-08-02 13:40:46,041 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - INFO -     SMILES in dict: CCCC
2025-08-02 13:40:46,041 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - INFO - Extracting SMILES from dict: CCCC
2025-08-02 13:40:46,046 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - DEBUG - Successfully created StJamesMolecule from extracted SMILES
2025-08-02 13:40:46,046 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - INFO - Calling rowan.submit_basic_calculation_workflow...
2025-08-02 13:40:46,056 - httpcore.connection - DEBUG - connect_tcp.started host='api.rowansci.com' port=443 local_address=None timeout=5.0 socket_options=None
2025-08-02 13:40:46,165 - httpcore.connection - DEBUG - connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x1096d9e50>
2025-08-02 13:40:46,165 - httpcore.connection - DEBUG - start_tls.started ssl_context=<ssl.SSLContext object at 0x10966aa80> server_hostname='api.rowansci.com' timeout=5.0
2025-08-02 13:40:46,276 - httpcore.connection - DEBUG - start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x1094ab820>
2025-08-02 13:40:46,277 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-08-02 13:40:46,277 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-08-02 13:40:46,277 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-08-02 13:40:46,277 - httpcore.http11 - DEBUG - send_request_body.complete
2025-08-02 13:40:46,277 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-08-02 13:40:46,768 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sat, 02 Aug 2025 20:40:46 GMT'), (b'Content-Type', b'application/json'), (b'Content-Length', b'2067'), (b'Connection', b'keep-alive'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains')])
2025-08-02 13:40:46,769 - httpx - INFO - HTTP Request: POST https://api.rowansci.com/workflow "HTTP/1.1 200 OK"
2025-08-02 13:40:46,769 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-08-02 13:40:46,769 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-08-02 13:40:46,769 - httpcore.http11 - DEBUG - response_closed.started
2025-08-02 13:40:46,769 - httpcore.http11 - DEBUG - response_closed.complete
2025-08-02 13:40:46,769 - httpcore.connection - DEBUG - close.started
2025-08-02 13:40:46,769 - httpcore.connection - DEBUG - close.complete
2025-08-02 13:40:46,769 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - INFO - SUCCESS: Workflow submitted with UUID: bf62e4e1-dd50-4b9d-81a9-d178b26ad344
2025-08-02 13:42:08,997 - mcp.server.lowlevel.server - DEBUG - Initializing server 'Rowan MCP Server'
2025-08-02 13:42:08,997 - mcp.server.lowlevel.server - DEBUG - Registering handler for ListToolsRequest
2025-08-02 13:42:08,997 - mcp.server.lowlevel.server - DEBUG - Registering handler for ListResourcesRequest
2025-08-02 13:42:08,997 - mcp.server.lowlevel.server - DEBUG - Registering handler for ListResourceTemplatesRequest
2025-08-02 13:42:08,997 - mcp.server.lowlevel.server - DEBUG - Registering handler for PromptListRequest
2025-08-02 13:42:08,997 - mcp.server.lowlevel.server - DEBUG - Registering handler for CallToolRequest
2025-08-02 13:42:08,997 - mcp.server.lowlevel.server - DEBUG - Registering handler for ReadResourceRequest
2025-08-02 13:42:08,997 - mcp.server.lowlevel.server - DEBUG - Registering handler for GetPromptRequest
2025-08-02 13:42:09,013 - asyncio - DEBUG - Using selector: KqueueSelector
2025-08-02 13:42:09,013 - mcp.server.sse - DEBUG - SseServerTransport initialized with endpoint: /messages/
2025-08-02 13:42:09,014 - FastMCP.fastmcp.server.server - INFO - Starting MCP server 'Rowan MCP Server' with transport 'sse' on http://127.0.0.1:6276/sse
2025-08-02 13:42:09,657 - mcp.server.sse - DEBUG - Setting up SSE connection
2025-08-02 13:42:09,658 - mcp.server.sse - DEBUG - Created new session with ID: cf53541d-87b0-416a-8323-a2bbf7302a74
2025-08-02 13:42:09,658 - mcp.server.sse - DEBUG - Starting SSE response task
2025-08-02 13:42:09,658 - mcp.server.sse - DEBUG - Yielding read and write streams
2025-08-02 13:42:09,660 - mcp.server.sse - DEBUG - Starting SSE writer
2025-08-02 13:42:09,661 - mcp.server.sse - DEBUG - Sent endpoint event: /messages/?session_id=cf53541d87b0416a8323a2bbf7302a74
2025-08-02 13:42:09,661 - sse_starlette.sse - DEBUG - chunk: b'event: endpoint\r\ndata: /messages/?session_id=cf53541d87b0416a8323a2bbf7302a74\r\n\r\n'
2025-08-02 13:42:09,661 - mcp.server.sse - DEBUG - Setting up SSE connection
2025-08-02 13:42:09,662 - mcp.server.sse - DEBUG - Created new session with ID: 0e836701-b927-482e-a2e2-20dddfa2b2b6
2025-08-02 13:42:09,662 - mcp.server.sse - DEBUG - Starting SSE response task
2025-08-02 13:42:09,662 - mcp.server.sse - DEBUG - Yielding read and write streams
2025-08-02 13:42:09,664 - mcp.server.sse - DEBUG - Starting SSE writer
2025-08-02 13:42:09,665 - mcp.server.sse - DEBUG - Sent endpoint event: /messages/?session_id=0e836701b927482ea2e220dddfa2b2b6
2025-08-02 13:42:09,665 - sse_starlette.sse - DEBUG - chunk: b'event: endpoint\r\ndata: /messages/?session_id=0e836701b927482ea2e220dddfa2b2b6\r\n\r\n'
2025-08-02 13:42:11,055 - sse_starlette.sse - DEBUG - Got event: http.disconnect. Stop streaming.
2025-08-02 13:42:11,056 - root - DEBUG - Client session disconnected cf53541d-87b0-416a-8323-a2bbf7302a74
2025-08-02 13:42:11,370 - mcp.server.sse - DEBUG - Setting up SSE connection
2025-08-02 13:42:11,370 - mcp.server.sse - DEBUG - Created new session with ID: 9eb62d12-9922-4e00-918e-61d22c022c4b
2025-08-02 13:42:11,370 - mcp.server.sse - DEBUG - Starting SSE response task
2025-08-02 13:42:11,370 - mcp.server.sse - DEBUG - Yielding read and write streams
2025-08-02 13:42:11,373 - mcp.server.sse - DEBUG - Starting SSE writer
2025-08-02 13:42:11,373 - mcp.server.sse - DEBUG - Sent endpoint event: /messages/?session_id=9eb62d1299224e00918e61d22c022c4b
2025-08-02 13:42:11,373 - sse_starlette.sse - DEBUG - chunk: b'event: endpoint\r\ndata: /messages/?session_id=9eb62d1299224e00918e61d22c022c4b\r\n\r\n'
2025-08-02 13:42:11,376 - mcp.server.sse - DEBUG - Handling POST message
2025-08-02 13:42:11,376 - mcp.server.sse - DEBUG - Parsed session ID: 9eb62d12-9922-4e00-918e-61d22c022c4b
2025-08-02 13:42:11,377 - mcp.server.sse - DEBUG - Received JSON: b'{"method":"initialize","params":{"protocolVersion":"2025-06-18","capabilities":{"tools":true,"prompts":true,"resources":false,"logging":false,"roots":{"listChanged":false}},"clientInfo":{"name":"cursor-vscode","version":"1.0.0"}},"jsonrpc":"2.0","id":1}'
2025-08-02 13:42:11,377 - mcp.server.sse - DEBUG - Validated client message: root=JSONRPCRequest(method='initialize', params={'protocolVersion': '2025-06-18', 'capabilities': {'tools': True, 'prompts': True, 'resources': False, 'logging': False, 'roots': {'listChanged': False}}, 'clientInfo': {'name': 'cursor-vscode', 'version': '1.0.0'}}, jsonrpc='2.0', id=1)
2025-08-02 13:42:11,377 - mcp.server.sse - DEBUG - Sending session message to writer: SessionMessage(message=JSONRPCMessage(root=JSONRPCRequest(method='initialize', params={'protocolVersion': '2025-06-18', 'capabilities': {'tools': True, 'prompts': True, 'resources': False, 'logging': False, 'roots': {'listChanged': False}}, 'clientInfo': {'name': 'cursor-vscode', 'version': '1.0.0'}}, jsonrpc='2.0', id=1)), metadata=ServerMessageMetadata(related_request_id=None, request_context=<starlette.requests.Request object at 0x10c812350>))
2025-08-02 13:42:11,378 - mcp.server.sse - DEBUG - Sending message via SSE: SessionMessage(message=JSONRPCMessage(root=JSONRPCResponse(jsonrpc='2.0', id=1, result={'protocolVersion': '2025-03-26', 'capabilities': {'experimental': {}, 'prompts': {'listChanged': False}, 'resources': {'subscribe': False, 'listChanged': False}, 'tools': {'listChanged': False}}, 'serverInfo': {'name': 'Rowan MCP Server', 'version': '1.9.3'}})), metadata=None)
2025-08-02 13:42:11,379 - sse_starlette.sse - DEBUG - chunk: b'event: message\r\ndata: {"jsonrpc":"2.0","id":1,"result":{"protocolVersion":"2025-03-26","capabilities":{"experimental":{},"prompts":{"listChanged":false},"resources":{"subscribe":false,"listChanged":false},"tools":{"listChanged":false}},"serverInfo":{"name":"Rowan MCP Server","version":"1.9.3"}}}\r\n\r\n'
2025-08-02 13:42:11,381 - mcp.server.sse - DEBUG - Handling POST message
2025-08-02 13:42:11,381 - mcp.server.sse - DEBUG - Parsed session ID: 9eb62d12-9922-4e00-918e-61d22c022c4b
2025-08-02 13:42:11,381 - mcp.server.sse - DEBUG - Received JSON: b'{"method":"notifications/initialized","jsonrpc":"2.0"}'
2025-08-02 13:42:11,381 - mcp.server.sse - DEBUG - Validated client message: root=JSONRPCNotification(method='notifications/initialized', params=None, jsonrpc='2.0')
2025-08-02 13:42:11,381 - mcp.server.sse - DEBUG - Sending session message to writer: SessionMessage(message=JSONRPCMessage(root=JSONRPCNotification(method='notifications/initialized', params=None, jsonrpc='2.0')), metadata=ServerMessageMetadata(related_request_id=None, request_context=<starlette.requests.Request object at 0x10c820b90>))
2025-08-02 13:42:11,382 - mcp.server.lowlevel.server - DEBUG - Received message: root=InitializedNotification(method='notifications/initialized', params=None, jsonrpc='2.0')
2025-08-02 13:42:11,385 - mcp.server.sse - DEBUG - Handling POST message
2025-08-02 13:42:11,385 - mcp.server.sse - DEBUG - Parsed session ID: 9eb62d12-9922-4e00-918e-61d22c022c4b
2025-08-02 13:42:11,385 - mcp.server.sse - DEBUG - Received JSON: b'{"method":"tools/list","jsonrpc":"2.0","id":2}'
2025-08-02 13:42:11,385 - mcp.server.sse - DEBUG - Validated client message: root=JSONRPCRequest(method='tools/list', params=None, jsonrpc='2.0', id=2)
2025-08-02 13:42:11,385 - mcp.server.sse - DEBUG - Sending session message to writer: SessionMessage(message=JSONRPCMessage(root=JSONRPCRequest(method='tools/list', params=None, jsonrpc='2.0', id=2)), metadata=ServerMessageMetadata(related_request_id=None, request_context=<starlette.requests.Request object at 0x10c7fff70>))
2025-08-02 13:42:11,385 - mcp.server.lowlevel.server - DEBUG - Received message: <mcp.shared.session.RequestResponder object at 0x10c7a74d0>
2025-08-02 13:42:11,386 - mcp.server.lowlevel.server - INFO - Processing request of type ListToolsRequest
2025-08-02 13:42:11,386 - mcp.server.lowlevel.server - DEBUG - Dispatching request of type ListToolsRequest
2025-08-02 13:42:11,386 - mcp.server.lowlevel.server - DEBUG - Response sent
2025-08-02 13:42:11,387 - mcp.server.sse - DEBUG - Sending message via SSE: SessionMessage(message=JSONRPCMessage(root=JSONRPCResponse(jsonrpc='2.0', id=2, result={'tools': [{'name': 'submit_basic_calculation_workflow', 'description': 'Submit a basic calculation workflow using Rowan v2 API.\n\nPerforms fundamental quantum chemistry calculations with configurable methods\nand computational tasks. Returns a workflow object for tracking progress.\n', 'inputSchema': {'properties': {'initial_molecule': {'anyOf': [{'type': 'string'}, {'additionalProperties': True, 'type': 'object'}, {}], 'description': 'The molecule to perform the calculation on. Can be a SMILES string, dict, StJamesMolecule, or RdkitMol object', 'title': 'Initial Molecule'}, 'method': {'default': 'uma_m_omol', 'description': "The method to use for the calculation (e.g., 'uma_m_omol', 'gfn2-xtb', 'r2scan_3c')", 'title': 'Method', 'type': 'string'}, 'tasks': {'anyOf': [{'items': {'type': 'string'}, 'type': 'array'}, {'type': 'null'}], 'default': None, 'description': 'List of computational tasks to perform. Optional[List[str]], Defaults to None', 'title': 'Tasks'}, 'mode': {'default': 'auto', 'description': "The mode to run the calculation in ('auto', 'rapid', 'careful', 'meticulous')", 'title': 'Mode', 'type': 'string'}, 'engine': {'default': 'omol25', 'description': "The computational engine to use ('omol25', 'xtb', 'psi4')", 'title': 'Engine', 'type': 'string'}, 'name': {'default': 'Basic Calculation Workflow', 'description': 'The name of the workflow for identification', 'title': 'Name', 'type': 'string'}, 'folder_uuid': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'UUID of the folder to place the workflow in (optional)', 'title': 'Folder Uuid'}, 'max_credits': {'anyOf': [{'type': 'integer'}, {'type': 'null'}], 'default': None, 'description': 'Maximum number of credits to use for the workflow (optional)', 'title': 'Max Credits'}}, 'required': ['initial_molecule'], 'type': 'object'}}, {'name': 'submit_conformer_search_workflow', 'description': 'Submit a conformer search workflow using Rowan v2 API.\n\nExplores the conformational space of a molecule to find low-energy structures.\n\nArgs:\n    initial_molecule: SMILES string or molecule object\n    conf_gen_mode: default to "rapid"\n        Options: "rapid", "careful", "meticulous"\n    final_method: default: "aimnet2_wb97md3"\n        Try other options, if user specifies\n    solvent: Optional solvent for implicit solvation (e.g., "water", "ethanol")\n    transition_state: Whether searching for transition state conformers (default: False)\n    name: Workflow name for tracking\n    folder_uuid: Optional folder UUID for organization\n    max_credits: Optional credit limit for the calculation\n    \nReturns:\n    Workflow object representing the submitted workflow\n    \nExample:\n    # Basic conformer search\n    result = submit_conformer_search_workflow(\n        initial_molecule="CCCC",\n        conf_gen_mode="rapid"\n    )\n    \n    # Careful search with solvent\n    result = submit_conformer_search_workflow(\n        initial_molecule="CC(C)CC(=O)O",\n        conf_gen_mode="careful",\n        solvent="water",\n        final_method="r2scan_3c"\n    )\n', 'inputSchema': {'properties': {'initial_molecule': {'title': 'Initial Molecule', 'type': 'string'}, 'conf_gen_mode': {'default': 'rapid', 'title': 'Conf Gen Mode', 'type': 'string'}, 'final_method': {'default': 'aimnet2_wb97md3', 'title': 'Final Method', 'type': 'string'}, 'solvent': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Solvent'}, 'transition_state': {'default': False, 'title': 'Transition State', 'type': 'boolean'}, 'name': {'default': 'Conformer Search Workflow', 'title': 'Name', 'type': 'string'}, 'folder_uuid': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Folder Uuid'}, 'max_credits': {'anyOf': [{'type': 'integer'}, {'type': 'null'}], 'default': None, 'title': 'Max Credits'}}, 'required': ['initial_molecule'], 'type': 'object'}}, {'name': 'submit_solubility_workflow', 'description': 'Submit a solubility prediction workflow using Rowan v2 API.\n\nPredicts solubility (log S) of a molecule in multiple solvents at various temperatures\nusing machine learning models.\n\nArgs:\n    initial_smiles: SMILES string of the molecule\n    solvents: List of solvents as SMILES or common names (e.g., ["water", "ethanol"])\n        If None, uses default solvents\n    temperatures: List of temperatures in Kelvin\n        If None, uses default temperature range\n    name: Workflow name for tracking\n    folder_uuid: Optional folder UUID for organization\n    max_credits: Optional credit limit for the calculation\n    \nReturns:\n    Workflow object representing the submitted workflow\n    \nExample:\n    # Basic solubility prediction\n    result = submit_solubility_workflow(\n        initial_smiles="CC(=O)Nc1ccc(O)cc1",\n        solvents=["water", "ethanol"],\n        temperatures=[298.15, 310.15]\n    )\n    \n    # With SMILES solvents\n    result = submit_solubility_workflow(\n        initial_smiles="CC(=O)O",\n        solvents=["O", "CCO", "CCCCCC"],\n        temperatures=[273.15, 298.15, 323.15]\n    )\n', 'inputSchema': {'properties': {'initial_smiles': {'title': 'Initial Smiles', 'type': 'string'}, 'solvents': {'anyOf': [{'items': {'type': 'string'}, 'type': 'array'}, {'type': 'null'}], 'default': None, 'title': 'Solvents'}, 'temperatures': {'anyOf': [{'items': {'type': 'number'}, 'type': 'array'}, {'type': 'null'}], 'default': None, 'title': 'Temperatures'}, 'name': {'default': 'Solubility Workflow', 'title': 'Name', 'type': 'string'}, 'folder_uuid': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Folder Uuid'}, 'max_credits': {'anyOf': [{'type': 'integer'}, {'type': 'null'}], 'default': None, 'title': 'Max Credits'}}, 'required': ['initial_smiles'], 'type': 'object'}}, {'name': 'submit_pka_workflow', 'description': 'Submit a pKa prediction workflow using Rowan v2 API.\n\nPredicts acid dissociation constants (pKa) for ionizable groups in a molecule\nusing quantum chemistry calculations.\n\nArgs:\n    initial_molecule: SMILES string or molecule object\n    pka_range: Tuple of (min, max) pKa values to search (default: (2, 12))\n    deprotonate_elements: List of elements to consider for deprotonation\n        (e.g., ["N", "O", "S"]). If None, uses defaults\n    protonate_elements: List of elements to consider for protonation\n        (e.g., ["N", "O"]). If None, uses defaults\n    mode: Calculation mode (default: "careful")\n        Options: "rapid", "careful", "meticulous"\n    name: Workflow name for tracking\n    folder_uuid: Optional folder UUID for organization\n    max_credits: Optional credit limit for the calculation\n    \nReturns:\n    Workflow object representing the submitted workflow\n    \nExample:\n    # Basic pKa prediction\n    result = submit_pka_workflow(\n        initial_molecule="CC(=O)O",\n        pka_range=(2, 8)\n    )\n    \n    # Specific elements with meticulous mode\n    result = submit_pka_workflow(\n        initial_molecule="NC(C)C(=O)O",\n        pka_range=(1, 14),\n        deprotonate_elements=["N", "O"],\n        mode="meticulous"\n    )\n', 'inputSchema': {'properties': {'initial_molecule': {'title': 'Initial Molecule', 'type': 'string'}, 'pka_range': {'default': [2, 12], 'maxItems': 2, 'minItems': 2, 'prefixItems': [{'type': 'number'}, {'type': 'number'}], 'title': 'Pka Range', 'type': 'array'}, 'deprotonate_elements': {'anyOf': [{'items': {'type': 'string'}, 'type': 'array'}, {'type': 'null'}], 'default': None, 'title': 'Deprotonate Elements'}, 'protonate_elements': {'anyOf': [{'items': {'type': 'string'}, 'type': 'array'}, {'type': 'null'}], 'default': None, 'title': 'Protonate Elements'}, 'mode': {'default': 'careful', 'title': 'Mode', 'type': 'string'}, 'name': {'default': 'pKa Workflow', 'title': 'Name', 'type': 'string'}, 'folder_uuid': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Folder Uuid'}, 'max_credits': {'anyOf': [{'type': 'integer'}, {'type': 'null'}], 'default': None, 'title': 'Max Credits'}}, 'required': ['initial_molecule'], 'type': 'object'}}, {'name': 'submit_redox_potential_workflow', 'description': 'Submit a redox potential calculation workflow using Rowan v2 API.\n\nCalculates reduction and/or oxidation potentials for a molecule using\nquantum chemistry methods.\n\nArgs:\n    initial_molecule: SMILES string or molecule object\n    reduction: Whether to calculate reduction potential (default: False)\n    oxidization: Whether to calculate oxidation potential (default: True)\n    mode: Calculation mode (default: "rapid")\n        Options: "rapid", "careful", "meticulous"\n    name: Workflow name for tracking\n    folder_uuid: Optional folder UUID for organization\n    max_credits: Optional credit limit for the calculation\n    \nReturns:\n    Workflow object representing the submitted workflow\n    \nExample:\n    # Basic oxidation potential\n    result = submit_redox_potential_workflow(\n        initial_molecule="CC1=CC=CC=C1",\n        oxidization=True\n    )\n    \n    # Both reduction and oxidation with careful mode\n    result = submit_redox_potential_workflow(\n        initial_molecule="c1ccccc1",\n        reduction=True,\n        oxidization=True,\n        mode="careful"\n    )\n', 'inputSchema': {'properties': {'initial_molecule': {'title': 'Initial Molecule', 'type': 'string'}, 'reduction': {'default': False, 'title': 'Reduction', 'type': 'boolean'}, 'oxidization': {'default': True, 'title': 'Oxidization', 'type': 'boolean'}, 'mode': {'default': 'rapid', 'title': 'Mode', 'type': 'string'}, 'name': {'default': 'Redox Potential Workflow', 'title': 'Name', 'type': 'string'}, 'folder_uuid': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Folder Uuid'}, 'max_credits': {'anyOf': [{'type': 'integer'}, {'type': 'null'}], 'default': None, 'title': 'Max Credits'}}, 'required': ['initial_molecule'], 'type': 'object'}}, {'name': 'submit_fukui_workflow', 'description': 'Submit a Fukui indices calculation workflow using Rowan v2 API.\n\nCalculates Fukui indices to predict molecular reactivity at different sites.\nFukui indices indicate susceptibility to nucleophilic/electrophilic attack.\n\nArgs:\n    initial_molecule: SMILES string or molecule object\n    optimization_method: Method for geometry optimization (default: "gfn2_xtb")\n        Common options: "gfn2_xtb", "r2scan_3c", "aimnet2_wb97md3"\n    fukui_method: Method for Fukui calculation (default: "gfn1_xtb")\n        Common options: "gfn1_xtb", "gfn2_xtb"\n    solvent_settings: Optional solvent configuration dictionary\n        Example: {"solvent": "water", "model": "alpb"}\n    name: Workflow name for tracking\n    folder_uuid: Optional folder UUID for organization\n    max_credits: Optional credit limit for the calculation\n    \nReturns:\n    Workflow object representing the submitted workflow\n    \nExample:\n    # Basic Fukui indices\n    result = submit_fukui_workflow(\n        initial_molecule="CC(=O)O"\n    )\n    \n    # With solvent and advanced methods\n    result = submit_fukui_workflow(\n        initial_molecule="c1ccccc1N",\n        optimization_method="r2scan_3c",\n        fukui_method="gfn2_xtb",\n        solvent_settings={"solvent": "water", "model": "alpb"}\n    )\n', 'inputSchema': {'properties': {'initial_molecule': {'title': 'Initial Molecule', 'type': 'string'}, 'optimization_method': {'default': 'gfn2_xtb', 'title': 'Optimization Method', 'type': 'string'}, 'fukui_method': {'default': 'gfn1_xtb', 'title': 'Fukui Method', 'type': 'string'}, 'solvent_settings': {'anyOf': [{'additionalProperties': True, 'type': 'object'}, {'type': 'null'}], 'default': None, 'title': 'Solvent Settings'}, 'name': {'default': 'Fukui Workflow', 'title': 'Name', 'type': 'string'}, 'folder_uuid': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Folder Uuid'}, 'max_credits': {'anyOf': [{'type': 'integer'}, {'type': 'null'}], 'default': None, 'title': 'Max Credits'}}, 'required': ['initial_molecule'], 'type': 'object'}}, {'name': 'submit_tautomer_search_workflow', 'description': 'Submit a tautomer search workflow using Rowan v2 API.\n\nSearches for different tautomeric forms of a molecule and evaluates their\nrelative stabilities. Tautomers are structural isomers that readily interconvert.\n\nArgs:\n    initial_molecule: SMILES string or molecule object\n    mode: Search mode (default: "careful")\n        Options: "rapid", "careful", "meticulous"\n    name: Workflow name for tracking\n    folder_uuid: Optional folder UUID for organization\n    max_credits: Optional credit limit for the calculation\n    \nReturns:\n    Workflow object representing the submitted workflow\n    \nExample:\n    # Basic tautomer search\n    result = submit_tautomer_search_workflow(\n        initial_molecule="CC(=O)CC(=O)C"\n    )\n    \n    # Meticulous search for complex molecule\n    result = submit_tautomer_search_workflow(\n        initial_molecule="c1ccc2c(c1)ncc(=O)[nH]2",\n        mode="meticulous"\n    )\n', 'inputSchema': {'properties': {'initial_molecule': {'title': 'Initial Molecule', 'type': 'string'}, 'mode': {'default': 'careful', 'title': 'Mode', 'type': 'string'}, 'name': {'default': 'Tautomer Search Workflow', 'title': 'Name', 'type': 'string'}, 'folder_uuid': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Folder Uuid'}, 'max_credits': {'anyOf': [{'type': 'integer'}, {'type': 'null'}], 'default': None, 'title': 'Max Credits'}}, 'required': ['initial_molecule'], 'type': 'object'}}, {'name': 'submit_descriptors_workflow', 'description': 'Submit a molecular descriptors calculation workflow using Rowan v2 API.\n\nCalculates a comprehensive set of molecular descriptors including:\n- Physical properties (MW, logP, TPSA, etc.)\n- Electronic properties (HOMO/LUMO, dipole moment, etc.)\n- Structural features (rotatable bonds, H-bond donors/acceptors, etc.)\n- Topological indices\n\nArgs:\n    initial_molecule: SMILES string or molecule object\n    name: Workflow name for tracking\n    folder_uuid: Optional folder UUID for organization\n    max_credits: Optional credit limit for the calculation\n    \nReturns:\n    Workflow object representing the submitted workflow\n    \nExample:\n    # Basic descriptor calculation\n    result = submit_descriptors_workflow(\n        initial_molecule="CC(=O)Nc1ccc(O)cc1"\n    )\n    \n    # For complex molecule\n    result = submit_descriptors_workflow(\n        initial_molecule="CN1C=NC2=C1C(=O)N(C(=O)N2C)C",\n        name="Caffeine Descriptors"\n    )\n', 'inputSchema': {'properties': {'initial_molecule': {'title': 'Initial Molecule', 'type': 'string'}, 'name': {'default': 'Descriptors Workflow', 'title': 'Name', 'type': 'string'}, 'folder_uuid': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Folder Uuid'}, 'max_credits': {'anyOf': [{'type': 'integer'}, {'type': 'null'}], 'default': None, 'title': 'Max Credits'}}, 'required': ['initial_molecule'], 'type': 'object'}}, {'name': 'submit_scan_workflow', 'description': 'Submit a potential energy surface scan workflow using Rowan v2 API.\n\nPerforms systematic scans along specified molecular coordinates (bonds, angles,\nor dihedrals) to map the potential energy surface.\n\nArgs:\n    initial_molecule: SMILES string or molecule object\n    scan_settings: Dictionary specifying scan parameters\n        Example: {\n            "type": "dihedral",  # or "bond", "angle"\n            "atoms": [0, 1, 2, 3],  # atom indices\n            "start": -180,\n            "stop": 180,\n            "step": 10\n        }\n    calculation_engine: Computational engine (default: "omol25")\n        Options: "omol25", "xtb", "psi4"\n    calculation_method: Method for calculations (default: "uma_m_omol")\n        Options depend on engine\n    wavefront_propagation: Use wavefront optimization (default: True)\n        Speeds up scans by using previous geometries as starting points\n    name: Workflow name for tracking\n    folder_uuid: Optional folder UUID for organization\n    max_credits: Optional credit limit for the calculation\n    \nReturns:\n    Workflow object representing the submitted workflow\n    \nExample:\n    # Dihedral scan\n    result = submit_scan_workflow(\n        initial_molecule="CC(C)CC",\n        scan_settings={\n            "type": "dihedral",\n            "atoms": [0, 1, 2, 3],\n            "start": -180,\n            "stop": 180,\n            "step": 15\n        }\n    )\n    \n    # Bond scan with advanced method\n    result = submit_scan_workflow(\n        initial_molecule="CC",\n        scan_settings={\n            "type": "bond",\n            "atoms": [0, 1],\n            "start": 1.0,\n            "stop": 2.5,\n            "step": 0.1\n        },\n        calculation_method="r2scan_3c"\n    )\n', 'inputSchema': {'properties': {'initial_molecule': {'title': 'Initial Molecule', 'type': 'string'}, 'scan_settings': {'anyOf': [{'additionalProperties': True, 'type': 'object'}, {'type': 'null'}], 'default': None, 'title': 'Scan Settings'}, 'calculation_engine': {'default': 'omol25', 'title': 'Calculation Engine', 'type': 'string'}, 'calculation_method': {'default': 'uma_m_omol', 'title': 'Calculation Method', 'type': 'string'}, 'wavefront_propagation': {'default': True, 'title': 'Wavefront Propagation', 'type': 'boolean'}, 'name': {'default': 'Scan Workflow', 'title': 'Name', 'type': 'string'}, 'folder_uuid': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Folder Uuid'}, 'max_credits': {'anyOf': [{'type': 'integer'}, {'type': 'null'}], 'default': None, 'title': 'Max Credits'}}, 'required': ['initial_molecule'], 'type': 'object'}}, {'name': 'submit_irc_workflow', 'description': 'Submits an Intrinsic Reaction Coordinate (IRC) workflow to the API.\n\nArgs:\n    initial_molecule: The initial molecule to perform the IRC calculation on.\n        Can be a dict, StJamesMolecule, or RdkitMol object\n    method: The computational method to use for the IRC calculation (default: "uma_m_omol")\n        See list of available methods for options\n    engine: The computational engine to use for the calculation (default: "omol25")\n        See list of available engines\n    preopt: Whether to perform a pre-optimization of the molecule (default: True)\n    step_size: The step size to use for the IRC calculation (default: 0.05)\n    max_irc_steps: The maximum number of IRC steps to perform (default: 30)\n    name: The name of the workflow\n    folder_uuid: The UUID of the folder to place the workflow in\n    max_credits: The maximum number of credits to use for the workflow\n    \nReturns:\n    Workflow object representing the submitted IRC workflow\n    \nExample:\n    # Basic IRC calculation\n    result = submit_irc_workflow(\n        initial_molecule={"smiles": "[CH3].[CH3]"},\n        method="gfn2_xtb",\n        max_irc_steps=50\n    )\n    \n    # IRC with specific method and engine\n    result = submit_irc_workflow(\n        initial_molecule={"smiles": "CC(O)=CC"},\n        method="r2scan_3c",\n        engine="psi4",\n        step_size=0.03\n    )\n', 'inputSchema': {'properties': {'initial_molecule': {'anyOf': [{'additionalProperties': True, 'type': 'object'}, {}, {'type': 'null'}], 'default': None, 'title': 'Initial Molecule'}, 'method': {'default': 'uma_m_omol', 'title': 'Method', 'type': 'string'}, 'engine': {'default': 'omol25', 'title': 'Engine', 'type': 'string'}, 'preopt': {'default': True, 'title': 'Preopt', 'type': 'boolean'}, 'step_size': {'default': 0.05, 'title': 'Step Size', 'type': 'number'}, 'max_irc_steps': {'default': 30, 'title': 'Max Irc Steps', 'type': 'integer'}, 'name': {'default': 'IRC Workflow', 'title': 'Name', 'type': 'string'}, 'folder_uuid': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Folder Uuid'}, 'max_credits': {'anyOf': [{'type': 'integer'}, {'type': 'null'}], 'default': None, 'title': 'Max Credits'}}, 'type': 'object'}}, {'name': 'submit_protein_cofolding_workflow', 'description': 'Submits a protein cofolding workflow to the API.\n\nArgs:\n    initial_protein_sequences: The sequences of the proteins to be cofolded\n    initial_smiles_list: A list of SMILES strings for the ligands to be cofolded with\n    ligand_binding_affinity_index: The index of the ligand for which to compute the binding affinity\n    use_msa_server: Whether to use the MSA server for the computation\n    use_potentials: Whether to use potentials for the computation\n    name: The name of the workflow\n    model: The model to use for the computation\n    folder_uuid: The UUID of the folder to store the workflow in\n    max_credits: The maximum number of credits to use for the workflow\n    \nReturns:\n    Workflow object representing the submitted workflow\n    \nExample:\n    # Protein dimer cofolding\n    result = submit_protein_cofolding_workflow(\n        initial_protein_sequences=[\n            "MKTAYIAKQRQISFVKSHFSRQLEERLGLIEVQAPILSRVGDGTQDNLSGAEK",\n            "MKQHKAMIVALIVICITAVVAALVTRKDLCEVHIRTGQTEVAVF"\n        ]\n    )\n    \n    # Protein-ligand complex\n    result = submit_protein_cofolding_workflow(\n        initial_protein_sequences=["MGSSHHHHHHSSGLVPRGSH"],\n        initial_smiles_list=["CC(=O)O", "CCO"],\n        ligand_binding_affinity_index=0,\n        use_msa_server=True\n    )\n', 'inputSchema': {'properties': {'initial_protein_sequences': {'items': {'type': 'string'}, 'title': 'Initial Protein Sequences', 'type': 'array'}, 'initial_smiles_list': {'anyOf': [{'items': {'type': 'string'}, 'type': 'array'}, {'type': 'null'}], 'default': None, 'title': 'Initial Smiles List'}, 'ligand_binding_affinity_index': {'anyOf': [{'type': 'integer'}, {'type': 'null'}], 'default': None, 'title': 'Ligand Binding Affinity Index'}, 'use_msa_server': {'default': True, 'title': 'Use Msa Server', 'type': 'boolean'}, 'use_potentials': {'default': False, 'title': 'Use Potentials', 'type': 'boolean'}, 'name': {'default': 'Cofolding Workflow', 'title': 'Name', 'type': 'string'}, 'model': {'default': 'boltz_2', 'title': 'Model', 'type': 'string'}, 'folder_uuid': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Folder Uuid'}, 'max_credits': {'anyOf': [{'type': 'integer'}, {'type': 'null'}], 'default': None, 'title': 'Max Credits'}}, 'required': ['initial_protein_sequences'], 'type': 'object'}}, {'name': 'submit_docking_workflow', 'description': 'Submits a Docking workflow to the API.\n\nArgs:\n    protein: The protein to dock. Can be fed as a uuid or a Protein object\n    pocket: The pocket to dock into\n    initial_molecule: The initial molecule to be docked.\n        Can be a dict, StJamesMolecule, or RdkitMol object\n    do_csearch: Whether to perform a conformational search on the ligand\n    do_optimization: Whether to perform an optimization on the ligand\n    name: The name of the workflow\n    folder_uuid: The UUID of the folder to place the workflow in\n    max_credits: The maximum number of credits to use for the workflow\n    \nReturns:\n    Workflow object representing the submitted workflow\n    \nExample:\n    # Basic docking with protein UUID\n    result = submit_docking_workflow(\n        protein="protein-uuid-123",\n        pocket=pocket_obj,\n        initial_molecule={"smiles": "CC(=O)Oc1ccccc1C(=O)O"}\n    )\n    \n    # Docking with optimization disabled\n    result = submit_docking_workflow(\n        protein=protein_obj,\n        pocket=pocket_obj,\n        initial_molecule={"smiles": "CCO"},\n        do_csearch=False,\n        do_optimization=False\n    )\n', 'inputSchema': {'properties': {'protein': {'anyOf': [{'type': 'string'}, {}], 'title': 'Protein'}, 'pocket': {'title': 'Pocket'}, 'initial_molecule': {'anyOf': [{'additionalProperties': True, 'type': 'object'}, {}, {'type': 'null'}], 'default': None, 'title': 'Initial Molecule'}, 'do_csearch': {'default': True, 'title': 'Do Csearch', 'type': 'boolean'}, 'do_optimization': {'default': True, 'title': 'Do Optimization', 'type': 'boolean'}, 'name': {'default': 'Docking Workflow', 'title': 'Name', 'type': 'string'}, 'folder_uuid': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Folder Uuid'}, 'max_credits': {'anyOf': [{'type': 'integer'}, {'type': 'null'}], 'default': None, 'title': 'Max Credits'}}, 'required': ['protein', 'pocket'], 'type': 'object'}}, {'name': 'workflow_fetch_latest', 'description': 'Fetch the latest workflow data from the database.\n\nUpdates the workflow object with the most recent status and results.\n\nArgs:\n    workflow_uuid: The UUID of the workflow to fetch\n    in_place: Whether to update the workflow object in place (default: False)\n    \nReturns:\n    Dictionary containing the updated workflow data including status and results\n', 'inputSchema': {'properties': {'workflow_uuid': {'title': 'Workflow Uuid', 'type': 'string'}, 'in_place': {'default': False, 'title': 'In Place', 'type': 'boolean'}}, 'required': ['workflow_uuid'], 'type': 'object'}}, {'name': 'workflow_wait_for_result', 'description': 'Wait for a workflow to complete and return the result.\n\nBlocks until the workflow completes, polling at specified intervals.\n\nArgs:\n    workflow_uuid: The UUID of the workflow to wait for\n    poll_interval: Time in seconds between status checks (default: 5)\n    \nReturns:\n    Dictionary containing the completed workflow data including results\n', 'inputSchema': {'properties': {'workflow_uuid': {'title': 'Workflow Uuid', 'type': 'string'}, 'poll_interval': {'default': 5, 'title': 'Poll Interval', 'type': 'integer'}}, 'required': ['workflow_uuid'], 'type': 'object'}}, {'name': 'workflow_get_status', 'description': 'Get the current status of a workflow.\n\nArgs:\n    workflow_uuid: The UUID of the workflow\n    \nReturns:\n    Dictionary with status information\n', 'inputSchema': {'properties': {'workflow_uuid': {'title': 'Workflow Uuid', 'type': 'string'}}, 'required': ['workflow_uuid'], 'type': 'object'}}, {'name': 'workflow_stop', 'description': 'Stop a running workflow.\n\nArgs:\n    workflow_uuid: The UUID of the workflow to stop\n    \nReturns:\n    Dictionary with confirmation message\n', 'inputSchema': {'properties': {'workflow_uuid': {'title': 'Workflow Uuid', 'type': 'string'}}, 'required': ['workflow_uuid'], 'type': 'object'}}, {'name': 'workflow_delete', 'description': 'Delete a workflow.\n\nThis permanently removes the workflow and its results from the database.\n\nArgs:\n    workflow_uuid: The UUID of the workflow to delete\n    \nReturns:\n    Dictionary with confirmation message\n', 'inputSchema': {'properties': {'workflow_uuid': {'title': 'Workflow Uuid', 'type': 'string'}}, 'required': ['workflow_uuid'], 'type': 'object'}}, {'name': 'retrieve_workflow', 'description': 'Retrieve a workflow from the API.\n\nArgs:\n    uuid: The UUID of the workflow to retrieve\n    \nReturns:\n    Dictionary containing the complete workflow data\n    \nRaises:\n    HTTPError: If the API request fails\n', 'inputSchema': {'properties': {'uuid': {'title': 'Uuid', 'type': 'string'}}, 'required': ['uuid'], 'type': 'object'}}, {'name': 'retrieve_calculation_molecules', 'description': 'Retrieve a list of molecules from a calculation.\n\nArgs:\n    uuid: The UUID of the calculation to retrieve molecules from\n    \nReturns:\n    List of dictionaries representing the molecules in the calculation\n    \nRaises:\n    HTTPError: If the API request fails\n', 'inputSchema': {'properties': {'uuid': {'title': 'Uuid', 'type': 'string'}}, 'required': ['uuid'], 'type': 'object'}}, {'name': 'list_workflows', 'description': 'List workflows subject to the specified criteria.\n\nArgs:\n    parent_uuid: The UUID of the parent folder\n    name_contains: Substring to search for in workflow names\n    public: Filter workflows by their public status\n    starred: Filter workflows by their starred status\n    status: Filter workflows by their status\n    workflow_type: Filter workflows by their type\n    page: The page number to retrieve (default: 0)\n    size: The number of items per page (default: 10)\n    \nReturns:\n    List of workflow dictionaries that match the search criteria\n    \nRaises:\n    HTTPError: If the request to the API fails\n', 'inputSchema': {'properties': {'parent_uuid': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Parent Uuid'}, 'name_contains': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Name Contains'}, 'public': {'anyOf': [{'type': 'boolean'}, {'type': 'null'}], 'default': None, 'title': 'Public'}, 'starred': {'anyOf': [{'type': 'boolean'}, {'type': 'null'}], 'default': None, 'title': 'Starred'}, 'status': {'anyOf': [{'type': 'integer'}, {'type': 'null'}], 'default': None, 'title': 'Status'}, 'workflow_type': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Workflow Type'}, 'page': {'default': 0, 'title': 'Page', 'type': 'integer'}, 'size': {'default': 10, 'title': 'Size', 'type': 'integer'}}, 'type': 'object'}}, {'name': 'workflow_update', 'description': 'Update workflow details.\n\nArgs:\n    workflow_uuid: The UUID of the workflow to update\n    name: New name for the workflow (optional)\n    notes: New notes for the workflow (optional)\n    starred: Whether to star/unstar the workflow (optional)\n    public: Whether to make the workflow public/private (optional)\n    \nReturns:\n    Dictionary with updated workflow information\n', 'inputSchema': {'properties': {'workflow_uuid': {'title': 'Workflow Uuid', 'type': 'string'}, 'name': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Name'}, 'notes': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Notes'}, 'starred': {'anyOf': [{'type': 'boolean'}, {'type': 'null'}], 'default': None, 'title': 'Starred'}, 'public': {'anyOf': [{'type': 'boolean'}, {'type': 'null'}], 'default': None, 'title': 'Public'}}, 'required': ['workflow_uuid'], 'type': 'object'}}, {'name': 'workflow_is_finished', 'description': 'Check if a workflow is finished.\n\nArgs:\n    workflow_uuid: The UUID of the workflow to check\n    \nReturns:\n    Dictionary with workflow completion status\n', 'inputSchema': {'properties': {'workflow_uuid': {'title': 'Workflow Uuid', 'type': 'string'}}, 'required': ['workflow_uuid'], 'type': 'object'}}, {'name': 'workflow_delete_data', 'description': 'Delete workflow data while keeping the workflow record.\n\nArgs:\n    workflow_uuid: The UUID of the workflow\n    \nReturns:\n    Dictionary with confirmation message\n', 'inputSchema': {'properties': {'workflow_uuid': {'title': 'Workflow Uuid', 'type': 'string'}}, 'required': ['workflow_uuid'], 'type': 'object'}}]})), metadata=None)
2025-08-02 13:42:11,388 - sse_starlette.sse - DEBUG - chunk: b'event: message\r\ndata: {"jsonrpc":"2.0","id":2,"result":{"tools":[{"name":"submit_basic_calculation_workflow","description":"Submit a basic calculation workflow using Rowan v2 API.\\n\\nPerforms fundamental quantum chemistry calculations with configurable methods\\nand computational tasks. Returns a workflow object for tracking progress.\\n","inputSchema":{"properties":{"initial_molecule":{"anyOf":[{"type":"string"},{"additionalProperties":true,"type":"object"},{}],"description":"The molecule to perform the calculation on. Can be a SMILES string, dict, StJamesMolecule, or RdkitMol object","title":"Initial Molecule"},"method":{"default":"uma_m_omol","description":"The method to use for the calculation (e.g., \'uma_m_omol\', \'gfn2-xtb\', \'r2scan_3c\')","title":"Method","type":"string"},"tasks":{"anyOf":[{"items":{"type":"string"},"type":"array"},{"type":"null"}],"default":null,"description":"List of computational tasks to perform. Optional[List[str]], Defaults to None","title":"Tasks"},"mode":{"default":"auto","description":"The mode to run the calculation in (\'auto\', \'rapid\', \'careful\', \'meticulous\')","title":"Mode","type":"string"},"engine":{"default":"omol25","description":"The computational engine to use (\'omol25\', \'xtb\', \'psi4\')","title":"Engine","type":"string"},"name":{"default":"Basic Calculation Workflow","description":"The name of the workflow for identification","title":"Name","type":"string"},"folder_uuid":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"description":"UUID of the folder to place the workflow in (optional)","title":"Folder Uuid"},"max_credits":{"anyOf":[{"type":"integer"},{"type":"null"}],"default":null,"description":"Maximum number of credits to use for the workflow (optional)","title":"Max Credits"}},"required":["initial_molecule"],"type":"object"}},{"name":"submit_conformer_search_workflow","description":"Submit a conformer search workflow using Rowan v2 API.\\n\\nExplores the conformational space of a molecule to find low-energy structures.\\n\\nArgs:\\n    initial_molecule: SMILES string or molecule object\\n    conf_gen_mode: default to \\"rapid\\"\\n        Options: \\"rapid\\", \\"careful\\", \\"meticulous\\"\\n    final_method: default: \\"aimnet2_wb97md3\\"\\n        Try other options, if user specifies\\n    solvent: Optional solvent for implicit solvation (e.g., \\"water\\", \\"ethanol\\")\\n    transition_state: Whether searching for transition state conformers (default: False)\\n    name: Workflow name for tracking\\n    folder_uuid: Optional folder UUID for organization\\n    max_credits: Optional credit limit for the calculation\\n    \\nReturns:\\n    Workflow object representing the submitted workflow\\n    \\nExample:\\n    # Basic conformer search\\n    result = submit_conformer_search_workflow(\\n        initial_molecule=\\"CCCC\\",\\n        conf_gen_mode=\\"rapid\\"\\n    )\\n    \\n    # Careful search with solvent\\n    result = submit_conformer_search_workflow(\\n        initial_molecule=\\"CC(C)CC(=O)O\\",\\n        conf_gen_mode=\\"careful\\",\\n        solvent=\\"water\\",\\n        final_method=\\"r2scan_3c\\"\\n    )\\n","inputSchema":{"properties":{"initial_molecule":{"title":"Initial Molecule","type":"string"},"conf_gen_mode":{"default":"rapid","title":"Conf Gen Mode","type":"string"},"final_method":{"default":"aimnet2_wb97md3","title":"Final Method","type":"string"},"solvent":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"title":"Solvent"},"transition_state":{"default":false,"title":"Transition State","type":"boolean"},"name":{"default":"Conformer Search Workflow","title":"Name","type":"string"},"folder_uuid":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"title":"Folder Uuid"},"max_credits":{"anyOf":[{"type":"integer"},{"type":"null"}],"default":null,"title":"Max Credits"}},"required":["initial_molecule"],"type":"object"}},{"name":"submit_solubility_workflow","description":"Submit a solubility prediction workflow using Rowan v2 API.\\n\\nPredicts solubility (log S) of a molecule in multiple solvents at various temperatures\\nusing machine learning models.\\n\\nArgs:\\n    initial_smiles: SMILES string of the molecule\\n    solvents: List of solvents as SMILES or common names (e.g., [\\"water\\", \\"ethanol\\"])\\n        If None, uses default solvents\\n    temperatures: List of temperatures in Kelvin\\n        If None, uses default temperature range\\n    name: Workflow name for tracking\\n    folder_uuid: Optional folder UUID for organization\\n    max_credits: Optional credit limit for the calculation\\n    \\nReturns:\\n    Workflow object representing the submitted workflow\\n    \\nExample:\\n    # Basic solubility prediction\\n    result = submit_solubility_workflow(\\n        initial_smiles=\\"CC(=O)Nc1ccc(O)cc1\\",\\n        solvents=[\\"water\\", \\"ethanol\\"],\\n        temperatures=[298.15, 310.15]\\n    )\\n    \\n    # With SMILES solvents\\n    result = submit_solubility_workflow(\\n        initial_smiles=\\"CC(=O)O\\",\\n        solvents=[\\"O\\", \\"CCO\\", \\"CCCCCC\\"],\\n        temperatures=[273.15, 298.15, 323.15]\\n    )\\n","inputSchema":{"properties":{"initial_smiles":{"title":"Initial Smiles","type":"string"},"solvents":{"anyOf":[{"items":{"type":"string"},"type":"array"},{"type":"null"}],"default":null,"title":"Solvents"},"temperatures":{"anyOf":[{"items":{"type":"number"},"type":"array"},{"type":"null"}],"default":null,"title":"Temperatures"},"name":{"default":"Solubility Workflow","title":"Name","type":"string"},"folder_uuid":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"title":"Folder Uuid"},"max_credits":{"anyOf":[{"type":"integer"},{"type":"null"}],"default":null,"title":"Max Credits"}},"required":["initial_smiles"],"type":"object"}},{"name":"submit_pka_workflow","description":"Submit a pKa prediction workflow using Rowan v2 API.\\n\\nPredicts acid dissociation constants (pKa) for ionizable groups in a molecule\\nusing quantum chemistry calculations.\\n\\nArgs:\\n    initial_molecule: SMILES string or molecule object\\n    pka_range: Tuple of (min, max) pKa values to search (default: (2, 12))\\n    deprotonate_elements: List of elements to consider for deprotonation\\n        (e.g., [\\"N\\", \\"O\\", \\"S\\"]). If None, uses defaults\\n    protonate_elements: List of elements to consider for protonation\\n        (e.g., [\\"N\\", \\"O\\"]). If None, uses defaults\\n    mode: Calculation mode (default: \\"careful\\")\\n        Options: \\"rapid\\", \\"careful\\", \\"meticulous\\"\\n    name: Workflow name for tracking\\n    folder_uuid: Optional folder UUID for organization\\n    max_credits: Optional credit limit for the calculation\\n    \\nReturns:\\n    Workflow object representing the submitted workflow\\n    \\nExample:\\n    # Basic pKa prediction\\n    result = submit_pka_workflow(\\n        initial_molecule=\\"CC(=O)O\\",\\n        pka_range=(2, 8)\\n    )\\n    \\n    # Specific elements with meticulous mode\\n    result = submit_pka_workflow(\\n        initial_molecule=\\"NC(C)C(=O)O\\",\\n        pka_range=(1, 14),\\n        deprotonate_elements=[\\"N\\", \\"O\\"],\\n        mode=\\"meticulous\\"\\n    )\\n","inputSchema":{"properties":{"initial_molecule":{"title":"Initial Molecule","type":"string"},"pka_range":{"default":[2,12],"maxItems":2,"minItems":2,"prefixItems":[{"type":"number"},{"type":"number"}],"title":"Pka Range","type":"array"},"deprotonate_elements":{"anyOf":[{"items":{"type":"string"},"type":"array"},{"type":"null"}],"default":null,"title":"Deprotonate Elements"},"protonate_elements":{"anyOf":[{"items":{"type":"string"},"type":"array"},{"type":"null"}],"default":null,"title":"Protonate Elements"},"mode":{"default":"careful","title":"Mode","type":"string"},"name":{"default":"pKa Workflow","title":"Name","type":"string"},"folder_uuid":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"title":"Folder Uuid"},"max_credits":{"anyOf":[{"type":"integer"},{"type":"null"}],"default":null,"title":"Max Credits"}},"required":["initial_molecule"],"type":"object"}},{"name":"submit_redox_potential_workflow","description":"Submit a redox potential calculation workflow using Rowan v2 API.\\n\\nCalculates reduction and/or oxidation potentials for a molecule using\\nquantum chemistry methods.\\n\\nArgs:\\n    initial_molecule: SMILES string or molecule object\\n    reduction: Whether to calculate reduction potential (default: False)\\n    oxidization: Whether to calculate oxidation potential (default: True)\\n    mode: Calculation mode (default: \\"rapid\\")\\n        Options: \\"rapid\\", \\"careful\\", \\"meticulous\\"\\n    name: Workflow name for tracking\\n    folder_uuid: Optional folder UUID for organization\\n    max_credits: Optional credit limit for the calculation\\n    \\nReturns:\\n    Workflow object representing the submitted workflow\\n    \\nExample:\\n    # Basic oxidation potential\\n    result = submit_redox_potential_workflow(\\n        initial_molecule=\\"CC1=CC=CC=C1\\",\\n        oxidization=True\\n    )\\n    \\n    # Both reduction and oxidation with careful mode\\n    result = submit_redox_potential_workflow(\\n        initial_molecule=\\"c1ccccc1\\",\\n        reduction=True,\\n        oxidization=True,\\n        mode=\\"careful\\"\\n    )\\n","inputSchema":{"properties":{"initial_molecule":{"title":"Initial Molecule","type":"string"},"reduction":{"default":false,"title":"Reduction","type":"boolean"},"oxidization":{"default":true,"title":"Oxidization","type":"boolean"},"mode":{"default":"rapid","title":"Mode","type":"string"},"name":{"default":"Redox Potential Workflow","title":"Name","type":"string"},"folder_uuid":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"title":"Folder Uuid"},"max_credits":{"anyOf":[{"type":"integer"},{"type":"null"}],"default":null,"title":"Max Credits"}},"required":["initial_molecule"],"type":"object"}},{"name":"submit_fukui_workflow","description":"Submit a Fukui indices calculation workflow using Rowan v2 API.\\n\\nCalculates Fukui indices to predict molecular reactivity at different sites.\\nFukui indices indicate susceptibility to nucleophilic/electrophilic attack.\\n\\nArgs:\\n    initial_molecule: SMILES string or molecule object\\n    optimization_method: Method for geometry optimization (default: \\"gfn2_xtb\\")\\n        Common options: \\"gfn2_xtb\\", \\"r2scan_3c\\", \\"aimnet2_wb97md3\\"\\n    fukui_method: Method for Fukui calculation (default: \\"gfn1_xtb\\")\\n        Common options: \\"gfn1_xtb\\", \\"gfn2_xtb\\"\\n    solvent_settings: Optional solvent configuration dictionary\\n        Example: {\\"solvent\\": \\"water\\", \\"model\\": \\"alpb\\"}\\n    name: Workflow name for tracking\\n    folder_uuid: Optional folder UUID for organization\\n    max_credits: Optional credit limit for the calculation\\n    \\nReturns:\\n    Workflow object representing the submitted workflow\\n    \\nExample:\\n    # Basic Fukui indices\\n    result = submit_fukui_workflow(\\n        initial_molecule=\\"CC(=O)O\\"\\n    )\\n    \\n    # With solvent and advanced methods\\n    result = submit_fukui_workflow(\\n        initial_molecule=\\"c1ccccc1N\\",\\n        optimization_method=\\"r2scan_3c\\",\\n        fukui_method=\\"gfn2_xtb\\",\\n        solvent_settings={\\"solvent\\": \\"water\\", \\"model\\": \\"alpb\\"}\\n    )\\n","inputSchema":{"properties":{"initial_molecule":{"title":"Initial Molecule","type":"string"},"optimization_method":{"default":"gfn2_xtb","title":"Optimization Method","type":"string"},"fukui_method":{"default":"gfn1_xtb","title":"Fukui Method","type":"string"},"solvent_settings":{"anyOf":[{"additionalProperties":true,"type":"object"},{"type":"null"}],"default":null,"title":"Solvent Settings"},"name":{"default":"Fukui Workflow","title":"Name","type":"string"},"folder_uuid":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"title":"Folder Uuid"},"max_credits":{"anyOf":[{"type":"integer"},{"type":"null"}],"default":null,"title":"Max Credits"}},"required":["initial_molecule"],"type":"object"}},{"name":"submit_tautomer_search_workflow","description":"Submit a tautomer search workflow using Rowan v2 API.\\n\\nSearches for different tautomeric forms of a molecule and evaluates their\\nrelative stabilities. Tautomers are structural isomers that readily interconvert.\\n\\nArgs:\\n    initial_molecule: SMILES string or molecule object\\n    mode: Search mode (default: \\"careful\\")\\n        Options: \\"rapid\\", \\"careful\\", \\"meticulous\\"\\n    name: Workflow name for tracking\\n    folder_uuid: Optional folder UUID for organization\\n    max_credits: Optional credit limit for the calculation\\n    \\nReturns:\\n    Workflow object representing the submitted workflow\\n    \\nExample:\\n    # Basic tautomer search\\n    result = submit_tautomer_search_workflow(\\n        initial_molecule=\\"CC(=O)CC(=O)C\\"\\n    )\\n    \\n    # Meticulous search for complex molecule\\n    result = submit_tautomer_search_workflow(\\n        initial_molecule=\\"c1ccc2c(c1)ncc(=O)[nH]2\\",\\n        mode=\\"meticulous\\"\\n    )\\n","inputSchema":{"properties":{"initial_molecule":{"title":"Initial Molecule","type":"string"},"mode":{"default":"careful","title":"Mode","type":"string"},"name":{"default":"Tautomer Search Workflow","title":"Name","type":"string"},"folder_uuid":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"title":"Folder Uuid"},"max_credits":{"anyOf":[{"type":"integer"},{"type":"null"}],"default":null,"title":"Max Credits"}},"required":["initial_molecule"],"type":"object"}},{"name":"submit_descriptors_workflow","description":"Submit a molecular descriptors calculation workflow using Rowan v2 API.\\n\\nCalculates a comprehensive set of molecular descriptors including:\\n- Physical properties (MW, logP, TPSA, etc.)\\n- Electronic properties (HOMO/LUMO, dipole moment, etc.)\\n- Structural features (rotatable bonds, H-bond donors/acceptors, etc.)\\n- Topological indices\\n\\nArgs:\\n    initial_molecule: SMILES string or molecule object\\n    name: Workflow name for tracking\\n    folder_uuid: Optional folder UUID for organization\\n    max_credits: Optional credit limit for the calculation\\n    \\nReturns:\\n    Workflow object representing the submitted workflow\\n    \\nExample:\\n    # Basic descriptor calculation\\n    result = submit_descriptors_workflow(\\n        initial_molecule=\\"CC(=O)Nc1ccc(O)cc1\\"\\n    )\\n    \\n    # For complex molecule\\n    result = submit_descriptors_workflow(\\n        initial_molecule=\\"CN1C=NC2=C1C(=O)N(C(=O)N2C)C\\",\\n        name=\\"Caffeine Descriptors\\"\\n    )\\n","inputSchema":{"properties":{"initial_molecule":{"title":"Initial Molecule","type":"string"},"name":{"default":"Descriptors Workflow","title":"Name","type":"string"},"folder_uuid":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"title":"Folder Uuid"},"max_credits":{"anyOf":[{"type":"integer"},{"type":"null"}],"default":null,"title":"Max Credits"}},"required":["initial_molecule"],"type":"object"}},{"name":"submit_scan_workflow","description":"Submit a potential energy surface scan workflow using Rowan v2 API.\\n\\nPerforms systematic scans along specified molecular coordinates (bonds, angles,\\nor dihedrals) to map the potential energy surface.\\n\\nArgs:\\n    initial_molecule: SMILES string or molecule object\\n    scan_settings: Dictionary specifying scan parameters\\n        Example: {\\n            \\"type\\": \\"dihedral\\",  # or \\"bond\\", \\"angle\\"\\n            \\"atoms\\": [0, 1, 2, 3],  # atom indices\\n            \\"start\\": -180,\\n            \\"stop\\": 180,\\n            \\"step\\": 10\\n        }\\n    calculation_engine: Computational engine (default: \\"omol25\\")\\n        Options: \\"omol25\\", \\"xtb\\", \\"psi4\\"\\n    calculation_method: Method for calculations (default: \\"uma_m_omol\\")\\n        Options depend on engine\\n    wavefront_propagation: Use wavefront optimization (default: True)\\n        Speeds up scans by using previous geometries as starting points\\n    name: Workflow name for tracking\\n    folder_uuid: Optional folder UUID for organization\\n    max_credits: Optional credit limit for the calculation\\n    \\nReturns:\\n    Workflow object representing the submitted workflow\\n    \\nExample:\\n    # Dihedral scan\\n    result = submit_scan_workflow(\\n        initial_molecule=\\"CC(C)CC\\",\\n        scan_settings={\\n            \\"type\\": \\"dihedral\\",\\n            \\"atoms\\": [0, 1, 2, 3],\\n            \\"start\\": -180,\\n            \\"stop\\": 180,\\n            \\"step\\": 15\\n        }\\n    )\\n    \\n    # Bond scan with advanced method\\n    result = submit_scan_workflow(\\n        initial_molecule=\\"CC\\",\\n        scan_settings={\\n            \\"type\\": \\"bond\\",\\n            \\"atoms\\": [0, 1],\\n            \\"start\\": 1.0,\\n            \\"stop\\": 2.5,\\n            \\"step\\": 0.1\\n        },\\n        calculation_method=\\"r2scan_3c\\"\\n    )\\n","inputSchema":{"properties":{"initial_molecule":{"title":"Initial Molecule","type":"string"},"scan_settings":{"anyOf":[{"additionalProperties":true,"type":"object"},{"type":"null"}],"default":null,"title":"Scan Settings"},"calculation_engine":{"default":"omol25","title":"Calculation Engine","type":"string"},"calculation_method":{"default":"uma_m_omol","title":"Calculation Method","type":"string"},"wavefront_propagation":{"default":true,"title":"Wavefront Propagation","type":"boolean"},"name":{"default":"Scan Workflow","title":"Name","type":"string"},"folder_uuid":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"title":"Folder Uuid"},"max_credits":{"anyOf":[{"type":"integer"},{"type":"null"}],"default":null,"title":"Max Credits"}},"required":["initial_molecule"],"type":"object"}},{"name":"submit_irc_workflow","description":"Submits an Intrinsic Reaction Coordinate (IRC) workflow to the API.\\n\\nArgs:\\n    initial_molecule: The initial molecule to perform the IRC calculation on.\\n        Can be a dict, StJamesMolecule, or RdkitMol object\\n    method: The computational method to use for the IRC calculation (default: \\"uma_m_omol\\")\\n        See list of available methods for options\\n    engine: The computational engine to use for the calculation (default: \\"omol25\\")\\n        See list of available engines\\n    preopt: Whether to perform a pre-optimization of the molecule (default: True)\\n    step_size: The step size to use for the IRC calculation (default: 0.05)\\n    max_irc_steps: The maximum number of IRC steps to perform (default: 30)\\n    name: The name of the workflow\\n    folder_uuid: The UUID of the folder to place the workflow in\\n    max_credits: The maximum number of credits to use for the workflow\\n    \\nReturns:\\n    Workflow object representing the submitted IRC workflow\\n    \\nExample:\\n    # Basic IRC calculation\\n    result = submit_irc_workflow(\\n        initial_molecule={\\"smiles\\": \\"[CH3].[CH3]\\"},\\n        method=\\"gfn2_xtb\\",\\n        max_irc_steps=50\\n    )\\n    \\n    # IRC with specific method and engine\\n    result = submit_irc_workflow(\\n        initial_molecule={\\"smiles\\": \\"CC(O)=CC\\"},\\n        method=\\"r2scan_3c\\",\\n        engine=\\"psi4\\",\\n        step_size=0.03\\n    )\\n","inputSchema":{"properties":{"initial_molecule":{"anyOf":[{"additionalProperties":true,"type":"object"},{},{"type":"null"}],"default":null,"title":"Initial Molecule"},"method":{"default":"uma_m_omol","title":"Method","type":"string"},"engine":{"default":"omol25","title":"Engine","type":"string"},"preopt":{"default":true,"title":"Preopt","type":"boolean"},"step_size":{"default":0.05,"title":"Step Size","type":"number"},"max_irc_steps":{"default":30,"title":"Max Irc Steps","type":"integer"},"name":{"default":"IRC Workflow","title":"Name","type":"string"},"folder_uuid":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"title":"Folder Uuid"},"max_credits":{"anyOf":[{"type":"integer"},{"type":"null"}],"default":null,"title":"Max Credits"}},"type":"object"}},{"name":"submit_protein_cofolding_workflow","description":"Submits a protein cofolding workflow to the API.\\n\\nArgs:\\n    initial_protein_sequences: The sequences of the proteins to be cofolded\\n    initial_smiles_list: A list of SMILES strings for the ligands to be cofolded with\\n    ligand_binding_affinity_index: The index of the ligand for which to compute the binding affinity\\n    use_msa_server: Whether to use the MSA server for the computation\\n    use_potentials: Whether to use potentials for the computation\\n    name: The name of the workflow\\n    model: The model to use for the computation\\n    folder_uuid: The UUID of the folder to store the workflow in\\n    max_credits: The maximum number of credits to use for the workflow\\n    \\nReturns:\\n    Workflow object representing the submitted workflow\\n    \\nExample:\\n    # Protein dimer cofolding\\n    result = submit_protein_cofolding_workflow(\\n        initial_protein_sequences=[\\n            \\"MKTAYIAKQRQISFVKSHFSRQLEERLGLIEVQAPILSRVGDGTQDNLSGAEK\\",\\n            \\"MKQHKAMIVALIVICITAVVAALVTRKDLCEVHIRTGQTEVAVF\\"\\n        ]\\n    )\\n    \\n    # Protein-ligand complex\\n    result = submit_protein_cofolding_workflow(\\n        initial_protein_sequences=[\\"MGSSHHHHHHSSGLVPRGSH\\"],\\n        initial_smiles_list=[\\"CC(=O)O\\", \\"CCO\\"],\\n        ligand_binding_affinity_index=0,\\n        use_msa_server=True\\n    )\\n","inputSchema":{"properties":{"initial_protein_sequences":{"items":{"type":"string"},"title":"Initial Protein Sequences","type":"array"},"initial_smiles_list":{"anyOf":[{"items":{"type":"string"},"type":"array"},{"type":"null"}],"default":null,"title":"Initial Smiles List"},"ligand_binding_affinity_index":{"anyOf":[{"type":"integer"},{"type":"null"}],"default":null,"title":"Ligand Binding Affinity Index"},"use_msa_server":{"default":true,"title":"Use Msa Server","type":"boolean"},"use_potentials":{"default":false,"title":"Use Potentials","type":"boolean"},"name":{"default":"Cofolding Workflow","title":"Name","type":"string"},"model":{"default":"boltz_2","title":"Model","type":"string"},"folder_uuid":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"title":"Folder Uuid"},"max_credits":{"anyOf":[{"type":"integer"},{"type":"null"}],"default":null,"title":"Max Credits"}},"required":["initial_protein_sequences"],"type":"object"}},{"name":"submit_docking_workflow","description":"Submits a Docking workflow to the API.\\n\\nArgs:\\n    protein: The protein to dock. Can be fed as a uuid or a Protein object\\n    pocket: The pocket to dock into\\n    initial_molecule: The initial molecule to be docked.\\n        Can be a dict, StJamesMolecule, or RdkitMol object\\n    do_csearch: Whether to perform a conformational search on the ligand\\n    do_optimization: Whether to perform an optimization on the ligand\\n    name: The name of the workflow\\n    folder_uuid: The UUID of the folder to place the workflow in\\n    max_credits: The maximum number of credits to use for the workflow\\n    \\nReturns:\\n    Workflow object representing the submitted workflow\\n    \\nExample:\\n    # Basic docking with protein UUID\\n    result = submit_docking_workflow(\\n        protein=\\"protein-uuid-123\\",\\n        pocket=pocket_obj,\\n        initial_molecule={\\"smiles\\": \\"CC(=O)Oc1ccccc1C(=O)O\\"}\\n    )\\n    \\n    # Docking with optimization disabled\\n    result = submit_docking_workflow(\\n        protein=protein_obj,\\n        pocket=pocket_obj,\\n        initial_molecule={\\"smiles\\": \\"CCO\\"},\\n        do_csearch=False,\\n        do_optimization=False\\n    )\\n","inputSchema":{"properties":{"protein":{"anyOf":[{"type":"string"},{}],"title":"Protein"},"pocket":{"title":"Pocket"},"initial_molecule":{"anyOf":[{"additionalProperties":true,"type":"object"},{},{"type":"null"}],"default":null,"title":"Initial Molecule"},"do_csearch":{"default":true,"title":"Do Csearch","type":"boolean"},"do_optimization":{"default":true,"title":"Do Optimization","type":"boolean"},"name":{"default":"Docking Workflow","title":"Name","type":"string"},"folder_uuid":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"title":"Folder Uuid"},"max_credits":{"anyOf":[{"type":"integer"},{"type":"null"}],"default":null,"title":"Max Credits"}},"required":["protein","pocket"],"type":"object"}},{"name":"workflow_fetch_latest","description":"Fetch the latest workflow data from the database.\\n\\nUpdates the workflow object with the most recent status and results.\\n\\nArgs:\\n    workflow_uuid: The UUID of the workflow to fetch\\n    in_place: Whether to update the workflow object in place (default: False)\\n    \\nReturns:\\n    Dictionary containing the updated workflow data including status and results\\n","inputSchema":{"properties":{"workflow_uuid":{"title":"Workflow Uuid","type":"string"},"in_place":{"default":false,"title":"In Place","type":"boolean"}},"required":["workflow_uuid"],"type":"object"}},{"name":"workflow_wait_for_result","description":"Wait for a workflow to complete and return the result.\\n\\nBlocks until the workflow completes, polling at specified intervals.\\n\\nArgs:\\n    workflow_uuid: The UUID of the workflow to wait for\\n    poll_interval: Time in seconds between status checks (default: 5)\\n    \\nReturns:\\n    Dictionary containing the completed workflow data including results\\n","inputSchema":{"properties":{"workflow_uuid":{"title":"Workflow Uuid","type":"string"},"poll_interval":{"default":5,"title":"Poll Interval","type":"integer"}},"required":["workflow_uuid"],"type":"object"}},{"name":"workflow_get_status","description":"Get the current status of a workflow.\\n\\nArgs:\\n    workflow_uuid: The UUID of the workflow\\n    \\nReturns:\\n    Dictionary with status information\\n","inputSchema":{"properties":{"workflow_uuid":{"title":"Workflow Uuid","type":"string"}},"required":["workflow_uuid"],"type":"object"}},{"name":"workflow_stop","description":"Stop a running workflow.\\n\\nArgs:\\n    workflow_uuid: The UUID of the workflow to stop\\n    \\nReturns:\\n    Dictionary with confirmation message\\n","inputSchema":{"properties":{"workflow_uuid":{"title":"Workflow Uuid","type":"string"}},"required":["workflow_uuid"],"type":"object"}},{"name":"workflow_delete","description":"Delete a workflow.\\n\\nThis permanently removes the workflow and its results from the database.\\n\\nArgs:\\n    workflow_uuid: The UUID of the workflow to delete\\n    \\nReturns:\\n    Dictionary with confirmation message\\n","inputSchema":{"properties":{"workflow_uuid":{"title":"Workflow Uuid","type":"string"}},"required":["workflow_uuid"],"type":"object"}},{"name":"retrieve_workflow","description":"Retrieve a workflow from the API.\\n\\nArgs:\\n    uuid: The UUID of the workflow to retrieve\\n    \\nReturns:\\n    Dictionary containing the complete workflow data\\n    \\nRaises:\\n    HTTPError: If the API request fails\\n","inputSchema":{"properties":{"uuid":{"title":"Uuid","type":"string"}},"required":["uuid"],"type":"object"}},{"name":"retrieve_calculation_molecules","description":"Retrieve a list of molecules from a calculation.\\n\\nArgs:\\n    uuid: The UUID of the calculation to retrieve molecules from\\n    \\nReturns:\\n    List of dictionaries representing the molecules in the calculation\\n    \\nRaises:\\n    HTTPError: If the API request fails\\n","inputSchema":{"properties":{"uuid":{"title":"Uuid","type":"string"}},"required":["uuid"],"type":"object"}},{"name":"list_workflows","description":"List workflows subject to the specified criteria.\\n\\nArgs:\\n    parent_uuid: The UUID of the parent folder\\n    name_contains: Substring to search for in workflow names\\n    public: Filter workflows by their public status\\n    starred: Filter workflows by their starred status\\n    status: Filter workflows by their status\\n    workflow_type: Filter workflows by their type\\n    page: The page number to retrieve (default: 0)\\n    size: The number of items per page (default: 10)\\n    \\nReturns:\\n    List of workflow dictionaries that match the search criteria\\n    \\nRaises:\\n    HTTPError: If the request to the API fails\\n","inputSchema":{"properties":{"parent_uuid":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"title":"Parent Uuid"},"name_contains":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"title":"Name Contains"},"public":{"anyOf":[{"type":"boolean"},{"type":"null"}],"default":null,"title":"Public"},"starred":{"anyOf":[{"type":"boolean"},{"type":"null"}],"default":null,"title":"Starred"},"status":{"anyOf":[{"type":"integer"},{"type":"null"}],"default":null,"title":"Status"},"workflow_type":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"title":"Workflow Type"},"page":{"default":0,"title":"Page","type":"integer"},"size":{"default":10,"title":"Size","type":"integer"}},"type":"object"}},{"name":"workflow_update","description":"Update workflow details.\\n\\nArgs:\\n    workflow_uuid: The UUID of the workflow to update\\n    name: New name for the workflow (optional)\\n    notes: New notes for the workflow (optional)\\n    starred: Whether to star/unstar the workflow (optional)\\n    public: Whether to make the workflow public/private (optional)\\n    \\nReturns:\\n    Dictionary with updated workflow information\\n","inputSchema":{"properties":{"workflow_uuid":{"title":"Workflow Uuid","type":"string"},"name":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"title":"Name"},"notes":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"title":"Notes"},"starred":{"anyOf":[{"type":"boolean"},{"type":"null"}],"default":null,"title":"Starred"},"public":{"anyOf":[{"type":"boolean"},{"type":"null"}],"default":null,"title":"Public"}},"required":["workflow_uuid"],"type":"object"}},{"name":"workflow_is_finished","description":"Check if a workflow is finished.\\n\\nArgs:\\n    workflow_uuid: The UUID of the workflow to check\\n    \\nReturns:\\n    Dictionary with workflow completion status\\n","inputSchema":{"properties":{"workflow_uuid":{"title":"Workflow Uuid","type":"string"}},"required":["workflow_uuid"],"type":"object"}},{"name":"workflow_delete_data","description":"Delete workflow data while keeping the workflow record.\\n\\nArgs:\\n    workflow_uuid: The UUID of the workflow\\n    \\nReturns:\\n    Dictionary with confirmation message\\n","inputSchema":{"properties":{"workflow_uuid":{"title":"Workflow Uuid","type":"string"}},"required":["workflow_uuid"],"type":"object"}}]}}\r\n\r\n'
2025-08-02 13:42:11,394 - mcp.server.sse - DEBUG - Handling POST message
2025-08-02 13:42:11,394 - mcp.server.sse - DEBUG - Parsed session ID: 9eb62d12-9922-4e00-918e-61d22c022c4b
2025-08-02 13:42:11,394 - mcp.server.sse - DEBUG - Received JSON: b'{"method":"prompts/list","jsonrpc":"2.0","id":3}'
2025-08-02 13:42:11,394 - mcp.server.sse - DEBUG - Validated client message: root=JSONRPCRequest(method='prompts/list', params=None, jsonrpc='2.0', id=3)
2025-08-02 13:42:11,394 - mcp.server.sse - DEBUG - Sending session message to writer: SessionMessage(message=JSONRPCMessage(root=JSONRPCRequest(method='prompts/list', params=None, jsonrpc='2.0', id=3)), metadata=ServerMessageMetadata(related_request_id=None, request_context=<starlette.requests.Request object at 0x10c7928d0>))
2025-08-02 13:42:11,395 - mcp.server.lowlevel.server - DEBUG - Received message: <mcp.shared.session.RequestResponder object at 0x10c7a6fd0>
2025-08-02 13:42:11,395 - mcp.server.lowlevel.server - INFO - Processing request of type ListPromptsRequest
2025-08-02 13:42:11,395 - mcp.server.lowlevel.server - DEBUG - Dispatching request of type ListPromptsRequest
2025-08-02 13:42:11,395 - mcp.server.lowlevel.server - DEBUG - Response sent
2025-08-02 13:42:11,396 - mcp.server.sse - DEBUG - Sending message via SSE: SessionMessage(message=JSONRPCMessage(root=JSONRPCResponse(jsonrpc='2.0', id=3, result={'prompts': []})), metadata=None)
2025-08-02 13:42:11,396 - sse_starlette.sse - DEBUG - chunk: b'event: message\r\ndata: {"jsonrpc":"2.0","id":3,"result":{"prompts":[]}}\r\n\r\n'
2025-08-02 13:42:24,665 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 20:42:24.665691+00:00\r\n\r\n'
2025-08-02 13:42:26,374 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 20:42:26.374245+00:00\r\n\r\n'
2025-08-02 13:42:39,667 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 20:42:39.667245+00:00\r\n\r\n'
2025-08-02 13:42:40,228 - mcp.server.sse - DEBUG - Handling POST message
2025-08-02 13:42:40,228 - mcp.server.sse - DEBUG - Parsed session ID: 9eb62d12-9922-4e00-918e-61d22c022c4b
2025-08-02 13:42:40,228 - mcp.server.sse - DEBUG - Received JSON: b'{"method":"tools/call","params":{"name":"submit_basic_calculation_workflow","arguments":{"initial_molecule":"CCCC","engine":"xtb","method":"gfn2_xtb","mode":"auto","name":"Basic Calculation Workflow - Butane"},"_meta":{"progressToken":4}},"jsonrpc":"2.0","id":4}'
2025-08-02 13:42:40,229 - mcp.server.sse - DEBUG - Validated client message: root=JSONRPCRequest(method='tools/call', params={'name': 'submit_basic_calculation_workflow', 'arguments': {'initial_molecule': 'CCCC', 'engine': 'xtb', 'method': 'gfn2_xtb', 'mode': 'auto', 'name': 'Basic Calculation Workflow - Butane'}, '_meta': {'progressToken': 4}}, jsonrpc='2.0', id=4)
2025-08-02 13:42:40,229 - mcp.server.sse - DEBUG - Sending session message to writer: SessionMessage(message=JSONRPCMessage(root=JSONRPCRequest(method='tools/call', params={'name': 'submit_basic_calculation_workflow', 'arguments': {'initial_molecule': 'CCCC', 'engine': 'xtb', 'method': 'gfn2_xtb', 'mode': 'auto', 'name': 'Basic Calculation Workflow - Butane'}, '_meta': {'progressToken': 4}}, jsonrpc='2.0', id=4)), metadata=ServerMessageMetadata(related_request_id=None, request_context=<starlette.requests.Request object at 0x10c792840>))
2025-08-02 13:42:40,229 - mcp.server.lowlevel.server - DEBUG - Received message: <mcp.shared.session.RequestResponder object at 0x10c6d7bb0>
2025-08-02 13:42:40,229 - mcp.server.lowlevel.server - INFO - Processing request of type CallToolRequest
2025-08-02 13:42:40,229 - mcp.server.lowlevel.server - DEBUG - Dispatching request of type CallToolRequest
2025-08-02 13:42:40,230 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - INFO - ============================================================
2025-08-02 13:42:40,230 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - INFO - submit_basic_calculation_workflow called with:
2025-08-02 13:42:40,230 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - INFO -   method: gfn2_xtb (type: <class 'str'>)
2025-08-02 13:42:40,230 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - INFO -   tasks: None (type: <class 'NoneType'>)
2025-08-02 13:42:40,230 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - INFO -   mode: auto
2025-08-02 13:42:40,230 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - INFO -   engine: xtb
2025-08-02 13:42:40,230 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - INFO -   name: Basic Calculation Workflow - Butane
2025-08-02 13:42:40,230 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - INFO -   initial_molecule: 'CCCC' (SMILES string)
2025-08-02 13:42:40,230 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - DEBUG - Converting SMILES string to StJamesMolecule
2025-08-02 13:42:40,260 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - DEBUG - Successfully converted to StJamesMolecule
2025-08-02 13:42:40,260 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - INFO - Calling rowan.submit_basic_calculation_workflow...
2025-08-02 13:42:40,281 - httpcore.connection - DEBUG - connect_tcp.started host='api.rowansci.com' port=443 local_address=None timeout=5.0 socket_options=None
2025-08-02 13:42:40,386 - httpcore.connection - DEBUG - connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x10c803770>
2025-08-02 13:42:40,386 - httpcore.connection - DEBUG - start_tls.started ssl_context=<ssl.SSLContext object at 0x10c889490> server_hostname='api.rowansci.com' timeout=5.0
2025-08-02 13:42:40,510 - httpcore.connection - DEBUG - start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x10c7a7610>
2025-08-02 13:42:40,511 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-08-02 13:42:40,512 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-08-02 13:42:40,512 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-08-02 13:42:40,512 - httpcore.http11 - DEBUG - send_request_body.complete
2025-08-02 13:42:40,512 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-08-02 13:42:41,102 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sat, 02 Aug 2025 20:42:41 GMT'), (b'Content-Type', b'application/json'), (b'Content-Length', b'2087'), (b'Connection', b'keep-alive'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains')])
2025-08-02 13:42:41,104 - httpx - INFO - HTTP Request: POST https://api.rowansci.com/workflow "HTTP/1.1 200 OK"
2025-08-02 13:42:41,104 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-08-02 13:42:41,104 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-08-02 13:42:41,105 - httpcore.http11 - DEBUG - response_closed.started
2025-08-02 13:42:41,105 - httpcore.http11 - DEBUG - response_closed.complete
2025-08-02 13:42:41,105 - httpcore.connection - DEBUG - close.started
2025-08-02 13:42:41,106 - httpcore.connection - DEBUG - close.complete
2025-08-02 13:42:41,106 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - INFO - SUCCESS: Workflow submitted with UUID: c25eeb44-b0c0-47dc-b5dc-3fb9ed7dbc3d
2025-08-02 13:42:41,107 - mcp.server.lowlevel.server - DEBUG - Response sent
2025-08-02 13:42:41,107 - mcp.server.sse - DEBUG - Sending message via SSE: SessionMessage(message=JSONRPCMessage(root=JSONRPCResponse(jsonrpc='2.0', id=4, result={'content': [{'type': 'text', 'text': '{\n  "name": "Basic Calculation Workflow - Butane",\n  "uuid": "c25eeb44-b0c0-47dc-b5dc-3fb9ed7dbc3d",\n  "created_at": "2025-08-02T20:42:40.663886Z",\n  "updated_at": null,\n  "started_at": null,\n  "completed_at": null,\n  "object_status": 0,\n  "parent_uuid": "e5c3ce65-43df-4ab3-90e0-a56f42584cc0",\n  "notes": "",\n  "starred": false,\n  "public": false,\n  "object_type": "basic_calculation",\n  "object_data": {\n    "settings": {\n      "method": "GFN2_XTB",\n      "tasks": [\n        "optimize"\n      ],\n      "mode": "auto"\n    },\n    "engine": "xtb",\n    "initial_molecule": {\n      "charge": 0,\n      "multiplicity": 1,\n      "atoms": [\n        {\n          "atomic_number": 6,\n          "position": [\n            -1.57731622,\n            0.46259034,\n            0.02288227\n          ]\n        },\n        {\n          "atomic_number": 6,\n          "position": [\n            -0.55246934,\n            -0.31349805,\n            -0.78986664\n          ]\n        },\n        {\n          "atomic_number": 6,\n          "position": [\n            0.65178196,\n            -0.77563238,\n            0.03104792\n          ]\n        },\n        {\n          "atomic_number": 6,\n          "position": [\n            1.5013315,\n            0.37070813,\n            0.55769072\n          ]\n        },\n        {\n          "atomic_number": 1,\n          "position": [\n            -1.17009891,\n            1.41344062,\n            0.37886292\n          ]\n        },\n        {\n          "atomic_number": 1,\n          "position": [\n            -1.91277475,\n            -0.11690438,\n            0.88874548\n          ]\n        },\n        {\n          "atomic_number": 1,\n          "position": [\n            -2.45332233,\n            0.68757176,\n            -0.59399069\n          ]\n        },\n        {\n          "atomic_number": 1,\n          "position": [\n            -0.21575239,\n            0.30052639,\n            -1.63326648\n          ]\n        },\n        {\n          "atomic_number": 1,\n          "position": [\n            -1.04230601,\n            -1.19688302,\n            -1.21658189\n          ]\n        },\n        {\n          "atomic_number": 1,\n          "position": [\n            0.31558706,\n            -1.39539838,\n            0.87044712\n          ]\n        },\n        {\n          "atomic_number": 1,\n          "position": [\n            1.28031633,\n            -1.41330121,\n            -0.60197473\n          ]\n        },\n        {\n          "atomic_number": 1,\n          "position": [\n            2.39258685,\n            -0.02154188,\n            1.05803044\n          ]\n        },\n        {\n          "atomic_number": 1,\n          "position": [\n            0.95227634,\n            0.97534316,\n            1.28543953\n          ]\n        },\n        {\n          "atomic_number": 1,\n          "position": [\n            1.83015992,\n            1.0229789,\n            -0.25746596\n          ]\n        }\n      ],\n      "cell": null,\n      "energy": null,\n      "scf_iterations": null,\n      "scf_completed": null,\n      "elapsed": null,\n      "homo_lumo_gap": null,\n      "gradient": null,\n      "stress": null,\n      "velocities": null,\n      "mulliken_charges": null,\n      "mulliken_spin_densities": null,\n      "dipole": null,\n      "vibrational_modes": null,\n      "zero_point_energy": null,\n      "thermal_energy_corr": null,\n      "thermal_enthalpy_corr": null,\n      "thermal_free_energy_corr": null,\n      "smiles": "CCCC",\n      "calculation_index": null\n    }\n  },\n  "email_when_complete": false,\n  "max_credits": null,\n  "elapsed": 0.0,\n  "credits_charged": 0.0\n}'}], 'isError': False})), metadata=None)
2025-08-02 13:42:41,108 - sse_starlette.sse - DEBUG - chunk: b'event: message\r\ndata: {"jsonrpc":"2.0","id":4,"result":{"content":[{"type":"text","text":"{\\n  \\"name\\": \\"Basic Calculation Workflow - Butane\\",\\n  \\"uuid\\": \\"c25eeb44-b0c0-47dc-b5dc-3fb9ed7dbc3d\\",\\n  \\"created_at\\": \\"2025-08-02T20:42:40.663886Z\\",\\n  \\"updated_at\\": null,\\n  \\"started_at\\": null,\\n  \\"completed_at\\": null,\\n  \\"object_status\\": 0,\\n  \\"parent_uuid\\": \\"e5c3ce65-43df-4ab3-90e0-a56f42584cc0\\",\\n  \\"notes\\": \\"\\",\\n  \\"starred\\": false,\\n  \\"public\\": false,\\n  \\"object_type\\": \\"basic_calculation\\",\\n  \\"object_data\\": {\\n    \\"settings\\": {\\n      \\"method\\": \\"GFN2_XTB\\",\\n      \\"tasks\\": [\\n        \\"optimize\\"\\n      ],\\n      \\"mode\\": \\"auto\\"\\n    },\\n    \\"engine\\": \\"xtb\\",\\n    \\"initial_molecule\\": {\\n      \\"charge\\": 0,\\n      \\"multiplicity\\": 1,\\n      \\"atoms\\": [\\n        {\\n          \\"atomic_number\\": 6,\\n          \\"position\\": [\\n            -1.57731622,\\n            0.46259034,\\n            0.02288227\\n          ]\\n        },\\n        {\\n          \\"atomic_number\\": 6,\\n          \\"position\\": [\\n            -0.55246934,\\n            -0.31349805,\\n            -0.78986664\\n          ]\\n        },\\n        {\\n          \\"atomic_number\\": 6,\\n          \\"position\\": [\\n            0.65178196,\\n            -0.77563238,\\n            0.03104792\\n          ]\\n        },\\n        {\\n          \\"atomic_number\\": 6,\\n          \\"position\\": [\\n            1.5013315,\\n            0.37070813,\\n            0.55769072\\n          ]\\n        },\\n        {\\n          \\"atomic_number\\": 1,\\n          \\"position\\": [\\n            -1.17009891,\\n            1.41344062,\\n            0.37886292\\n          ]\\n        },\\n        {\\n          \\"atomic_number\\": 1,\\n          \\"position\\": [\\n            -1.91277475,\\n            -0.11690438,\\n            0.88874548\\n          ]\\n        },\\n        {\\n          \\"atomic_number\\": 1,\\n          \\"position\\": [\\n            -2.45332233,\\n            0.68757176,\\n            -0.59399069\\n          ]\\n        },\\n        {\\n          \\"atomic_number\\": 1,\\n          \\"position\\": [\\n            -0.21575239,\\n            0.30052639,\\n            -1.63326648\\n          ]\\n        },\\n        {\\n          \\"atomic_number\\": 1,\\n          \\"position\\": [\\n            -1.04230601,\\n            -1.19688302,\\n            -1.21658189\\n          ]\\n        },\\n        {\\n          \\"atomic_number\\": 1,\\n          \\"position\\": [\\n            0.31558706,\\n            -1.39539838,\\n            0.87044712\\n          ]\\n        },\\n        {\\n          \\"atomic_number\\": 1,\\n          \\"position\\": [\\n            1.28031633,\\n            -1.41330121,\\n            -0.60197473\\n          ]\\n        },\\n        {\\n          \\"atomic_number\\": 1,\\n          \\"position\\": [\\n            2.39258685,\\n            -0.02154188,\\n            1.05803044\\n          ]\\n        },\\n        {\\n          \\"atomic_number\\": 1,\\n          \\"position\\": [\\n            0.95227634,\\n            0.97534316,\\n            1.28543953\\n          ]\\n        },\\n        {\\n          \\"atomic_number\\": 1,\\n          \\"position\\": [\\n            1.83015992,\\n            1.0229789,\\n            -0.25746596\\n          ]\\n        }\\n      ],\\n      \\"cell\\": null,\\n      \\"energy\\": null,\\n      \\"scf_iterations\\": null,\\n      \\"scf_completed\\": null,\\n      \\"elapsed\\": null,\\n      \\"homo_lumo_gap\\": null,\\n      \\"gradient\\": null,\\n      \\"stress\\": null,\\n      \\"velocities\\": null,\\n      \\"mulliken_charges\\": null,\\n      \\"mulliken_spin_densities\\": null,\\n      \\"dipole\\": null,\\n      \\"vibrational_modes\\": null,\\n      \\"zero_point_energy\\": null,\\n      \\"thermal_energy_corr\\": null,\\n      \\"thermal_enthalpy_corr\\": null,\\n      \\"thermal_free_energy_corr\\": null,\\n      \\"smiles\\": \\"CCCC\\",\\n      \\"calculation_index\\": null\\n    }\\n  },\\n  \\"email_when_complete\\": false,\\n  \\"max_credits\\": null,\\n  \\"elapsed\\": 0.0,\\n  \\"credits_charged\\": 0.0\\n}"}],"isError":false}}\r\n\r\n'
2025-08-02 13:42:41,376 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 20:42:41.376020+00:00\r\n\r\n'
2025-08-02 13:42:54,669 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 20:42:54.669153+00:00\r\n\r\n'
2025-08-02 13:42:56,378 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 20:42:56.377977+00:00\r\n\r\n'
2025-08-02 13:43:09,672 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 20:43:09.672675+00:00\r\n\r\n'
2025-08-02 13:43:11,381 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 20:43:11.380826+00:00\r\n\r\n'
2025-08-02 13:43:24,676 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 20:43:24.675818+00:00\r\n\r\n'
2025-08-02 13:43:26,383 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 20:43:26.383675+00:00\r\n\r\n'
2025-08-02 13:43:39,678 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 20:43:39.678592+00:00\r\n\r\n'
2025-08-02 13:43:41,386 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 20:43:41.386513+00:00\r\n\r\n'
2025-08-02 13:43:54,681 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 20:43:54.681112+00:00\r\n\r\n'
2025-08-02 13:43:56,389 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 20:43:56.389302+00:00\r\n\r\n'
2025-08-02 13:44:09,684 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 20:44:09.684196+00:00\r\n\r\n'
2025-08-02 13:44:11,392 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 20:44:11.392265+00:00\r\n\r\n'
2025-08-02 13:44:24,685 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 20:44:24.685231+00:00\r\n\r\n'
2025-08-02 13:44:26,394 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 20:44:26.394024+00:00\r\n\r\n'
2025-08-02 13:44:39,687 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 20:44:39.687836+00:00\r\n\r\n'
2025-08-02 13:44:41,396 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 20:44:41.396800+00:00\r\n\r\n'
2025-08-02 13:44:54,689 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 20:44:54.689503+00:00\r\n\r\n'
2025-08-02 13:44:56,398 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 20:44:56.398375+00:00\r\n\r\n'
2025-08-02 13:45:09,692 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 20:45:09.692809+00:00\r\n\r\n'
2025-08-02 13:45:11,017 - mcp.server.lowlevel.server - DEBUG - Initializing server 'Rowan MCP Server'
2025-08-02 13:45:11,017 - mcp.server.lowlevel.server - DEBUG - Registering handler for ListToolsRequest
2025-08-02 13:45:11,017 - mcp.server.lowlevel.server - DEBUG - Registering handler for ListResourcesRequest
2025-08-02 13:45:11,017 - mcp.server.lowlevel.server - DEBUG - Registering handler for ListResourceTemplatesRequest
2025-08-02 13:45:11,017 - mcp.server.lowlevel.server - DEBUG - Registering handler for PromptListRequest
2025-08-02 13:45:11,017 - mcp.server.lowlevel.server - DEBUG - Registering handler for CallToolRequest
2025-08-02 13:45:11,017 - mcp.server.lowlevel.server - DEBUG - Registering handler for ReadResourceRequest
2025-08-02 13:45:11,017 - mcp.server.lowlevel.server - DEBUG - Registering handler for GetPromptRequest
2025-08-02 13:45:11,030 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - INFO - ============================================================
2025-08-02 13:45:11,030 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - INFO - submit_basic_calculation_workflow called with:
2025-08-02 13:45:11,030 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - INFO -   method: gfn2-xtb (type: <class 'str'>)
2025-08-02 13:45:11,030 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - INFO -   tasks: None (type: <class 'NoneType'>)
2025-08-02 13:45:11,030 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - INFO -   mode: auto
2025-08-02 13:45:11,030 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - INFO -   engine: xtb
2025-08-02 13:45:11,030 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - INFO -   name: Test without tasks
2025-08-02 13:45:11,030 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - INFO -   initial_molecule: 'CCCC' (SMILES string)
2025-08-02 13:45:11,030 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - DEBUG - Converting SMILES string to StJamesMolecule
2025-08-02 13:45:11,051 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - DEBUG - Successfully converted to StJamesMolecule
2025-08-02 13:45:11,051 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - INFO - Calling rowan.submit_basic_calculation_workflow...
2025-08-02 13:45:11,074 - httpcore.connection - DEBUG - connect_tcp.started host='api.rowansci.com' port=443 local_address=None timeout=5.0 socket_options=None
2025-08-02 13:45:11,171 - httpcore.connection - DEBUG - connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x10ae470e0>
2025-08-02 13:45:11,171 - httpcore.connection - DEBUG - start_tls.started ssl_context=<ssl.SSLContext object at 0x10ae6ef00> server_hostname='api.rowansci.com' timeout=5.0
2025-08-02 13:45:11,285 - httpcore.connection - DEBUG - start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x10aec8550>
2025-08-02 13:45:11,285 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-08-02 13:45:11,285 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-08-02 13:45:11,285 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-08-02 13:45:11,286 - httpcore.http11 - DEBUG - send_request_body.complete
2025-08-02 13:45:11,286 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-08-02 13:45:11,401 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 20:45:11.401534+00:00\r\n\r\n'
2025-08-02 13:45:11,908 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sat, 02 Aug 2025 20:45:11 GMT'), (b'Content-Type', b'application/json'), (b'Content-Length', b'2070'), (b'Connection', b'keep-alive'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains')])
2025-08-02 13:45:11,909 - httpx - INFO - HTTP Request: POST https://api.rowansci.com/workflow "HTTP/1.1 200 OK"
2025-08-02 13:45:11,909 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-08-02 13:45:11,910 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-08-02 13:45:11,910 - httpcore.http11 - DEBUG - response_closed.started
2025-08-02 13:45:11,910 - httpcore.http11 - DEBUG - response_closed.complete
2025-08-02 13:45:11,911 - httpcore.connection - DEBUG - close.started
2025-08-02 13:45:11,911 - httpcore.connection - DEBUG - close.complete
2025-08-02 13:45:11,911 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - INFO - SUCCESS: Workflow submitted with UUID: c238e618-15bc-4324-a036-1f9c2d315d6b
2025-08-02 13:45:24,694 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 20:45:24.694636+00:00\r\n\r\n'
2025-08-02 13:45:26,402 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 20:45:26.402588+00:00\r\n\r\n'
2025-08-02 13:45:39,696 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 20:45:39.696758+00:00\r\n\r\n'
2025-08-02 13:45:41,404 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 20:45:41.404633+00:00\r\n\r\n'
2025-08-02 13:45:54,699 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 20:45:54.699491+00:00\r\n\r\n'
2025-08-02 13:45:56,408 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 20:45:56.408096+00:00\r\n\r\n'
2025-08-02 13:46:09,701 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 20:46:09.701155+00:00\r\n\r\n'
2025-08-02 13:46:11,410 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 20:46:11.410367+00:00\r\n\r\n'
2025-08-02 13:46:24,704 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 20:46:24.704059+00:00\r\n\r\n'
2025-08-02 13:46:26,413 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 20:46:26.413031+00:00\r\n\r\n'
2025-08-02 13:46:39,706 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 20:46:39.706772+00:00\r\n\r\n'
2025-08-02 13:46:41,414 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 20:46:41.414801+00:00\r\n\r\n'
2025-08-02 13:46:54,708 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 20:46:54.708505+00:00\r\n\r\n'
2025-08-02 13:46:56,416 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 20:46:56.416368+00:00\r\n\r\n'
2025-08-02 13:47:09,710 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 20:47:09.710417+00:00\r\n\r\n'
2025-08-02 13:47:11,418 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 20:47:11.417975+00:00\r\n\r\n'
2025-08-02 13:47:24,711 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 20:47:24.711502+00:00\r\n\r\n'
2025-08-02 13:47:25,433 - mcp.server.sse - DEBUG - Setting up SSE connection
2025-08-02 13:47:25,433 - mcp.server.sse - DEBUG - Created new session with ID: 2d7c0adc-fcb2-47bf-80f6-d47e45a9c113
2025-08-02 13:47:25,433 - mcp.server.sse - DEBUG - Starting SSE response task
2025-08-02 13:47:25,433 - mcp.server.sse - DEBUG - Yielding read and write streams
2025-08-02 13:47:25,435 - mcp.server.sse - DEBUG - Starting SSE writer
2025-08-02 13:47:25,435 - mcp.server.sse - DEBUG - Sent endpoint event: /messages/?session_id=2d7c0adcfcb247bf80f6d47e45a9c113
2025-08-02 13:47:25,435 - sse_starlette.sse - DEBUG - chunk: b'event: endpoint\r\ndata: /messages/?session_id=2d7c0adcfcb247bf80f6d47e45a9c113\r\n\r\n'
2025-08-02 13:47:25,455 - mcp.server.sse - DEBUG - Handling POST message
2025-08-02 13:47:25,455 - mcp.server.sse - DEBUG - Parsed session ID: 2d7c0adc-fcb2-47bf-80f6-d47e45a9c113
2025-08-02 13:47:25,455 - mcp.server.sse - DEBUG - Received JSON: b'{"jsonrpc":"2.0","id":0,"method":"initialize","params":{"protocolVersion":"2025-06-18","capabilities":{"sampling":{},"elicitation":{},"roots":{"listChanged":true}},"clientInfo":{"name":"mcp-inspector","version":"0.16.2"}}}'
2025-08-02 13:47:25,455 - mcp.server.sse - DEBUG - Validated client message: root=JSONRPCRequest(method='initialize', params={'protocolVersion': '2025-06-18', 'capabilities': {'sampling': {}, 'elicitation': {}, 'roots': {'listChanged': True}}, 'clientInfo': {'name': 'mcp-inspector', 'version': '0.16.2'}}, jsonrpc='2.0', id=0)
2025-08-02 13:47:25,455 - mcp.server.sse - DEBUG - Sending session message to writer: SessionMessage(message=JSONRPCMessage(root=JSONRPCRequest(method='initialize', params={'protocolVersion': '2025-06-18', 'capabilities': {'sampling': {}, 'elicitation': {}, 'roots': {'listChanged': True}}, 'clientInfo': {'name': 'mcp-inspector', 'version': '0.16.2'}}, jsonrpc='2.0', id=0)), metadata=ServerMessageMetadata(related_request_id=None, request_context=<starlette.requests.Request object at 0x10c889be0>))
2025-08-02 13:47:25,456 - mcp.server.sse - DEBUG - Sending message via SSE: SessionMessage(message=JSONRPCMessage(root=JSONRPCResponse(jsonrpc='2.0', id=0, result={'protocolVersion': '2025-03-26', 'capabilities': {'experimental': {}, 'prompts': {'listChanged': False}, 'resources': {'subscribe': False, 'listChanged': False}, 'tools': {'listChanged': False}}, 'serverInfo': {'name': 'Rowan MCP Server', 'version': '1.9.3'}})), metadata=None)
2025-08-02 13:47:25,456 - sse_starlette.sse - DEBUG - chunk: b'event: message\r\ndata: {"jsonrpc":"2.0","id":0,"result":{"protocolVersion":"2025-03-26","capabilities":{"experimental":{},"prompts":{"listChanged":false},"resources":{"subscribe":false,"listChanged":false},"tools":{"listChanged":false}},"serverInfo":{"name":"Rowan MCP Server","version":"1.9.3"}}}\r\n\r\n'
2025-08-02 13:47:25,462 - mcp.server.sse - DEBUG - Handling POST message
2025-08-02 13:47:25,462 - mcp.server.sse - DEBUG - Parsed session ID: 2d7c0adc-fcb2-47bf-80f6-d47e45a9c113
2025-08-02 13:47:25,463 - mcp.server.sse - DEBUG - Received JSON: b'{"jsonrpc":"2.0","method":"notifications/initialized"}'
2025-08-02 13:47:25,463 - mcp.server.sse - DEBUG - Validated client message: root=JSONRPCNotification(method='notifications/initialized', params=None, jsonrpc='2.0')
2025-08-02 13:47:25,463 - mcp.server.sse - DEBUG - Sending session message to writer: SessionMessage(message=JSONRPCMessage(root=JSONRPCNotification(method='notifications/initialized', params=None, jsonrpc='2.0')), metadata=ServerMessageMetadata(related_request_id=None, request_context=<starlette.requests.Request object at 0x10c889d00>))
2025-08-02 13:47:25,463 - mcp.server.lowlevel.server - DEBUG - Received message: root=InitializedNotification(method='notifications/initialized', params=None, jsonrpc='2.0')
2025-08-02 13:47:26,419 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 20:47:26.419431+00:00\r\n\r\n'
2025-08-02 13:47:27,957 - mcp.server.sse - DEBUG - Handling POST message
2025-08-02 13:47:27,957 - mcp.server.sse - DEBUG - Parsed session ID: 2d7c0adc-fcb2-47bf-80f6-d47e45a9c113
2025-08-02 13:47:27,957 - mcp.server.sse - DEBUG - Received JSON: b'{"jsonrpc":"2.0","id":1,"method":"tools/list","params":{"_meta":{"progressToken":1}}}'
2025-08-02 13:47:27,961 - mcp.server.sse - DEBUG - Validated client message: root=JSONRPCRequest(method='tools/list', params={'_meta': {'progressToken': 1}}, jsonrpc='2.0', id=1)
2025-08-02 13:47:27,961 - mcp.server.sse - DEBUG - Sending session message to writer: SessionMessage(message=JSONRPCMessage(root=JSONRPCRequest(method='tools/list', params={'_meta': {'progressToken': 1}}, jsonrpc='2.0', id=1)), metadata=ServerMessageMetadata(related_request_id=None, request_context=<starlette.requests.Request object at 0x10c889d90>))
2025-08-02 13:47:27,963 - mcp.server.lowlevel.server - DEBUG - Received message: <mcp.shared.session.RequestResponder object at 0x10c80b890>
2025-08-02 13:47:27,963 - mcp.server.lowlevel.server - INFO - Processing request of type ListToolsRequest
2025-08-02 13:47:27,963 - mcp.server.lowlevel.server - DEBUG - Dispatching request of type ListToolsRequest
2025-08-02 13:47:27,964 - mcp.server.lowlevel.server - DEBUG - Response sent
2025-08-02 13:47:27,965 - mcp.server.sse - DEBUG - Sending message via SSE: SessionMessage(message=JSONRPCMessage(root=JSONRPCResponse(jsonrpc='2.0', id=1, result={'tools': [{'name': 'submit_basic_calculation_workflow', 'description': 'Submit a basic calculation workflow using Rowan v2 API.\n\nPerforms fundamental quantum chemistry calculations with configurable methods\nand computational tasks. Returns a workflow object for tracking progress.\n', 'inputSchema': {'properties': {'initial_molecule': {'anyOf': [{'type': 'string'}, {'additionalProperties': True, 'type': 'object'}, {}], 'description': 'The molecule to perform the calculation on. Can be a SMILES string, dict, StJamesMolecule, or RdkitMol object', 'title': 'Initial Molecule'}, 'method': {'default': 'uma_m_omol', 'description': "The method to use for the calculation (e.g., 'uma_m_omol', 'gfn2-xtb', 'r2scan_3c')", 'title': 'Method', 'type': 'string'}, 'tasks': {'anyOf': [{'items': {'type': 'string'}, 'type': 'array'}, {'type': 'null'}], 'default': None, 'description': 'List of computational tasks to perform. Optional[List[str]], Defaults to None', 'title': 'Tasks'}, 'mode': {'default': 'auto', 'description': "The mode to run the calculation in ('auto', 'rapid', 'careful', 'meticulous')", 'title': 'Mode', 'type': 'string'}, 'engine': {'default': 'omol25', 'description': "The computational engine to use ('omol25', 'xtb', 'psi4')", 'title': 'Engine', 'type': 'string'}, 'name': {'default': 'Basic Calculation Workflow', 'description': 'The name of the workflow for identification', 'title': 'Name', 'type': 'string'}, 'folder_uuid': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'UUID of the folder to place the workflow in (optional)', 'title': 'Folder Uuid'}, 'max_credits': {'anyOf': [{'type': 'integer'}, {'type': 'null'}], 'default': None, 'description': 'Maximum number of credits to use for the workflow (optional)', 'title': 'Max Credits'}}, 'required': ['initial_molecule'], 'type': 'object'}}, {'name': 'submit_conformer_search_workflow', 'description': 'Submit a conformer search workflow using Rowan v2 API.\n\nExplores the conformational space of a molecule to find low-energy structures.\n\nArgs:\n    initial_molecule: SMILES string or molecule object\n    conf_gen_mode: default to "rapid"\n        Options: "rapid", "careful", "meticulous"\n    final_method: default: "aimnet2_wb97md3"\n        Try other options, if user specifies\n    solvent: Optional solvent for implicit solvation (e.g., "water", "ethanol")\n    transition_state: Whether searching for transition state conformers (default: False)\n    name: Workflow name for tracking\n    folder_uuid: Optional folder UUID for organization\n    max_credits: Optional credit limit for the calculation\n    \nReturns:\n    Workflow object representing the submitted workflow\n    \nExample:\n    # Basic conformer search\n    result = submit_conformer_search_workflow(\n        initial_molecule="CCCC",\n        conf_gen_mode="rapid"\n    )\n    \n    # Careful search with solvent\n    result = submit_conformer_search_workflow(\n        initial_molecule="CC(C)CC(=O)O",\n        conf_gen_mode="careful",\n        solvent="water",\n        final_method="r2scan_3c"\n    )\n', 'inputSchema': {'properties': {'initial_molecule': {'title': 'Initial Molecule', 'type': 'string'}, 'conf_gen_mode': {'default': 'rapid', 'title': 'Conf Gen Mode', 'type': 'string'}, 'final_method': {'default': 'aimnet2_wb97md3', 'title': 'Final Method', 'type': 'string'}, 'solvent': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Solvent'}, 'transition_state': {'default': False, 'title': 'Transition State', 'type': 'boolean'}, 'name': {'default': 'Conformer Search Workflow', 'title': 'Name', 'type': 'string'}, 'folder_uuid': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Folder Uuid'}, 'max_credits': {'anyOf': [{'type': 'integer'}, {'type': 'null'}], 'default': None, 'title': 'Max Credits'}}, 'required': ['initial_molecule'], 'type': 'object'}}, {'name': 'submit_solubility_workflow', 'description': 'Submit a solubility prediction workflow using Rowan v2 API.\n\nPredicts solubility (log S) of a molecule in multiple solvents at various temperatures\nusing machine learning models.\n\nArgs:\n    initial_smiles: SMILES string of the molecule\n    solvents: List of solvents as SMILES or common names (e.g., ["water", "ethanol"])\n        If None, uses default solvents\n    temperatures: List of temperatures in Kelvin\n        If None, uses default temperature range\n    name: Workflow name for tracking\n    folder_uuid: Optional folder UUID for organization\n    max_credits: Optional credit limit for the calculation\n    \nReturns:\n    Workflow object representing the submitted workflow\n    \nExample:\n    # Basic solubility prediction\n    result = submit_solubility_workflow(\n        initial_smiles="CC(=O)Nc1ccc(O)cc1",\n        solvents=["water", "ethanol"],\n        temperatures=[298.15, 310.15]\n    )\n    \n    # With SMILES solvents\n    result = submit_solubility_workflow(\n        initial_smiles="CC(=O)O",\n        solvents=["O", "CCO", "CCCCCC"],\n        temperatures=[273.15, 298.15, 323.15]\n    )\n', 'inputSchema': {'properties': {'initial_smiles': {'title': 'Initial Smiles', 'type': 'string'}, 'solvents': {'anyOf': [{'items': {'type': 'string'}, 'type': 'array'}, {'type': 'null'}], 'default': None, 'title': 'Solvents'}, 'temperatures': {'anyOf': [{'items': {'type': 'number'}, 'type': 'array'}, {'type': 'null'}], 'default': None, 'title': 'Temperatures'}, 'name': {'default': 'Solubility Workflow', 'title': 'Name', 'type': 'string'}, 'folder_uuid': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Folder Uuid'}, 'max_credits': {'anyOf': [{'type': 'integer'}, {'type': 'null'}], 'default': None, 'title': 'Max Credits'}}, 'required': ['initial_smiles'], 'type': 'object'}}, {'name': 'submit_pka_workflow', 'description': 'Submit a pKa prediction workflow using Rowan v2 API.\n\nPredicts acid dissociation constants (pKa) for ionizable groups in a molecule\nusing quantum chemistry calculations.\n\nArgs:\n    initial_molecule: SMILES string or molecule object\n    pka_range: Tuple of (min, max) pKa values to search (default: (2, 12))\n    deprotonate_elements: List of elements to consider for deprotonation\n        (e.g., ["N", "O", "S"]). If None, uses defaults\n    protonate_elements: List of elements to consider for protonation\n        (e.g., ["N", "O"]). If None, uses defaults\n    mode: Calculation mode (default: "careful")\n        Options: "rapid", "careful", "meticulous"\n    name: Workflow name for tracking\n    folder_uuid: Optional folder UUID for organization\n    max_credits: Optional credit limit for the calculation\n    \nReturns:\n    Workflow object representing the submitted workflow\n    \nExample:\n    # Basic pKa prediction\n    result = submit_pka_workflow(\n        initial_molecule="CC(=O)O",\n        pka_range=(2, 8)\n    )\n    \n    # Specific elements with meticulous mode\n    result = submit_pka_workflow(\n        initial_molecule="NC(C)C(=O)O",\n        pka_range=(1, 14),\n        deprotonate_elements=["N", "O"],\n        mode="meticulous"\n    )\n', 'inputSchema': {'properties': {'initial_molecule': {'title': 'Initial Molecule', 'type': 'string'}, 'pka_range': {'default': [2, 12], 'maxItems': 2, 'minItems': 2, 'prefixItems': [{'type': 'number'}, {'type': 'number'}], 'title': 'Pka Range', 'type': 'array'}, 'deprotonate_elements': {'anyOf': [{'items': {'type': 'string'}, 'type': 'array'}, {'type': 'null'}], 'default': None, 'title': 'Deprotonate Elements'}, 'protonate_elements': {'anyOf': [{'items': {'type': 'string'}, 'type': 'array'}, {'type': 'null'}], 'default': None, 'title': 'Protonate Elements'}, 'mode': {'default': 'careful', 'title': 'Mode', 'type': 'string'}, 'name': {'default': 'pKa Workflow', 'title': 'Name', 'type': 'string'}, 'folder_uuid': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Folder Uuid'}, 'max_credits': {'anyOf': [{'type': 'integer'}, {'type': 'null'}], 'default': None, 'title': 'Max Credits'}}, 'required': ['initial_molecule'], 'type': 'object'}}, {'name': 'submit_redox_potential_workflow', 'description': 'Submit a redox potential calculation workflow using Rowan v2 API.\n\nCalculates reduction and/or oxidation potentials for a molecule using\nquantum chemistry methods.\n\nArgs:\n    initial_molecule: SMILES string or molecule object\n    reduction: Whether to calculate reduction potential (default: False)\n    oxidization: Whether to calculate oxidation potential (default: True)\n    mode: Calculation mode (default: "rapid")\n        Options: "rapid", "careful", "meticulous"\n    name: Workflow name for tracking\n    folder_uuid: Optional folder UUID for organization\n    max_credits: Optional credit limit for the calculation\n    \nReturns:\n    Workflow object representing the submitted workflow\n    \nExample:\n    # Basic oxidation potential\n    result = submit_redox_potential_workflow(\n        initial_molecule="CC1=CC=CC=C1",\n        oxidization=True\n    )\n    \n    # Both reduction and oxidation with careful mode\n    result = submit_redox_potential_workflow(\n        initial_molecule="c1ccccc1",\n        reduction=True,\n        oxidization=True,\n        mode="careful"\n    )\n', 'inputSchema': {'properties': {'initial_molecule': {'title': 'Initial Molecule', 'type': 'string'}, 'reduction': {'default': False, 'title': 'Reduction', 'type': 'boolean'}, 'oxidization': {'default': True, 'title': 'Oxidization', 'type': 'boolean'}, 'mode': {'default': 'rapid', 'title': 'Mode', 'type': 'string'}, 'name': {'default': 'Redox Potential Workflow', 'title': 'Name', 'type': 'string'}, 'folder_uuid': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Folder Uuid'}, 'max_credits': {'anyOf': [{'type': 'integer'}, {'type': 'null'}], 'default': None, 'title': 'Max Credits'}}, 'required': ['initial_molecule'], 'type': 'object'}}, {'name': 'submit_fukui_workflow', 'description': 'Submit a Fukui indices calculation workflow using Rowan v2 API.\n\nCalculates Fukui indices to predict molecular reactivity at different sites.\nFukui indices indicate susceptibility to nucleophilic/electrophilic attack.\n\nArgs:\n    initial_molecule: SMILES string or molecule object\n    optimization_method: Method for geometry optimization (default: "gfn2_xtb")\n        Common options: "gfn2_xtb", "r2scan_3c", "aimnet2_wb97md3"\n    fukui_method: Method for Fukui calculation (default: "gfn1_xtb")\n        Common options: "gfn1_xtb", "gfn2_xtb"\n    solvent_settings: Optional solvent configuration dictionary\n        Example: {"solvent": "water", "model": "alpb"}\n    name: Workflow name for tracking\n    folder_uuid: Optional folder UUID for organization\n    max_credits: Optional credit limit for the calculation\n    \nReturns:\n    Workflow object representing the submitted workflow\n    \nExample:\n    # Basic Fukui indices\n    result = submit_fukui_workflow(\n        initial_molecule="CC(=O)O"\n    )\n    \n    # With solvent and advanced methods\n    result = submit_fukui_workflow(\n        initial_molecule="c1ccccc1N",\n        optimization_method="r2scan_3c",\n        fukui_method="gfn2_xtb",\n        solvent_settings={"solvent": "water", "model": "alpb"}\n    )\n', 'inputSchema': {'properties': {'initial_molecule': {'title': 'Initial Molecule', 'type': 'string'}, 'optimization_method': {'default': 'gfn2_xtb', 'title': 'Optimization Method', 'type': 'string'}, 'fukui_method': {'default': 'gfn1_xtb', 'title': 'Fukui Method', 'type': 'string'}, 'solvent_settings': {'anyOf': [{'additionalProperties': True, 'type': 'object'}, {'type': 'null'}], 'default': None, 'title': 'Solvent Settings'}, 'name': {'default': 'Fukui Workflow', 'title': 'Name', 'type': 'string'}, 'folder_uuid': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Folder Uuid'}, 'max_credits': {'anyOf': [{'type': 'integer'}, {'type': 'null'}], 'default': None, 'title': 'Max Credits'}}, 'required': ['initial_molecule'], 'type': 'object'}}, {'name': 'submit_tautomer_search_workflow', 'description': 'Submit a tautomer search workflow using Rowan v2 API.\n\nSearches for different tautomeric forms of a molecule and evaluates their\nrelative stabilities. Tautomers are structural isomers that readily interconvert.\n\nArgs:\n    initial_molecule: SMILES string or molecule object\n    mode: Search mode (default: "careful")\n        Options: "rapid", "careful", "meticulous"\n    name: Workflow name for tracking\n    folder_uuid: Optional folder UUID for organization\n    max_credits: Optional credit limit for the calculation\n    \nReturns:\n    Workflow object representing the submitted workflow\n    \nExample:\n    # Basic tautomer search\n    result = submit_tautomer_search_workflow(\n        initial_molecule="CC(=O)CC(=O)C"\n    )\n    \n    # Meticulous search for complex molecule\n    result = submit_tautomer_search_workflow(\n        initial_molecule="c1ccc2c(c1)ncc(=O)[nH]2",\n        mode="meticulous"\n    )\n', 'inputSchema': {'properties': {'initial_molecule': {'title': 'Initial Molecule', 'type': 'string'}, 'mode': {'default': 'careful', 'title': 'Mode', 'type': 'string'}, 'name': {'default': 'Tautomer Search Workflow', 'title': 'Name', 'type': 'string'}, 'folder_uuid': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Folder Uuid'}, 'max_credits': {'anyOf': [{'type': 'integer'}, {'type': 'null'}], 'default': None, 'title': 'Max Credits'}}, 'required': ['initial_molecule'], 'type': 'object'}}, {'name': 'submit_descriptors_workflow', 'description': 'Submit a molecular descriptors calculation workflow using Rowan v2 API.\n\nCalculates a comprehensive set of molecular descriptors including:\n- Physical properties (MW, logP, TPSA, etc.)\n- Electronic properties (HOMO/LUMO, dipole moment, etc.)\n- Structural features (rotatable bonds, H-bond donors/acceptors, etc.)\n- Topological indices\n\nArgs:\n    initial_molecule: SMILES string or molecule object\n    name: Workflow name for tracking\n    folder_uuid: Optional folder UUID for organization\n    max_credits: Optional credit limit for the calculation\n    \nReturns:\n    Workflow object representing the submitted workflow\n    \nExample:\n    # Basic descriptor calculation\n    result = submit_descriptors_workflow(\n        initial_molecule="CC(=O)Nc1ccc(O)cc1"\n    )\n    \n    # For complex molecule\n    result = submit_descriptors_workflow(\n        initial_molecule="CN1C=NC2=C1C(=O)N(C(=O)N2C)C",\n        name="Caffeine Descriptors"\n    )\n', 'inputSchema': {'properties': {'initial_molecule': {'title': 'Initial Molecule', 'type': 'string'}, 'name': {'default': 'Descriptors Workflow', 'title': 'Name', 'type': 'string'}, 'folder_uuid': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Folder Uuid'}, 'max_credits': {'anyOf': [{'type': 'integer'}, {'type': 'null'}], 'default': None, 'title': 'Max Credits'}}, 'required': ['initial_molecule'], 'type': 'object'}}, {'name': 'submit_scan_workflow', 'description': 'Submit a potential energy surface scan workflow using Rowan v2 API.\n\nPerforms systematic scans along specified molecular coordinates (bonds, angles,\nor dihedrals) to map the potential energy surface.\n\nArgs:\n    initial_molecule: SMILES string or molecule object\n    scan_settings: Dictionary specifying scan parameters\n        Example: {\n            "type": "dihedral",  # or "bond", "angle"\n            "atoms": [0, 1, 2, 3],  # atom indices\n            "start": -180,\n            "stop": 180,\n            "step": 10\n        }\n    calculation_engine: Computational engine (default: "omol25")\n        Options: "omol25", "xtb", "psi4"\n    calculation_method: Method for calculations (default: "uma_m_omol")\n        Options depend on engine\n    wavefront_propagation: Use wavefront optimization (default: True)\n        Speeds up scans by using previous geometries as starting points\n    name: Workflow name for tracking\n    folder_uuid: Optional folder UUID for organization\n    max_credits: Optional credit limit for the calculation\n    \nReturns:\n    Workflow object representing the submitted workflow\n    \nExample:\n    # Dihedral scan\n    result = submit_scan_workflow(\n        initial_molecule="CC(C)CC",\n        scan_settings={\n            "type": "dihedral",\n            "atoms": [0, 1, 2, 3],\n            "start": -180,\n            "stop": 180,\n            "step": 15\n        }\n    )\n    \n    # Bond scan with advanced method\n    result = submit_scan_workflow(\n        initial_molecule="CC",\n        scan_settings={\n            "type": "bond",\n            "atoms": [0, 1],\n            "start": 1.0,\n            "stop": 2.5,\n            "step": 0.1\n        },\n        calculation_method="r2scan_3c"\n    )\n', 'inputSchema': {'properties': {'initial_molecule': {'title': 'Initial Molecule', 'type': 'string'}, 'scan_settings': {'anyOf': [{'additionalProperties': True, 'type': 'object'}, {'type': 'null'}], 'default': None, 'title': 'Scan Settings'}, 'calculation_engine': {'default': 'omol25', 'title': 'Calculation Engine', 'type': 'string'}, 'calculation_method': {'default': 'uma_m_omol', 'title': 'Calculation Method', 'type': 'string'}, 'wavefront_propagation': {'default': True, 'title': 'Wavefront Propagation', 'type': 'boolean'}, 'name': {'default': 'Scan Workflow', 'title': 'Name', 'type': 'string'}, 'folder_uuid': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Folder Uuid'}, 'max_credits': {'anyOf': [{'type': 'integer'}, {'type': 'null'}], 'default': None, 'title': 'Max Credits'}}, 'required': ['initial_molecule'], 'type': 'object'}}, {'name': 'submit_irc_workflow', 'description': 'Submits an Intrinsic Reaction Coordinate (IRC) workflow to the API.\n\nArgs:\n    initial_molecule: The initial molecule to perform the IRC calculation on.\n        Can be a dict, StJamesMolecule, or RdkitMol object\n    method: The computational method to use for the IRC calculation (default: "uma_m_omol")\n        See list of available methods for options\n    engine: The computational engine to use for the calculation (default: "omol25")\n        See list of available engines\n    preopt: Whether to perform a pre-optimization of the molecule (default: True)\n    step_size: The step size to use for the IRC calculation (default: 0.05)\n    max_irc_steps: The maximum number of IRC steps to perform (default: 30)\n    name: The name of the workflow\n    folder_uuid: The UUID of the folder to place the workflow in\n    max_credits: The maximum number of credits to use for the workflow\n    \nReturns:\n    Workflow object representing the submitted IRC workflow\n    \nExample:\n    # Basic IRC calculation\n    result = submit_irc_workflow(\n        initial_molecule={"smiles": "[CH3].[CH3]"},\n        method="gfn2_xtb",\n        max_irc_steps=50\n    )\n    \n    # IRC with specific method and engine\n    result = submit_irc_workflow(\n        initial_molecule={"smiles": "CC(O)=CC"},\n        method="r2scan_3c",\n        engine="psi4",\n        step_size=0.03\n    )\n', 'inputSchema': {'properties': {'initial_molecule': {'anyOf': [{'additionalProperties': True, 'type': 'object'}, {}, {'type': 'null'}], 'default': None, 'title': 'Initial Molecule'}, 'method': {'default': 'uma_m_omol', 'title': 'Method', 'type': 'string'}, 'engine': {'default': 'omol25', 'title': 'Engine', 'type': 'string'}, 'preopt': {'default': True, 'title': 'Preopt', 'type': 'boolean'}, 'step_size': {'default': 0.05, 'title': 'Step Size', 'type': 'number'}, 'max_irc_steps': {'default': 30, 'title': 'Max Irc Steps', 'type': 'integer'}, 'name': {'default': 'IRC Workflow', 'title': 'Name', 'type': 'string'}, 'folder_uuid': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Folder Uuid'}, 'max_credits': {'anyOf': [{'type': 'integer'}, {'type': 'null'}], 'default': None, 'title': 'Max Credits'}}, 'type': 'object'}}, {'name': 'submit_protein_cofolding_workflow', 'description': 'Submits a protein cofolding workflow to the API.\n\nArgs:\n    initial_protein_sequences: The sequences of the proteins to be cofolded\n    initial_smiles_list: A list of SMILES strings for the ligands to be cofolded with\n    ligand_binding_affinity_index: The index of the ligand for which to compute the binding affinity\n    use_msa_server: Whether to use the MSA server for the computation\n    use_potentials: Whether to use potentials for the computation\n    name: The name of the workflow\n    model: The model to use for the computation\n    folder_uuid: The UUID of the folder to store the workflow in\n    max_credits: The maximum number of credits to use for the workflow\n    \nReturns:\n    Workflow object representing the submitted workflow\n    \nExample:\n    # Protein dimer cofolding\n    result = submit_protein_cofolding_workflow(\n        initial_protein_sequences=[\n            "MKTAYIAKQRQISFVKSHFSRQLEERLGLIEVQAPILSRVGDGTQDNLSGAEK",\n            "MKQHKAMIVALIVICITAVVAALVTRKDLCEVHIRTGQTEVAVF"\n        ]\n    )\n    \n    # Protein-ligand complex\n    result = submit_protein_cofolding_workflow(\n        initial_protein_sequences=["MGSSHHHHHHSSGLVPRGSH"],\n        initial_smiles_list=["CC(=O)O", "CCO"],\n        ligand_binding_affinity_index=0,\n        use_msa_server=True\n    )\n', 'inputSchema': {'properties': {'initial_protein_sequences': {'items': {'type': 'string'}, 'title': 'Initial Protein Sequences', 'type': 'array'}, 'initial_smiles_list': {'anyOf': [{'items': {'type': 'string'}, 'type': 'array'}, {'type': 'null'}], 'default': None, 'title': 'Initial Smiles List'}, 'ligand_binding_affinity_index': {'anyOf': [{'type': 'integer'}, {'type': 'null'}], 'default': None, 'title': 'Ligand Binding Affinity Index'}, 'use_msa_server': {'default': True, 'title': 'Use Msa Server', 'type': 'boolean'}, 'use_potentials': {'default': False, 'title': 'Use Potentials', 'type': 'boolean'}, 'name': {'default': 'Cofolding Workflow', 'title': 'Name', 'type': 'string'}, 'model': {'default': 'boltz_2', 'title': 'Model', 'type': 'string'}, 'folder_uuid': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Folder Uuid'}, 'max_credits': {'anyOf': [{'type': 'integer'}, {'type': 'null'}], 'default': None, 'title': 'Max Credits'}}, 'required': ['initial_protein_sequences'], 'type': 'object'}}, {'name': 'submit_docking_workflow', 'description': 'Submits a Docking workflow to the API.\n\nArgs:\n    protein: The protein to dock. Can be fed as a uuid or a Protein object\n    pocket: The pocket to dock into\n    initial_molecule: The initial molecule to be docked.\n        Can be a dict, StJamesMolecule, or RdkitMol object\n    do_csearch: Whether to perform a conformational search on the ligand\n    do_optimization: Whether to perform an optimization on the ligand\n    name: The name of the workflow\n    folder_uuid: The UUID of the folder to place the workflow in\n    max_credits: The maximum number of credits to use for the workflow\n    \nReturns:\n    Workflow object representing the submitted workflow\n    \nExample:\n    # Basic docking with protein UUID\n    result = submit_docking_workflow(\n        protein="protein-uuid-123",\n        pocket=pocket_obj,\n        initial_molecule={"smiles": "CC(=O)Oc1ccccc1C(=O)O"}\n    )\n    \n    # Docking with optimization disabled\n    result = submit_docking_workflow(\n        protein=protein_obj,\n        pocket=pocket_obj,\n        initial_molecule={"smiles": "CCO"},\n        do_csearch=False,\n        do_optimization=False\n    )\n', 'inputSchema': {'properties': {'protein': {'anyOf': [{'type': 'string'}, {}], 'title': 'Protein'}, 'pocket': {'title': 'Pocket'}, 'initial_molecule': {'anyOf': [{'additionalProperties': True, 'type': 'object'}, {}, {'type': 'null'}], 'default': None, 'title': 'Initial Molecule'}, 'do_csearch': {'default': True, 'title': 'Do Csearch', 'type': 'boolean'}, 'do_optimization': {'default': True, 'title': 'Do Optimization', 'type': 'boolean'}, 'name': {'default': 'Docking Workflow', 'title': 'Name', 'type': 'string'}, 'folder_uuid': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Folder Uuid'}, 'max_credits': {'anyOf': [{'type': 'integer'}, {'type': 'null'}], 'default': None, 'title': 'Max Credits'}}, 'required': ['protein', 'pocket'], 'type': 'object'}}, {'name': 'workflow_fetch_latest', 'description': 'Fetch the latest workflow data from the database.\n\nUpdates the workflow object with the most recent status and results.\n\nArgs:\n    workflow_uuid: The UUID of the workflow to fetch\n    in_place: Whether to update the workflow object in place (default: False)\n    \nReturns:\n    Dictionary containing the updated workflow data including status and results\n', 'inputSchema': {'properties': {'workflow_uuid': {'title': 'Workflow Uuid', 'type': 'string'}, 'in_place': {'default': False, 'title': 'In Place', 'type': 'boolean'}}, 'required': ['workflow_uuid'], 'type': 'object'}}, {'name': 'workflow_wait_for_result', 'description': 'Wait for a workflow to complete and return the result.\n\nBlocks until the workflow completes, polling at specified intervals.\n\nArgs:\n    workflow_uuid: The UUID of the workflow to wait for\n    poll_interval: Time in seconds between status checks (default: 5)\n    \nReturns:\n    Dictionary containing the completed workflow data including results\n', 'inputSchema': {'properties': {'workflow_uuid': {'title': 'Workflow Uuid', 'type': 'string'}, 'poll_interval': {'default': 5, 'title': 'Poll Interval', 'type': 'integer'}}, 'required': ['workflow_uuid'], 'type': 'object'}}, {'name': 'workflow_get_status', 'description': 'Get the current status of a workflow.\n\nArgs:\n    workflow_uuid: The UUID of the workflow\n    \nReturns:\n    Dictionary with status information\n', 'inputSchema': {'properties': {'workflow_uuid': {'title': 'Workflow Uuid', 'type': 'string'}}, 'required': ['workflow_uuid'], 'type': 'object'}}, {'name': 'workflow_stop', 'description': 'Stop a running workflow.\n\nArgs:\n    workflow_uuid: The UUID of the workflow to stop\n    \nReturns:\n    Dictionary with confirmation message\n', 'inputSchema': {'properties': {'workflow_uuid': {'title': 'Workflow Uuid', 'type': 'string'}}, 'required': ['workflow_uuid'], 'type': 'object'}}, {'name': 'workflow_delete', 'description': 'Delete a workflow.\n\nThis permanently removes the workflow and its results from the database.\n\nArgs:\n    workflow_uuid: The UUID of the workflow to delete\n    \nReturns:\n    Dictionary with confirmation message\n', 'inputSchema': {'properties': {'workflow_uuid': {'title': 'Workflow Uuid', 'type': 'string'}}, 'required': ['workflow_uuid'], 'type': 'object'}}, {'name': 'retrieve_workflow', 'description': 'Retrieve a workflow from the API.\n\nArgs:\n    uuid: The UUID of the workflow to retrieve\n    \nReturns:\n    Dictionary containing the complete workflow data\n    \nRaises:\n    HTTPError: If the API request fails\n', 'inputSchema': {'properties': {'uuid': {'title': 'Uuid', 'type': 'string'}}, 'required': ['uuid'], 'type': 'object'}}, {'name': 'retrieve_calculation_molecules', 'description': 'Retrieve a list of molecules from a calculation.\n\nArgs:\n    uuid: The UUID of the calculation to retrieve molecules from\n    \nReturns:\n    List of dictionaries representing the molecules in the calculation\n    \nRaises:\n    HTTPError: If the API request fails\n', 'inputSchema': {'properties': {'uuid': {'title': 'Uuid', 'type': 'string'}}, 'required': ['uuid'], 'type': 'object'}}, {'name': 'list_workflows', 'description': 'List workflows subject to the specified criteria.\n\nArgs:\n    parent_uuid: The UUID of the parent folder\n    name_contains: Substring to search for in workflow names\n    public: Filter workflows by their public status\n    starred: Filter workflows by their starred status\n    status: Filter workflows by their status\n    workflow_type: Filter workflows by their type\n    page: The page number to retrieve (default: 0)\n    size: The number of items per page (default: 10)\n    \nReturns:\n    List of workflow dictionaries that match the search criteria\n    \nRaises:\n    HTTPError: If the request to the API fails\n', 'inputSchema': {'properties': {'parent_uuid': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Parent Uuid'}, 'name_contains': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Name Contains'}, 'public': {'anyOf': [{'type': 'boolean'}, {'type': 'null'}], 'default': None, 'title': 'Public'}, 'starred': {'anyOf': [{'type': 'boolean'}, {'type': 'null'}], 'default': None, 'title': 'Starred'}, 'status': {'anyOf': [{'type': 'integer'}, {'type': 'null'}], 'default': None, 'title': 'Status'}, 'workflow_type': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Workflow Type'}, 'page': {'default': 0, 'title': 'Page', 'type': 'integer'}, 'size': {'default': 10, 'title': 'Size', 'type': 'integer'}}, 'type': 'object'}}, {'name': 'workflow_update', 'description': 'Update workflow details.\n\nArgs:\n    workflow_uuid: The UUID of the workflow to update\n    name: New name for the workflow (optional)\n    notes: New notes for the workflow (optional)\n    starred: Whether to star/unstar the workflow (optional)\n    public: Whether to make the workflow public/private (optional)\n    \nReturns:\n    Dictionary with updated workflow information\n', 'inputSchema': {'properties': {'workflow_uuid': {'title': 'Workflow Uuid', 'type': 'string'}, 'name': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Name'}, 'notes': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Notes'}, 'starred': {'anyOf': [{'type': 'boolean'}, {'type': 'null'}], 'default': None, 'title': 'Starred'}, 'public': {'anyOf': [{'type': 'boolean'}, {'type': 'null'}], 'default': None, 'title': 'Public'}}, 'required': ['workflow_uuid'], 'type': 'object'}}, {'name': 'workflow_is_finished', 'description': 'Check if a workflow is finished.\n\nArgs:\n    workflow_uuid: The UUID of the workflow to check\n    \nReturns:\n    Dictionary with workflow completion status\n', 'inputSchema': {'properties': {'workflow_uuid': {'title': 'Workflow Uuid', 'type': 'string'}}, 'required': ['workflow_uuid'], 'type': 'object'}}, {'name': 'workflow_delete_data', 'description': 'Delete workflow data while keeping the workflow record.\n\nArgs:\n    workflow_uuid: The UUID of the workflow\n    \nReturns:\n    Dictionary with confirmation message\n', 'inputSchema': {'properties': {'workflow_uuid': {'title': 'Workflow Uuid', 'type': 'string'}}, 'required': ['workflow_uuid'], 'type': 'object'}}]})), metadata=None)
2025-08-02 13:47:27,968 - sse_starlette.sse - DEBUG - chunk: b'event: message\r\ndata: {"jsonrpc":"2.0","id":1,"result":{"tools":[{"name":"submit_basic_calculation_workflow","description":"Submit a basic calculation workflow using Rowan v2 API.\\n\\nPerforms fundamental quantum chemistry calculations with configurable methods\\nand computational tasks. Returns a workflow object for tracking progress.\\n","inputSchema":{"properties":{"initial_molecule":{"anyOf":[{"type":"string"},{"additionalProperties":true,"type":"object"},{}],"description":"The molecule to perform the calculation on. Can be a SMILES string, dict, StJamesMolecule, or RdkitMol object","title":"Initial Molecule"},"method":{"default":"uma_m_omol","description":"The method to use for the calculation (e.g., \'uma_m_omol\', \'gfn2-xtb\', \'r2scan_3c\')","title":"Method","type":"string"},"tasks":{"anyOf":[{"items":{"type":"string"},"type":"array"},{"type":"null"}],"default":null,"description":"List of computational tasks to perform. Optional[List[str]], Defaults to None","title":"Tasks"},"mode":{"default":"auto","description":"The mode to run the calculation in (\'auto\', \'rapid\', \'careful\', \'meticulous\')","title":"Mode","type":"string"},"engine":{"default":"omol25","description":"The computational engine to use (\'omol25\', \'xtb\', \'psi4\')","title":"Engine","type":"string"},"name":{"default":"Basic Calculation Workflow","description":"The name of the workflow for identification","title":"Name","type":"string"},"folder_uuid":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"description":"UUID of the folder to place the workflow in (optional)","title":"Folder Uuid"},"max_credits":{"anyOf":[{"type":"integer"},{"type":"null"}],"default":null,"description":"Maximum number of credits to use for the workflow (optional)","title":"Max Credits"}},"required":["initial_molecule"],"type":"object"}},{"name":"submit_conformer_search_workflow","description":"Submit a conformer search workflow using Rowan v2 API.\\n\\nExplores the conformational space of a molecule to find low-energy structures.\\n\\nArgs:\\n    initial_molecule: SMILES string or molecule object\\n    conf_gen_mode: default to \\"rapid\\"\\n        Options: \\"rapid\\", \\"careful\\", \\"meticulous\\"\\n    final_method: default: \\"aimnet2_wb97md3\\"\\n        Try other options, if user specifies\\n    solvent: Optional solvent for implicit solvation (e.g., \\"water\\", \\"ethanol\\")\\n    transition_state: Whether searching for transition state conformers (default: False)\\n    name: Workflow name for tracking\\n    folder_uuid: Optional folder UUID for organization\\n    max_credits: Optional credit limit for the calculation\\n    \\nReturns:\\n    Workflow object representing the submitted workflow\\n    \\nExample:\\n    # Basic conformer search\\n    result = submit_conformer_search_workflow(\\n        initial_molecule=\\"CCCC\\",\\n        conf_gen_mode=\\"rapid\\"\\n    )\\n    \\n    # Careful search with solvent\\n    result = submit_conformer_search_workflow(\\n        initial_molecule=\\"CC(C)CC(=O)O\\",\\n        conf_gen_mode=\\"careful\\",\\n        solvent=\\"water\\",\\n        final_method=\\"r2scan_3c\\"\\n    )\\n","inputSchema":{"properties":{"initial_molecule":{"title":"Initial Molecule","type":"string"},"conf_gen_mode":{"default":"rapid","title":"Conf Gen Mode","type":"string"},"final_method":{"default":"aimnet2_wb97md3","title":"Final Method","type":"string"},"solvent":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"title":"Solvent"},"transition_state":{"default":false,"title":"Transition State","type":"boolean"},"name":{"default":"Conformer Search Workflow","title":"Name","type":"string"},"folder_uuid":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"title":"Folder Uuid"},"max_credits":{"anyOf":[{"type":"integer"},{"type":"null"}],"default":null,"title":"Max Credits"}},"required":["initial_molecule"],"type":"object"}},{"name":"submit_solubility_workflow","description":"Submit a solubility prediction workflow using Rowan v2 API.\\n\\nPredicts solubility (log S) of a molecule in multiple solvents at various temperatures\\nusing machine learning models.\\n\\nArgs:\\n    initial_smiles: SMILES string of the molecule\\n    solvents: List of solvents as SMILES or common names (e.g., [\\"water\\", \\"ethanol\\"])\\n        If None, uses default solvents\\n    temperatures: List of temperatures in Kelvin\\n        If None, uses default temperature range\\n    name: Workflow name for tracking\\n    folder_uuid: Optional folder UUID for organization\\n    max_credits: Optional credit limit for the calculation\\n    \\nReturns:\\n    Workflow object representing the submitted workflow\\n    \\nExample:\\n    # Basic solubility prediction\\n    result = submit_solubility_workflow(\\n        initial_smiles=\\"CC(=O)Nc1ccc(O)cc1\\",\\n        solvents=[\\"water\\", \\"ethanol\\"],\\n        temperatures=[298.15, 310.15]\\n    )\\n    \\n    # With SMILES solvents\\n    result = submit_solubility_workflow(\\n        initial_smiles=\\"CC(=O)O\\",\\n        solvents=[\\"O\\", \\"CCO\\", \\"CCCCCC\\"],\\n        temperatures=[273.15, 298.15, 323.15]\\n    )\\n","inputSchema":{"properties":{"initial_smiles":{"title":"Initial Smiles","type":"string"},"solvents":{"anyOf":[{"items":{"type":"string"},"type":"array"},{"type":"null"}],"default":null,"title":"Solvents"},"temperatures":{"anyOf":[{"items":{"type":"number"},"type":"array"},{"type":"null"}],"default":null,"title":"Temperatures"},"name":{"default":"Solubility Workflow","title":"Name","type":"string"},"folder_uuid":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"title":"Folder Uuid"},"max_credits":{"anyOf":[{"type":"integer"},{"type":"null"}],"default":null,"title":"Max Credits"}},"required":["initial_smiles"],"type":"object"}},{"name":"submit_pka_workflow","description":"Submit a pKa prediction workflow using Rowan v2 API.\\n\\nPredicts acid dissociation constants (pKa) for ionizable groups in a molecule\\nusing quantum chemistry calculations.\\n\\nArgs:\\n    initial_molecule: SMILES string or molecule object\\n    pka_range: Tuple of (min, max) pKa values to search (default: (2, 12))\\n    deprotonate_elements: List of elements to consider for deprotonation\\n        (e.g., [\\"N\\", \\"O\\", \\"S\\"]). If None, uses defaults\\n    protonate_elements: List of elements to consider for protonation\\n        (e.g., [\\"N\\", \\"O\\"]). If None, uses defaults\\n    mode: Calculation mode (default: \\"careful\\")\\n        Options: \\"rapid\\", \\"careful\\", \\"meticulous\\"\\n    name: Workflow name for tracking\\n    folder_uuid: Optional folder UUID for organization\\n    max_credits: Optional credit limit for the calculation\\n    \\nReturns:\\n    Workflow object representing the submitted workflow\\n    \\nExample:\\n    # Basic pKa prediction\\n    result = submit_pka_workflow(\\n        initial_molecule=\\"CC(=O)O\\",\\n        pka_range=(2, 8)\\n    )\\n    \\n    # Specific elements with meticulous mode\\n    result = submit_pka_workflow(\\n        initial_molecule=\\"NC(C)C(=O)O\\",\\n        pka_range=(1, 14),\\n        deprotonate_elements=[\\"N\\", \\"O\\"],\\n        mode=\\"meticulous\\"\\n    )\\n","inputSchema":{"properties":{"initial_molecule":{"title":"Initial Molecule","type":"string"},"pka_range":{"default":[2,12],"maxItems":2,"minItems":2,"prefixItems":[{"type":"number"},{"type":"number"}],"title":"Pka Range","type":"array"},"deprotonate_elements":{"anyOf":[{"items":{"type":"string"},"type":"array"},{"type":"null"}],"default":null,"title":"Deprotonate Elements"},"protonate_elements":{"anyOf":[{"items":{"type":"string"},"type":"array"},{"type":"null"}],"default":null,"title":"Protonate Elements"},"mode":{"default":"careful","title":"Mode","type":"string"},"name":{"default":"pKa Workflow","title":"Name","type":"string"},"folder_uuid":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"title":"Folder Uuid"},"max_credits":{"anyOf":[{"type":"integer"},{"type":"null"}],"default":null,"title":"Max Credits"}},"required":["initial_molecule"],"type":"object"}},{"name":"submit_redox_potential_workflow","description":"Submit a redox potential calculation workflow using Rowan v2 API.\\n\\nCalculates reduction and/or oxidation potentials for a molecule using\\nquantum chemistry methods.\\n\\nArgs:\\n    initial_molecule: SMILES string or molecule object\\n    reduction: Whether to calculate reduction potential (default: False)\\n    oxidization: Whether to calculate oxidation potential (default: True)\\n    mode: Calculation mode (default: \\"rapid\\")\\n        Options: \\"rapid\\", \\"careful\\", \\"meticulous\\"\\n    name: Workflow name for tracking\\n    folder_uuid: Optional folder UUID for organization\\n    max_credits: Optional credit limit for the calculation\\n    \\nReturns:\\n    Workflow object representing the submitted workflow\\n    \\nExample:\\n    # Basic oxidation potential\\n    result = submit_redox_potential_workflow(\\n        initial_molecule=\\"CC1=CC=CC=C1\\",\\n        oxidization=True\\n    )\\n    \\n    # Both reduction and oxidation with careful mode\\n    result = submit_redox_potential_workflow(\\n        initial_molecule=\\"c1ccccc1\\",\\n        reduction=True,\\n        oxidization=True,\\n        mode=\\"careful\\"\\n    )\\n","inputSchema":{"properties":{"initial_molecule":{"title":"Initial Molecule","type":"string"},"reduction":{"default":false,"title":"Reduction","type":"boolean"},"oxidization":{"default":true,"title":"Oxidization","type":"boolean"},"mode":{"default":"rapid","title":"Mode","type":"string"},"name":{"default":"Redox Potential Workflow","title":"Name","type":"string"},"folder_uuid":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"title":"Folder Uuid"},"max_credits":{"anyOf":[{"type":"integer"},{"type":"null"}],"default":null,"title":"Max Credits"}},"required":["initial_molecule"],"type":"object"}},{"name":"submit_fukui_workflow","description":"Submit a Fukui indices calculation workflow using Rowan v2 API.\\n\\nCalculates Fukui indices to predict molecular reactivity at different sites.\\nFukui indices indicate susceptibility to nucleophilic/electrophilic attack.\\n\\nArgs:\\n    initial_molecule: SMILES string or molecule object\\n    optimization_method: Method for geometry optimization (default: \\"gfn2_xtb\\")\\n        Common options: \\"gfn2_xtb\\", \\"r2scan_3c\\", \\"aimnet2_wb97md3\\"\\n    fukui_method: Method for Fukui calculation (default: \\"gfn1_xtb\\")\\n        Common options: \\"gfn1_xtb\\", \\"gfn2_xtb\\"\\n    solvent_settings: Optional solvent configuration dictionary\\n        Example: {\\"solvent\\": \\"water\\", \\"model\\": \\"alpb\\"}\\n    name: Workflow name for tracking\\n    folder_uuid: Optional folder UUID for organization\\n    max_credits: Optional credit limit for the calculation\\n    \\nReturns:\\n    Workflow object representing the submitted workflow\\n    \\nExample:\\n    # Basic Fukui indices\\n    result = submit_fukui_workflow(\\n        initial_molecule=\\"CC(=O)O\\"\\n    )\\n    \\n    # With solvent and advanced methods\\n    result = submit_fukui_workflow(\\n        initial_molecule=\\"c1ccccc1N\\",\\n        optimization_method=\\"r2scan_3c\\",\\n        fukui_method=\\"gfn2_xtb\\",\\n        solvent_settings={\\"solvent\\": \\"water\\", \\"model\\": \\"alpb\\"}\\n    )\\n","inputSchema":{"properties":{"initial_molecule":{"title":"Initial Molecule","type":"string"},"optimization_method":{"default":"gfn2_xtb","title":"Optimization Method","type":"string"},"fukui_method":{"default":"gfn1_xtb","title":"Fukui Method","type":"string"},"solvent_settings":{"anyOf":[{"additionalProperties":true,"type":"object"},{"type":"null"}],"default":null,"title":"Solvent Settings"},"name":{"default":"Fukui Workflow","title":"Name","type":"string"},"folder_uuid":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"title":"Folder Uuid"},"max_credits":{"anyOf":[{"type":"integer"},{"type":"null"}],"default":null,"title":"Max Credits"}},"required":["initial_molecule"],"type":"object"}},{"name":"submit_tautomer_search_workflow","description":"Submit a tautomer search workflow using Rowan v2 API.\\n\\nSearches for different tautomeric forms of a molecule and evaluates their\\nrelative stabilities. Tautomers are structural isomers that readily interconvert.\\n\\nArgs:\\n    initial_molecule: SMILES string or molecule object\\n    mode: Search mode (default: \\"careful\\")\\n        Options: \\"rapid\\", \\"careful\\", \\"meticulous\\"\\n    name: Workflow name for tracking\\n    folder_uuid: Optional folder UUID for organization\\n    max_credits: Optional credit limit for the calculation\\n    \\nReturns:\\n    Workflow object representing the submitted workflow\\n    \\nExample:\\n    # Basic tautomer search\\n    result = submit_tautomer_search_workflow(\\n        initial_molecule=\\"CC(=O)CC(=O)C\\"\\n    )\\n    \\n    # Meticulous search for complex molecule\\n    result = submit_tautomer_search_workflow(\\n        initial_molecule=\\"c1ccc2c(c1)ncc(=O)[nH]2\\",\\n        mode=\\"meticulous\\"\\n    )\\n","inputSchema":{"properties":{"initial_molecule":{"title":"Initial Molecule","type":"string"},"mode":{"default":"careful","title":"Mode","type":"string"},"name":{"default":"Tautomer Search Workflow","title":"Name","type":"string"},"folder_uuid":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"title":"Folder Uuid"},"max_credits":{"anyOf":[{"type":"integer"},{"type":"null"}],"default":null,"title":"Max Credits"}},"required":["initial_molecule"],"type":"object"}},{"name":"submit_descriptors_workflow","description":"Submit a molecular descriptors calculation workflow using Rowan v2 API.\\n\\nCalculates a comprehensive set of molecular descriptors including:\\n- Physical properties (MW, logP, TPSA, etc.)\\n- Electronic properties (HOMO/LUMO, dipole moment, etc.)\\n- Structural features (rotatable bonds, H-bond donors/acceptors, etc.)\\n- Topological indices\\n\\nArgs:\\n    initial_molecule: SMILES string or molecule object\\n    name: Workflow name for tracking\\n    folder_uuid: Optional folder UUID for organization\\n    max_credits: Optional credit limit for the calculation\\n    \\nReturns:\\n    Workflow object representing the submitted workflow\\n    \\nExample:\\n    # Basic descriptor calculation\\n    result = submit_descriptors_workflow(\\n        initial_molecule=\\"CC(=O)Nc1ccc(O)cc1\\"\\n    )\\n    \\n    # For complex molecule\\n    result = submit_descriptors_workflow(\\n        initial_molecule=\\"CN1C=NC2=C1C(=O)N(C(=O)N2C)C\\",\\n        name=\\"Caffeine Descriptors\\"\\n    )\\n","inputSchema":{"properties":{"initial_molecule":{"title":"Initial Molecule","type":"string"},"name":{"default":"Descriptors Workflow","title":"Name","type":"string"},"folder_uuid":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"title":"Folder Uuid"},"max_credits":{"anyOf":[{"type":"integer"},{"type":"null"}],"default":null,"title":"Max Credits"}},"required":["initial_molecule"],"type":"object"}},{"name":"submit_scan_workflow","description":"Submit a potential energy surface scan workflow using Rowan v2 API.\\n\\nPerforms systematic scans along specified molecular coordinates (bonds, angles,\\nor dihedrals) to map the potential energy surface.\\n\\nArgs:\\n    initial_molecule: SMILES string or molecule object\\n    scan_settings: Dictionary specifying scan parameters\\n        Example: {\\n            \\"type\\": \\"dihedral\\",  # or \\"bond\\", \\"angle\\"\\n            \\"atoms\\": [0, 1, 2, 3],  # atom indices\\n            \\"start\\": -180,\\n            \\"stop\\": 180,\\n            \\"step\\": 10\\n        }\\n    calculation_engine: Computational engine (default: \\"omol25\\")\\n        Options: \\"omol25\\", \\"xtb\\", \\"psi4\\"\\n    calculation_method: Method for calculations (default: \\"uma_m_omol\\")\\n        Options depend on engine\\n    wavefront_propagation: Use wavefront optimization (default: True)\\n        Speeds up scans by using previous geometries as starting points\\n    name: Workflow name for tracking\\n    folder_uuid: Optional folder UUID for organization\\n    max_credits: Optional credit limit for the calculation\\n    \\nReturns:\\n    Workflow object representing the submitted workflow\\n    \\nExample:\\n    # Dihedral scan\\n    result = submit_scan_workflow(\\n        initial_molecule=\\"CC(C)CC\\",\\n        scan_settings={\\n            \\"type\\": \\"dihedral\\",\\n            \\"atoms\\": [0, 1, 2, 3],\\n            \\"start\\": -180,\\n            \\"stop\\": 180,\\n            \\"step\\": 15\\n        }\\n    )\\n    \\n    # Bond scan with advanced method\\n    result = submit_scan_workflow(\\n        initial_molecule=\\"CC\\",\\n        scan_settings={\\n            \\"type\\": \\"bond\\",\\n            \\"atoms\\": [0, 1],\\n            \\"start\\": 1.0,\\n            \\"stop\\": 2.5,\\n            \\"step\\": 0.1\\n        },\\n        calculation_method=\\"r2scan_3c\\"\\n    )\\n","inputSchema":{"properties":{"initial_molecule":{"title":"Initial Molecule","type":"string"},"scan_settings":{"anyOf":[{"additionalProperties":true,"type":"object"},{"type":"null"}],"default":null,"title":"Scan Settings"},"calculation_engine":{"default":"omol25","title":"Calculation Engine","type":"string"},"calculation_method":{"default":"uma_m_omol","title":"Calculation Method","type":"string"},"wavefront_propagation":{"default":true,"title":"Wavefront Propagation","type":"boolean"},"name":{"default":"Scan Workflow","title":"Name","type":"string"},"folder_uuid":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"title":"Folder Uuid"},"max_credits":{"anyOf":[{"type":"integer"},{"type":"null"}],"default":null,"title":"Max Credits"}},"required":["initial_molecule"],"type":"object"}},{"name":"submit_irc_workflow","description":"Submits an Intrinsic Reaction Coordinate (IRC) workflow to the API.\\n\\nArgs:\\n    initial_molecule: The initial molecule to perform the IRC calculation on.\\n        Can be a dict, StJamesMolecule, or RdkitMol object\\n    method: The computational method to use for the IRC calculation (default: \\"uma_m_omol\\")\\n        See list of available methods for options\\n    engine: The computational engine to use for the calculation (default: \\"omol25\\")\\n        See list of available engines\\n    preopt: Whether to perform a pre-optimization of the molecule (default: True)\\n    step_size: The step size to use for the IRC calculation (default: 0.05)\\n    max_irc_steps: The maximum number of IRC steps to perform (default: 30)\\n    name: The name of the workflow\\n    folder_uuid: The UUID of the folder to place the workflow in\\n    max_credits: The maximum number of credits to use for the workflow\\n    \\nReturns:\\n    Workflow object representing the submitted IRC workflow\\n    \\nExample:\\n    # Basic IRC calculation\\n    result = submit_irc_workflow(\\n        initial_molecule={\\"smiles\\": \\"[CH3].[CH3]\\"},\\n        method=\\"gfn2_xtb\\",\\n        max_irc_steps=50\\n    )\\n    \\n    # IRC with specific method and engine\\n    result = submit_irc_workflow(\\n        initial_molecule={\\"smiles\\": \\"CC(O)=CC\\"},\\n        method=\\"r2scan_3c\\",\\n        engine=\\"psi4\\",\\n        step_size=0.03\\n    )\\n","inputSchema":{"properties":{"initial_molecule":{"anyOf":[{"additionalProperties":true,"type":"object"},{},{"type":"null"}],"default":null,"title":"Initial Molecule"},"method":{"default":"uma_m_omol","title":"Method","type":"string"},"engine":{"default":"omol25","title":"Engine","type":"string"},"preopt":{"default":true,"title":"Preopt","type":"boolean"},"step_size":{"default":0.05,"title":"Step Size","type":"number"},"max_irc_steps":{"default":30,"title":"Max Irc Steps","type":"integer"},"name":{"default":"IRC Workflow","title":"Name","type":"string"},"folder_uuid":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"title":"Folder Uuid"},"max_credits":{"anyOf":[{"type":"integer"},{"type":"null"}],"default":null,"title":"Max Credits"}},"type":"object"}},{"name":"submit_protein_cofolding_workflow","description":"Submits a protein cofolding workflow to the API.\\n\\nArgs:\\n    initial_protein_sequences: The sequences of the proteins to be cofolded\\n    initial_smiles_list: A list of SMILES strings for the ligands to be cofolded with\\n    ligand_binding_affinity_index: The index of the ligand for which to compute the binding affinity\\n    use_msa_server: Whether to use the MSA server for the computation\\n    use_potentials: Whether to use potentials for the computation\\n    name: The name of the workflow\\n    model: The model to use for the computation\\n    folder_uuid: The UUID of the folder to store the workflow in\\n    max_credits: The maximum number of credits to use for the workflow\\n    \\nReturns:\\n    Workflow object representing the submitted workflow\\n    \\nExample:\\n    # Protein dimer cofolding\\n    result = submit_protein_cofolding_workflow(\\n        initial_protein_sequences=[\\n            \\"MKTAYIAKQRQISFVKSHFSRQLEERLGLIEVQAPILSRVGDGTQDNLSGAEK\\",\\n            \\"MKQHKAMIVALIVICITAVVAALVTRKDLCEVHIRTGQTEVAVF\\"\\n        ]\\n    )\\n    \\n    # Protein-ligand complex\\n    result = submit_protein_cofolding_workflow(\\n        initial_protein_sequences=[\\"MGSSHHHHHHSSGLVPRGSH\\"],\\n        initial_smiles_list=[\\"CC(=O)O\\", \\"CCO\\"],\\n        ligand_binding_affinity_index=0,\\n        use_msa_server=True\\n    )\\n","inputSchema":{"properties":{"initial_protein_sequences":{"items":{"type":"string"},"title":"Initial Protein Sequences","type":"array"},"initial_smiles_list":{"anyOf":[{"items":{"type":"string"},"type":"array"},{"type":"null"}],"default":null,"title":"Initial Smiles List"},"ligand_binding_affinity_index":{"anyOf":[{"type":"integer"},{"type":"null"}],"default":null,"title":"Ligand Binding Affinity Index"},"use_msa_server":{"default":true,"title":"Use Msa Server","type":"boolean"},"use_potentials":{"default":false,"title":"Use Potentials","type":"boolean"},"name":{"default":"Cofolding Workflow","title":"Name","type":"string"},"model":{"default":"boltz_2","title":"Model","type":"string"},"folder_uuid":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"title":"Folder Uuid"},"max_credits":{"anyOf":[{"type":"integer"},{"type":"null"}],"default":null,"title":"Max Credits"}},"required":["initial_protein_sequences"],"type":"object"}},{"name":"submit_docking_workflow","description":"Submits a Docking workflow to the API.\\n\\nArgs:\\n    protein: The protein to dock. Can be fed as a uuid or a Protein object\\n    pocket: The pocket to dock into\\n    initial_molecule: The initial molecule to be docked.\\n        Can be a dict, StJamesMolecule, or RdkitMol object\\n    do_csearch: Whether to perform a conformational search on the ligand\\n    do_optimization: Whether to perform an optimization on the ligand\\n    name: The name of the workflow\\n    folder_uuid: The UUID of the folder to place the workflow in\\n    max_credits: The maximum number of credits to use for the workflow\\n    \\nReturns:\\n    Workflow object representing the submitted workflow\\n    \\nExample:\\n    # Basic docking with protein UUID\\n    result = submit_docking_workflow(\\n        protein=\\"protein-uuid-123\\",\\n        pocket=pocket_obj,\\n        initial_molecule={\\"smiles\\": \\"CC(=O)Oc1ccccc1C(=O)O\\"}\\n    )\\n    \\n    # Docking with optimization disabled\\n    result = submit_docking_workflow(\\n        protein=protein_obj,\\n        pocket=pocket_obj,\\n        initial_molecule={\\"smiles\\": \\"CCO\\"},\\n        do_csearch=False,\\n        do_optimization=False\\n    )\\n","inputSchema":{"properties":{"protein":{"anyOf":[{"type":"string"},{}],"title":"Protein"},"pocket":{"title":"Pocket"},"initial_molecule":{"anyOf":[{"additionalProperties":true,"type":"object"},{},{"type":"null"}],"default":null,"title":"Initial Molecule"},"do_csearch":{"default":true,"title":"Do Csearch","type":"boolean"},"do_optimization":{"default":true,"title":"Do Optimization","type":"boolean"},"name":{"default":"Docking Workflow","title":"Name","type":"string"},"folder_uuid":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"title":"Folder Uuid"},"max_credits":{"anyOf":[{"type":"integer"},{"type":"null"}],"default":null,"title":"Max Credits"}},"required":["protein","pocket"],"type":"object"}},{"name":"workflow_fetch_latest","description":"Fetch the latest workflow data from the database.\\n\\nUpdates the workflow object with the most recent status and results.\\n\\nArgs:\\n    workflow_uuid: The UUID of the workflow to fetch\\n    in_place: Whether to update the workflow object in place (default: False)\\n    \\nReturns:\\n    Dictionary containing the updated workflow data including status and results\\n","inputSchema":{"properties":{"workflow_uuid":{"title":"Workflow Uuid","type":"string"},"in_place":{"default":false,"title":"In Place","type":"boolean"}},"required":["workflow_uuid"],"type":"object"}},{"name":"workflow_wait_for_result","description":"Wait for a workflow to complete and return the result.\\n\\nBlocks until the workflow completes, polling at specified intervals.\\n\\nArgs:\\n    workflow_uuid: The UUID of the workflow to wait for\\n    poll_interval: Time in seconds between status checks (default: 5)\\n    \\nReturns:\\n    Dictionary containing the completed workflow data including results\\n","inputSchema":{"properties":{"workflow_uuid":{"title":"Workflow Uuid","type":"string"},"poll_interval":{"default":5,"title":"Poll Interval","type":"integer"}},"required":["workflow_uuid"],"type":"object"}},{"name":"workflow_get_status","description":"Get the current status of a workflow.\\n\\nArgs:\\n    workflow_uuid: The UUID of the workflow\\n    \\nReturns:\\n    Dictionary with status information\\n","inputSchema":{"properties":{"workflow_uuid":{"title":"Workflow Uuid","type":"string"}},"required":["workflow_uuid"],"type":"object"}},{"name":"workflow_stop","description":"Stop a running workflow.\\n\\nArgs:\\n    workflow_uuid: The UUID of the workflow to stop\\n    \\nReturns:\\n    Dictionary with confirmation message\\n","inputSchema":{"properties":{"workflow_uuid":{"title":"Workflow Uuid","type":"string"}},"required":["workflow_uuid"],"type":"object"}},{"name":"workflow_delete","description":"Delete a workflow.\\n\\nThis permanently removes the workflow and its results from the database.\\n\\nArgs:\\n    workflow_uuid: The UUID of the workflow to delete\\n    \\nReturns:\\n    Dictionary with confirmation message\\n","inputSchema":{"properties":{"workflow_uuid":{"title":"Workflow Uuid","type":"string"}},"required":["workflow_uuid"],"type":"object"}},{"name":"retrieve_workflow","description":"Retrieve a workflow from the API.\\n\\nArgs:\\n    uuid: The UUID of the workflow to retrieve\\n    \\nReturns:\\n    Dictionary containing the complete workflow data\\n    \\nRaises:\\n    HTTPError: If the API request fails\\n","inputSchema":{"properties":{"uuid":{"title":"Uuid","type":"string"}},"required":["uuid"],"type":"object"}},{"name":"retrieve_calculation_molecules","description":"Retrieve a list of molecules from a calculation.\\n\\nArgs:\\n    uuid: The UUID of the calculation to retrieve molecules from\\n    \\nReturns:\\n    List of dictionaries representing the molecules in the calculation\\n    \\nRaises:\\n    HTTPError: If the API request fails\\n","inputSchema":{"properties":{"uuid":{"title":"Uuid","type":"string"}},"required":["uuid"],"type":"object"}},{"name":"list_workflows","description":"List workflows subject to the specified criteria.\\n\\nArgs:\\n    parent_uuid: The UUID of the parent folder\\n    name_contains: Substring to search for in workflow names\\n    public: Filter workflows by their public status\\n    starred: Filter workflows by their starred status\\n    status: Filter workflows by their status\\n    workflow_type: Filter workflows by their type\\n    page: The page number to retrieve (default: 0)\\n    size: The number of items per page (default: 10)\\n    \\nReturns:\\n    List of workflow dictionaries that match the search criteria\\n    \\nRaises:\\n    HTTPError: If the request to the API fails\\n","inputSchema":{"properties":{"parent_uuid":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"title":"Parent Uuid"},"name_contains":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"title":"Name Contains"},"public":{"anyOf":[{"type":"boolean"},{"type":"null"}],"default":null,"title":"Public"},"starred":{"anyOf":[{"type":"boolean"},{"type":"null"}],"default":null,"title":"Starred"},"status":{"anyOf":[{"type":"integer"},{"type":"null"}],"default":null,"title":"Status"},"workflow_type":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"title":"Workflow Type"},"page":{"default":0,"title":"Page","type":"integer"},"size":{"default":10,"title":"Size","type":"integer"}},"type":"object"}},{"name":"workflow_update","description":"Update workflow details.\\n\\nArgs:\\n    workflow_uuid: The UUID of the workflow to update\\n    name: New name for the workflow (optional)\\n    notes: New notes for the workflow (optional)\\n    starred: Whether to star/unstar the workflow (optional)\\n    public: Whether to make the workflow public/private (optional)\\n    \\nReturns:\\n    Dictionary with updated workflow information\\n","inputSchema":{"properties":{"workflow_uuid":{"title":"Workflow Uuid","type":"string"},"name":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"title":"Name"},"notes":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"title":"Notes"},"starred":{"anyOf":[{"type":"boolean"},{"type":"null"}],"default":null,"title":"Starred"},"public":{"anyOf":[{"type":"boolean"},{"type":"null"}],"default":null,"title":"Public"}},"required":["workflow_uuid"],"type":"object"}},{"name":"workflow_is_finished","description":"Check if a workflow is finished.\\n\\nArgs:\\n    workflow_uuid: The UUID of the workflow to check\\n    \\nReturns:\\n    Dictionary with workflow completion status\\n","inputSchema":{"properties":{"workflow_uuid":{"title":"Workflow Uuid","type":"string"}},"required":["workflow_uuid"],"type":"object"}},{"name":"workflow_delete_data","description":"Delete workflow data while keeping the workflow record.\\n\\nArgs:\\n    workflow_uuid: The UUID of the workflow\\n    \\nReturns:\\n    Dictionary with confirmation message\\n","inputSchema":{"properties":{"workflow_uuid":{"title":"Workflow Uuid","type":"string"}},"required":["workflow_uuid"],"type":"object"}}]}}\r\n\r\n'
2025-08-02 13:47:29,524 - sse_starlette.sse - DEBUG - Got event: http.disconnect. Stop streaming.
2025-08-02 13:47:29,524 - root - DEBUG - Client session disconnected 2d7c0adc-fcb2-47bf-80f6-d47e45a9c113
2025-08-02 13:47:39,713 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 20:47:39.713729+00:00\r\n\r\n'
2025-08-02 13:47:41,420 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 20:47:41.420566+00:00\r\n\r\n'
2025-08-02 13:47:54,716 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 20:47:54.716468+00:00\r\n\r\n'
2025-08-02 13:47:56,424 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 20:47:56.424270+00:00\r\n\r\n'
2025-08-02 13:48:09,719 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 20:48:09.719146+00:00\r\n\r\n'
2025-08-02 13:48:11,427 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 20:48:11.427093+00:00\r\n\r\n'
2025-08-02 13:48:24,722 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 20:48:24.722821+00:00\r\n\r\n'
2025-08-02 13:48:26,430 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 20:48:26.430073+00:00\r\n\r\n'
2025-08-02 13:48:39,725 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 20:48:39.725019+00:00\r\n\r\n'
2025-08-02 13:48:41,436 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 20:48:41.436318+00:00\r\n\r\n'
2025-08-02 13:48:54,730 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 20:48:54.730292+00:00\r\n\r\n'
2025-08-02 13:48:56,442 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 20:48:56.442174+00:00\r\n\r\n'
2025-08-02 13:49:09,734 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 20:49:09.733823+00:00\r\n\r\n'
2025-08-02 13:49:11,444 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 20:49:11.444709+00:00\r\n\r\n'
2025-08-02 13:49:24,736 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 20:49:24.736752+00:00\r\n\r\n'
2025-08-02 13:49:26,449 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 20:49:26.449285+00:00\r\n\r\n'
2025-08-02 13:49:39,431 - mcp.server.sse - DEBUG - Setting up SSE connection
2025-08-02 13:49:39,431 - mcp.server.sse - DEBUG - Created new session with ID: be66ed27-7514-4125-b934-c2b1e6363ef2
2025-08-02 13:49:39,432 - mcp.server.sse - DEBUG - Starting SSE response task
2025-08-02 13:49:39,432 - mcp.server.sse - DEBUG - Yielding read and write streams
2025-08-02 13:49:39,434 - mcp.server.sse - DEBUG - Starting SSE writer
2025-08-02 13:49:39,435 - mcp.server.sse - DEBUG - Sent endpoint event: /messages/?session_id=be66ed2775144125b934c2b1e6363ef2
2025-08-02 13:49:39,435 - sse_starlette.sse - DEBUG - chunk: b'event: endpoint\r\ndata: /messages/?session_id=be66ed2775144125b934c2b1e6363ef2\r\n\r\n'
2025-08-02 13:49:39,457 - mcp.server.sse - DEBUG - Handling POST message
2025-08-02 13:49:39,457 - mcp.server.sse - DEBUG - Parsed session ID: be66ed27-7514-4125-b934-c2b1e6363ef2
2025-08-02 13:49:39,457 - mcp.server.sse - DEBUG - Received JSON: b'{"jsonrpc":"2.0","id":0,"method":"initialize","params":{"protocolVersion":"2025-06-18","capabilities":{"sampling":{},"elicitation":{},"roots":{"listChanged":true}},"clientInfo":{"name":"mcp-inspector","version":"0.16.2"}}}'
2025-08-02 13:49:39,457 - mcp.server.sse - DEBUG - Validated client message: root=JSONRPCRequest(method='initialize', params={'protocolVersion': '2025-06-18', 'capabilities': {'sampling': {}, 'elicitation': {}, 'roots': {'listChanged': True}}, 'clientInfo': {'name': 'mcp-inspector', 'version': '0.16.2'}}, jsonrpc='2.0', id=0)
2025-08-02 13:49:39,457 - mcp.server.sse - DEBUG - Sending session message to writer: SessionMessage(message=JSONRPCMessage(root=JSONRPCRequest(method='initialize', params={'protocolVersion': '2025-06-18', 'capabilities': {'sampling': {}, 'elicitation': {}, 'roots': {'listChanged': True}}, 'clientInfo': {'name': 'mcp-inspector', 'version': '0.16.2'}}, jsonrpc='2.0', id=0)), metadata=ServerMessageMetadata(related_request_id=None, request_context=<starlette.requests.Request object at 0x10c889eb0>))
2025-08-02 13:49:39,458 - mcp.server.sse - DEBUG - Sending message via SSE: SessionMessage(message=JSONRPCMessage(root=JSONRPCResponse(jsonrpc='2.0', id=0, result={'protocolVersion': '2025-03-26', 'capabilities': {'experimental': {}, 'prompts': {'listChanged': False}, 'resources': {'subscribe': False, 'listChanged': False}, 'tools': {'listChanged': False}}, 'serverInfo': {'name': 'Rowan MCP Server', 'version': '1.9.3'}})), metadata=None)
2025-08-02 13:49:39,458 - sse_starlette.sse - DEBUG - chunk: b'event: message\r\ndata: {"jsonrpc":"2.0","id":0,"result":{"protocolVersion":"2025-03-26","capabilities":{"experimental":{},"prompts":{"listChanged":false},"resources":{"subscribe":false,"listChanged":false},"tools":{"listChanged":false}},"serverInfo":{"name":"Rowan MCP Server","version":"1.9.3"}}}\r\n\r\n'
2025-08-02 13:49:39,468 - mcp.server.sse - DEBUG - Handling POST message
2025-08-02 13:49:39,468 - mcp.server.sse - DEBUG - Parsed session ID: be66ed27-7514-4125-b934-c2b1e6363ef2
2025-08-02 13:49:39,468 - mcp.server.sse - DEBUG - Received JSON: b'{"jsonrpc":"2.0","method":"notifications/initialized"}'
2025-08-02 13:49:39,468 - mcp.server.sse - DEBUG - Validated client message: root=JSONRPCNotification(method='notifications/initialized', params=None, jsonrpc='2.0')
2025-08-02 13:49:39,468 - mcp.server.sse - DEBUG - Sending session message to writer: SessionMessage(message=JSONRPCMessage(root=JSONRPCNotification(method='notifications/initialized', params=None, jsonrpc='2.0')), metadata=ServerMessageMetadata(related_request_id=None, request_context=<starlette.requests.Request object at 0x10c889f40>))
2025-08-02 13:49:39,468 - mcp.server.lowlevel.server - DEBUG - Received message: root=InitializedNotification(method='notifications/initialized', params=None, jsonrpc='2.0')
2025-08-02 13:49:39,740 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 20:49:39.740362+00:00\r\n\r\n'
2025-08-02 13:49:41,452 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 20:49:41.452113+00:00\r\n\r\n'
2025-08-02 13:49:41,841 - mcp.server.sse - DEBUG - Handling POST message
2025-08-02 13:49:41,842 - mcp.server.sse - DEBUG - Parsed session ID: be66ed27-7514-4125-b934-c2b1e6363ef2
2025-08-02 13:49:41,842 - mcp.server.sse - DEBUG - Received JSON: b'{"jsonrpc":"2.0","id":1,"method":"tools/list","params":{"_meta":{"progressToken":1}}}'
2025-08-02 13:49:41,842 - mcp.server.sse - DEBUG - Validated client message: root=JSONRPCRequest(method='tools/list', params={'_meta': {'progressToken': 1}}, jsonrpc='2.0', id=1)
2025-08-02 13:49:41,842 - mcp.server.sse - DEBUG - Sending session message to writer: SessionMessage(message=JSONRPCMessage(root=JSONRPCRequest(method='tools/list', params={'_meta': {'progressToken': 1}}, jsonrpc='2.0', id=1)), metadata=ServerMessageMetadata(related_request_id=None, request_context=<starlette.requests.Request object at 0x10c889fd0>))
2025-08-02 13:49:41,843 - mcp.server.lowlevel.server - DEBUG - Received message: <mcp.shared.session.RequestResponder object at 0x10c846140>
2025-08-02 13:49:41,844 - mcp.server.lowlevel.server - INFO - Processing request of type ListToolsRequest
2025-08-02 13:49:41,844 - mcp.server.lowlevel.server - DEBUG - Dispatching request of type ListToolsRequest
2025-08-02 13:49:41,844 - mcp.server.lowlevel.server - DEBUG - Response sent
2025-08-02 13:49:41,845 - mcp.server.sse - DEBUG - Sending message via SSE: SessionMessage(message=JSONRPCMessage(root=JSONRPCResponse(jsonrpc='2.0', id=1, result={'tools': [{'name': 'submit_basic_calculation_workflow', 'description': 'Submit a basic calculation workflow using Rowan v2 API.\n\nPerforms fundamental quantum chemistry calculations with configurable methods\nand computational tasks. Returns a workflow object for tracking progress.\n', 'inputSchema': {'properties': {'initial_molecule': {'anyOf': [{'type': 'string'}, {'additionalProperties': True, 'type': 'object'}, {}], 'description': 'The molecule to perform the calculation on. Can be a SMILES string, dict, StJamesMolecule, or RdkitMol object', 'title': 'Initial Molecule'}, 'method': {'default': 'uma_m_omol', 'description': "The method to use for the calculation (e.g., 'uma_m_omol', 'gfn2-xtb', 'r2scan_3c')", 'title': 'Method', 'type': 'string'}, 'tasks': {'anyOf': [{'items': {'type': 'string'}, 'type': 'array'}, {'type': 'null'}], 'default': None, 'description': 'List of computational tasks to perform. Optional[List[str]], Defaults to None', 'title': 'Tasks'}, 'mode': {'default': 'auto', 'description': "The mode to run the calculation in ('auto', 'rapid', 'careful', 'meticulous')", 'title': 'Mode', 'type': 'string'}, 'engine': {'default': 'omol25', 'description': "The computational engine to use ('omol25', 'xtb', 'psi4')", 'title': 'Engine', 'type': 'string'}, 'name': {'default': 'Basic Calculation Workflow', 'description': 'The name of the workflow for identification', 'title': 'Name', 'type': 'string'}, 'folder_uuid': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'UUID of the folder to place the workflow in (optional)', 'title': 'Folder Uuid'}, 'max_credits': {'anyOf': [{'type': 'integer'}, {'type': 'null'}], 'default': None, 'description': 'Maximum number of credits to use for the workflow (optional)', 'title': 'Max Credits'}}, 'required': ['initial_molecule'], 'type': 'object'}}, {'name': 'submit_conformer_search_workflow', 'description': 'Submit a conformer search workflow using Rowan v2 API.\n\nExplores the conformational space of a molecule to find low-energy structures.\n\nArgs:\n    initial_molecule: SMILES string or molecule object\n    conf_gen_mode: default to "rapid"\n        Options: "rapid", "careful", "meticulous"\n    final_method: default: "aimnet2_wb97md3"\n        Try other options, if user specifies\n    solvent: Optional solvent for implicit solvation (e.g., "water", "ethanol")\n    transition_state: Whether searching for transition state conformers (default: False)\n    name: Workflow name for tracking\n    folder_uuid: Optional folder UUID for organization\n    max_credits: Optional credit limit for the calculation\n    \nReturns:\n    Workflow object representing the submitted workflow\n    \nExample:\n    # Basic conformer search\n    result = submit_conformer_search_workflow(\n        initial_molecule="CCCC",\n        conf_gen_mode="rapid"\n    )\n    \n    # Careful search with solvent\n    result = submit_conformer_search_workflow(\n        initial_molecule="CC(C)CC(=O)O",\n        conf_gen_mode="careful",\n        solvent="water",\n        final_method="r2scan_3c"\n    )\n', 'inputSchema': {'properties': {'initial_molecule': {'title': 'Initial Molecule', 'type': 'string'}, 'conf_gen_mode': {'default': 'rapid', 'title': 'Conf Gen Mode', 'type': 'string'}, 'final_method': {'default': 'aimnet2_wb97md3', 'title': 'Final Method', 'type': 'string'}, 'solvent': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Solvent'}, 'transition_state': {'default': False, 'title': 'Transition State', 'type': 'boolean'}, 'name': {'default': 'Conformer Search Workflow', 'title': 'Name', 'type': 'string'}, 'folder_uuid': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Folder Uuid'}, 'max_credits': {'anyOf': [{'type': 'integer'}, {'type': 'null'}], 'default': None, 'title': 'Max Credits'}}, 'required': ['initial_molecule'], 'type': 'object'}}, {'name': 'submit_solubility_workflow', 'description': 'Submit a solubility prediction workflow using Rowan v2 API.\n\nPredicts solubility (log S) of a molecule in multiple solvents at various temperatures\nusing machine learning models.\n\nArgs:\n    initial_smiles: SMILES string of the molecule\n    solvents: List of solvents as SMILES or common names (e.g., ["water", "ethanol"])\n        If None, uses default solvents\n    temperatures: List of temperatures in Kelvin\n        If None, uses default temperature range\n    name: Workflow name for tracking\n    folder_uuid: Optional folder UUID for organization\n    max_credits: Optional credit limit for the calculation\n    \nReturns:\n    Workflow object representing the submitted workflow\n    \nExample:\n    # Basic solubility prediction\n    result = submit_solubility_workflow(\n        initial_smiles="CC(=O)Nc1ccc(O)cc1",\n        solvents=["water", "ethanol"],\n        temperatures=[298.15, 310.15]\n    )\n    \n    # With SMILES solvents\n    result = submit_solubility_workflow(\n        initial_smiles="CC(=O)O",\n        solvents=["O", "CCO", "CCCCCC"],\n        temperatures=[273.15, 298.15, 323.15]\n    )\n', 'inputSchema': {'properties': {'initial_smiles': {'title': 'Initial Smiles', 'type': 'string'}, 'solvents': {'anyOf': [{'items': {'type': 'string'}, 'type': 'array'}, {'type': 'null'}], 'default': None, 'title': 'Solvents'}, 'temperatures': {'anyOf': [{'items': {'type': 'number'}, 'type': 'array'}, {'type': 'null'}], 'default': None, 'title': 'Temperatures'}, 'name': {'default': 'Solubility Workflow', 'title': 'Name', 'type': 'string'}, 'folder_uuid': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Folder Uuid'}, 'max_credits': {'anyOf': [{'type': 'integer'}, {'type': 'null'}], 'default': None, 'title': 'Max Credits'}}, 'required': ['initial_smiles'], 'type': 'object'}}, {'name': 'submit_pka_workflow', 'description': 'Submit a pKa prediction workflow using Rowan v2 API.\n\nPredicts acid dissociation constants (pKa) for ionizable groups in a molecule\nusing quantum chemistry calculations.\n\nArgs:\n    initial_molecule: SMILES string or molecule object\n    pka_range: Tuple of (min, max) pKa values to search (default: (2, 12))\n    deprotonate_elements: List of elements to consider for deprotonation\n        (e.g., ["N", "O", "S"]). If None, uses defaults\n    protonate_elements: List of elements to consider for protonation\n        (e.g., ["N", "O"]). If None, uses defaults\n    mode: Calculation mode (default: "careful")\n        Options: "rapid", "careful", "meticulous"\n    name: Workflow name for tracking\n    folder_uuid: Optional folder UUID for organization\n    max_credits: Optional credit limit for the calculation\n    \nReturns:\n    Workflow object representing the submitted workflow\n    \nExample:\n    # Basic pKa prediction\n    result = submit_pka_workflow(\n        initial_molecule="CC(=O)O",\n        pka_range=(2, 8)\n    )\n    \n    # Specific elements with meticulous mode\n    result = submit_pka_workflow(\n        initial_molecule="NC(C)C(=O)O",\n        pka_range=(1, 14),\n        deprotonate_elements=["N", "O"],\n        mode="meticulous"\n    )\n', 'inputSchema': {'properties': {'initial_molecule': {'title': 'Initial Molecule', 'type': 'string'}, 'pka_range': {'default': [2, 12], 'maxItems': 2, 'minItems': 2, 'prefixItems': [{'type': 'number'}, {'type': 'number'}], 'title': 'Pka Range', 'type': 'array'}, 'deprotonate_elements': {'anyOf': [{'items': {'type': 'string'}, 'type': 'array'}, {'type': 'null'}], 'default': None, 'title': 'Deprotonate Elements'}, 'protonate_elements': {'anyOf': [{'items': {'type': 'string'}, 'type': 'array'}, {'type': 'null'}], 'default': None, 'title': 'Protonate Elements'}, 'mode': {'default': 'careful', 'title': 'Mode', 'type': 'string'}, 'name': {'default': 'pKa Workflow', 'title': 'Name', 'type': 'string'}, 'folder_uuid': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Folder Uuid'}, 'max_credits': {'anyOf': [{'type': 'integer'}, {'type': 'null'}], 'default': None, 'title': 'Max Credits'}}, 'required': ['initial_molecule'], 'type': 'object'}}, {'name': 'submit_redox_potential_workflow', 'description': 'Submit a redox potential calculation workflow using Rowan v2 API.\n\nCalculates reduction and/or oxidation potentials for a molecule using\nquantum chemistry methods.\n\nArgs:\n    initial_molecule: SMILES string or molecule object\n    reduction: Whether to calculate reduction potential (default: False)\n    oxidization: Whether to calculate oxidation potential (default: True)\n    mode: Calculation mode (default: "rapid")\n        Options: "rapid", "careful", "meticulous"\n    name: Workflow name for tracking\n    folder_uuid: Optional folder UUID for organization\n    max_credits: Optional credit limit for the calculation\n    \nReturns:\n    Workflow object representing the submitted workflow\n    \nExample:\n    # Basic oxidation potential\n    result = submit_redox_potential_workflow(\n        initial_molecule="CC1=CC=CC=C1",\n        oxidization=True\n    )\n    \n    # Both reduction and oxidation with careful mode\n    result = submit_redox_potential_workflow(\n        initial_molecule="c1ccccc1",\n        reduction=True,\n        oxidization=True,\n        mode="careful"\n    )\n', 'inputSchema': {'properties': {'initial_molecule': {'title': 'Initial Molecule', 'type': 'string'}, 'reduction': {'default': False, 'title': 'Reduction', 'type': 'boolean'}, 'oxidization': {'default': True, 'title': 'Oxidization', 'type': 'boolean'}, 'mode': {'default': 'rapid', 'title': 'Mode', 'type': 'string'}, 'name': {'default': 'Redox Potential Workflow', 'title': 'Name', 'type': 'string'}, 'folder_uuid': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Folder Uuid'}, 'max_credits': {'anyOf': [{'type': 'integer'}, {'type': 'null'}], 'default': None, 'title': 'Max Credits'}}, 'required': ['initial_molecule'], 'type': 'object'}}, {'name': 'submit_fukui_workflow', 'description': 'Submit a Fukui indices calculation workflow using Rowan v2 API.\n\nCalculates Fukui indices to predict molecular reactivity at different sites.\nFukui indices indicate susceptibility to nucleophilic/electrophilic attack.\n\nArgs:\n    initial_molecule: SMILES string or molecule object\n    optimization_method: Method for geometry optimization (default: "gfn2_xtb")\n        Common options: "gfn2_xtb", "r2scan_3c", "aimnet2_wb97md3"\n    fukui_method: Method for Fukui calculation (default: "gfn1_xtb")\n        Common options: "gfn1_xtb", "gfn2_xtb"\n    solvent_settings: Optional solvent configuration dictionary\n        Example: {"solvent": "water", "model": "alpb"}\n    name: Workflow name for tracking\n    folder_uuid: Optional folder UUID for organization\n    max_credits: Optional credit limit for the calculation\n    \nReturns:\n    Workflow object representing the submitted workflow\n    \nExample:\n    # Basic Fukui indices\n    result = submit_fukui_workflow(\n        initial_molecule="CC(=O)O"\n    )\n    \n    # With solvent and advanced methods\n    result = submit_fukui_workflow(\n        initial_molecule="c1ccccc1N",\n        optimization_method="r2scan_3c",\n        fukui_method="gfn2_xtb",\n        solvent_settings={"solvent": "water", "model": "alpb"}\n    )\n', 'inputSchema': {'properties': {'initial_molecule': {'title': 'Initial Molecule', 'type': 'string'}, 'optimization_method': {'default': 'gfn2_xtb', 'title': 'Optimization Method', 'type': 'string'}, 'fukui_method': {'default': 'gfn1_xtb', 'title': 'Fukui Method', 'type': 'string'}, 'solvent_settings': {'anyOf': [{'additionalProperties': True, 'type': 'object'}, {'type': 'null'}], 'default': None, 'title': 'Solvent Settings'}, 'name': {'default': 'Fukui Workflow', 'title': 'Name', 'type': 'string'}, 'folder_uuid': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Folder Uuid'}, 'max_credits': {'anyOf': [{'type': 'integer'}, {'type': 'null'}], 'default': None, 'title': 'Max Credits'}}, 'required': ['initial_molecule'], 'type': 'object'}}, {'name': 'submit_tautomer_search_workflow', 'description': 'Submit a tautomer search workflow using Rowan v2 API.\n\nSearches for different tautomeric forms of a molecule and evaluates their\nrelative stabilities. Tautomers are structural isomers that readily interconvert.\n\nArgs:\n    initial_molecule: SMILES string or molecule object\n    mode: Search mode (default: "careful")\n        Options: "rapid", "careful", "meticulous"\n    name: Workflow name for tracking\n    folder_uuid: Optional folder UUID for organization\n    max_credits: Optional credit limit for the calculation\n    \nReturns:\n    Workflow object representing the submitted workflow\n    \nExample:\n    # Basic tautomer search\n    result = submit_tautomer_search_workflow(\n        initial_molecule="CC(=O)CC(=O)C"\n    )\n    \n    # Meticulous search for complex molecule\n    result = submit_tautomer_search_workflow(\n        initial_molecule="c1ccc2c(c1)ncc(=O)[nH]2",\n        mode="meticulous"\n    )\n', 'inputSchema': {'properties': {'initial_molecule': {'title': 'Initial Molecule', 'type': 'string'}, 'mode': {'default': 'careful', 'title': 'Mode', 'type': 'string'}, 'name': {'default': 'Tautomer Search Workflow', 'title': 'Name', 'type': 'string'}, 'folder_uuid': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Folder Uuid'}, 'max_credits': {'anyOf': [{'type': 'integer'}, {'type': 'null'}], 'default': None, 'title': 'Max Credits'}}, 'required': ['initial_molecule'], 'type': 'object'}}, {'name': 'submit_descriptors_workflow', 'description': 'Submit a molecular descriptors calculation workflow using Rowan v2 API.\n\nCalculates a comprehensive set of molecular descriptors including:\n- Physical properties (MW, logP, TPSA, etc.)\n- Electronic properties (HOMO/LUMO, dipole moment, etc.)\n- Structural features (rotatable bonds, H-bond donors/acceptors, etc.)\n- Topological indices\n\nArgs:\n    initial_molecule: SMILES string or molecule object\n    name: Workflow name for tracking\n    folder_uuid: Optional folder UUID for organization\n    max_credits: Optional credit limit for the calculation\n    \nReturns:\n    Workflow object representing the submitted workflow\n    \nExample:\n    # Basic descriptor calculation\n    result = submit_descriptors_workflow(\n        initial_molecule="CC(=O)Nc1ccc(O)cc1"\n    )\n    \n    # For complex molecule\n    result = submit_descriptors_workflow(\n        initial_molecule="CN1C=NC2=C1C(=O)N(C(=O)N2C)C",\n        name="Caffeine Descriptors"\n    )\n', 'inputSchema': {'properties': {'initial_molecule': {'title': 'Initial Molecule', 'type': 'string'}, 'name': {'default': 'Descriptors Workflow', 'title': 'Name', 'type': 'string'}, 'folder_uuid': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Folder Uuid'}, 'max_credits': {'anyOf': [{'type': 'integer'}, {'type': 'null'}], 'default': None, 'title': 'Max Credits'}}, 'required': ['initial_molecule'], 'type': 'object'}}, {'name': 'submit_scan_workflow', 'description': 'Submit a potential energy surface scan workflow using Rowan v2 API.\n\nPerforms systematic scans along specified molecular coordinates (bonds, angles,\nor dihedrals) to map the potential energy surface.\n\nArgs:\n    initial_molecule: SMILES string or molecule object\n    scan_settings: Dictionary specifying scan parameters\n        Example: {\n            "type": "dihedral",  # or "bond", "angle"\n            "atoms": [0, 1, 2, 3],  # atom indices\n            "start": -180,\n            "stop": 180,\n            "step": 10\n        }\n    calculation_engine: Computational engine (default: "omol25")\n        Options: "omol25", "xtb", "psi4"\n    calculation_method: Method for calculations (default: "uma_m_omol")\n        Options depend on engine\n    wavefront_propagation: Use wavefront optimization (default: True)\n        Speeds up scans by using previous geometries as starting points\n    name: Workflow name for tracking\n    folder_uuid: Optional folder UUID for organization\n    max_credits: Optional credit limit for the calculation\n    \nReturns:\n    Workflow object representing the submitted workflow\n    \nExample:\n    # Dihedral scan\n    result = submit_scan_workflow(\n        initial_molecule="CC(C)CC",\n        scan_settings={\n            "type": "dihedral",\n            "atoms": [0, 1, 2, 3],\n            "start": -180,\n            "stop": 180,\n            "step": 15\n        }\n    )\n    \n    # Bond scan with advanced method\n    result = submit_scan_workflow(\n        initial_molecule="CC",\n        scan_settings={\n            "type": "bond",\n            "atoms": [0, 1],\n            "start": 1.0,\n            "stop": 2.5,\n            "step": 0.1\n        },\n        calculation_method="r2scan_3c"\n    )\n', 'inputSchema': {'properties': {'initial_molecule': {'title': 'Initial Molecule', 'type': 'string'}, 'scan_settings': {'anyOf': [{'additionalProperties': True, 'type': 'object'}, {'type': 'null'}], 'default': None, 'title': 'Scan Settings'}, 'calculation_engine': {'default': 'omol25', 'title': 'Calculation Engine', 'type': 'string'}, 'calculation_method': {'default': 'uma_m_omol', 'title': 'Calculation Method', 'type': 'string'}, 'wavefront_propagation': {'default': True, 'title': 'Wavefront Propagation', 'type': 'boolean'}, 'name': {'default': 'Scan Workflow', 'title': 'Name', 'type': 'string'}, 'folder_uuid': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Folder Uuid'}, 'max_credits': {'anyOf': [{'type': 'integer'}, {'type': 'null'}], 'default': None, 'title': 'Max Credits'}}, 'required': ['initial_molecule'], 'type': 'object'}}, {'name': 'submit_irc_workflow', 'description': 'Submits an Intrinsic Reaction Coordinate (IRC) workflow to the API.\n\nArgs:\n    initial_molecule: The initial molecule to perform the IRC calculation on.\n        Can be a dict, StJamesMolecule, or RdkitMol object\n    method: The computational method to use for the IRC calculation (default: "uma_m_omol")\n        See list of available methods for options\n    engine: The computational engine to use for the calculation (default: "omol25")\n        See list of available engines\n    preopt: Whether to perform a pre-optimization of the molecule (default: True)\n    step_size: The step size to use for the IRC calculation (default: 0.05)\n    max_irc_steps: The maximum number of IRC steps to perform (default: 30)\n    name: The name of the workflow\n    folder_uuid: The UUID of the folder to place the workflow in\n    max_credits: The maximum number of credits to use for the workflow\n    \nReturns:\n    Workflow object representing the submitted IRC workflow\n    \nExample:\n    # Basic IRC calculation\n    result = submit_irc_workflow(\n        initial_molecule={"smiles": "[CH3].[CH3]"},\n        method="gfn2_xtb",\n        max_irc_steps=50\n    )\n    \n    # IRC with specific method and engine\n    result = submit_irc_workflow(\n        initial_molecule={"smiles": "CC(O)=CC"},\n        method="r2scan_3c",\n        engine="psi4",\n        step_size=0.03\n    )\n', 'inputSchema': {'properties': {'initial_molecule': {'anyOf': [{'additionalProperties': True, 'type': 'object'}, {}, {'type': 'null'}], 'default': None, 'title': 'Initial Molecule'}, 'method': {'default': 'uma_m_omol', 'title': 'Method', 'type': 'string'}, 'engine': {'default': 'omol25', 'title': 'Engine', 'type': 'string'}, 'preopt': {'default': True, 'title': 'Preopt', 'type': 'boolean'}, 'step_size': {'default': 0.05, 'title': 'Step Size', 'type': 'number'}, 'max_irc_steps': {'default': 30, 'title': 'Max Irc Steps', 'type': 'integer'}, 'name': {'default': 'IRC Workflow', 'title': 'Name', 'type': 'string'}, 'folder_uuid': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Folder Uuid'}, 'max_credits': {'anyOf': [{'type': 'integer'}, {'type': 'null'}], 'default': None, 'title': 'Max Credits'}}, 'type': 'object'}}, {'name': 'submit_protein_cofolding_workflow', 'description': 'Submits a protein cofolding workflow to the API.\n\nArgs:\n    initial_protein_sequences: The sequences of the proteins to be cofolded\n    initial_smiles_list: A list of SMILES strings for the ligands to be cofolded with\n    ligand_binding_affinity_index: The index of the ligand for which to compute the binding affinity\n    use_msa_server: Whether to use the MSA server for the computation\n    use_potentials: Whether to use potentials for the computation\n    name: The name of the workflow\n    model: The model to use for the computation\n    folder_uuid: The UUID of the folder to store the workflow in\n    max_credits: The maximum number of credits to use for the workflow\n    \nReturns:\n    Workflow object representing the submitted workflow\n    \nExample:\n    # Protein dimer cofolding\n    result = submit_protein_cofolding_workflow(\n        initial_protein_sequences=[\n            "MKTAYIAKQRQISFVKSHFSRQLEERLGLIEVQAPILSRVGDGTQDNLSGAEK",\n            "MKQHKAMIVALIVICITAVVAALVTRKDLCEVHIRTGQTEVAVF"\n        ]\n    )\n    \n    # Protein-ligand complex\n    result = submit_protein_cofolding_workflow(\n        initial_protein_sequences=["MGSSHHHHHHSSGLVPRGSH"],\n        initial_smiles_list=["CC(=O)O", "CCO"],\n        ligand_binding_affinity_index=0,\n        use_msa_server=True\n    )\n', 'inputSchema': {'properties': {'initial_protein_sequences': {'items': {'type': 'string'}, 'title': 'Initial Protein Sequences', 'type': 'array'}, 'initial_smiles_list': {'anyOf': [{'items': {'type': 'string'}, 'type': 'array'}, {'type': 'null'}], 'default': None, 'title': 'Initial Smiles List'}, 'ligand_binding_affinity_index': {'anyOf': [{'type': 'integer'}, {'type': 'null'}], 'default': None, 'title': 'Ligand Binding Affinity Index'}, 'use_msa_server': {'default': True, 'title': 'Use Msa Server', 'type': 'boolean'}, 'use_potentials': {'default': False, 'title': 'Use Potentials', 'type': 'boolean'}, 'name': {'default': 'Cofolding Workflow', 'title': 'Name', 'type': 'string'}, 'model': {'default': 'boltz_2', 'title': 'Model', 'type': 'string'}, 'folder_uuid': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Folder Uuid'}, 'max_credits': {'anyOf': [{'type': 'integer'}, {'type': 'null'}], 'default': None, 'title': 'Max Credits'}}, 'required': ['initial_protein_sequences'], 'type': 'object'}}, {'name': 'submit_docking_workflow', 'description': 'Submits a Docking workflow to the API.\n\nArgs:\n    protein: The protein to dock. Can be fed as a uuid or a Protein object\n    pocket: The pocket to dock into\n    initial_molecule: The initial molecule to be docked.\n        Can be a dict, StJamesMolecule, or RdkitMol object\n    do_csearch: Whether to perform a conformational search on the ligand\n    do_optimization: Whether to perform an optimization on the ligand\n    name: The name of the workflow\n    folder_uuid: The UUID of the folder to place the workflow in\n    max_credits: The maximum number of credits to use for the workflow\n    \nReturns:\n    Workflow object representing the submitted workflow\n    \nExample:\n    # Basic docking with protein UUID\n    result = submit_docking_workflow(\n        protein="protein-uuid-123",\n        pocket=pocket_obj,\n        initial_molecule={"smiles": "CC(=O)Oc1ccccc1C(=O)O"}\n    )\n    \n    # Docking with optimization disabled\n    result = submit_docking_workflow(\n        protein=protein_obj,\n        pocket=pocket_obj,\n        initial_molecule={"smiles": "CCO"},\n        do_csearch=False,\n        do_optimization=False\n    )\n', 'inputSchema': {'properties': {'protein': {'anyOf': [{'type': 'string'}, {}], 'title': 'Protein'}, 'pocket': {'title': 'Pocket'}, 'initial_molecule': {'anyOf': [{'additionalProperties': True, 'type': 'object'}, {}, {'type': 'null'}], 'default': None, 'title': 'Initial Molecule'}, 'do_csearch': {'default': True, 'title': 'Do Csearch', 'type': 'boolean'}, 'do_optimization': {'default': True, 'title': 'Do Optimization', 'type': 'boolean'}, 'name': {'default': 'Docking Workflow', 'title': 'Name', 'type': 'string'}, 'folder_uuid': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Folder Uuid'}, 'max_credits': {'anyOf': [{'type': 'integer'}, {'type': 'null'}], 'default': None, 'title': 'Max Credits'}}, 'required': ['protein', 'pocket'], 'type': 'object'}}, {'name': 'workflow_fetch_latest', 'description': 'Fetch the latest workflow data from the database.\n\nUpdates the workflow object with the most recent status and results.\n\nArgs:\n    workflow_uuid: The UUID of the workflow to fetch\n    in_place: Whether to update the workflow object in place (default: False)\n    \nReturns:\n    Dictionary containing the updated workflow data including status and results\n', 'inputSchema': {'properties': {'workflow_uuid': {'title': 'Workflow Uuid', 'type': 'string'}, 'in_place': {'default': False, 'title': 'In Place', 'type': 'boolean'}}, 'required': ['workflow_uuid'], 'type': 'object'}}, {'name': 'workflow_wait_for_result', 'description': 'Wait for a workflow to complete and return the result.\n\nBlocks until the workflow completes, polling at specified intervals.\n\nArgs:\n    workflow_uuid: The UUID of the workflow to wait for\n    poll_interval: Time in seconds between status checks (default: 5)\n    \nReturns:\n    Dictionary containing the completed workflow data including results\n', 'inputSchema': {'properties': {'workflow_uuid': {'title': 'Workflow Uuid', 'type': 'string'}, 'poll_interval': {'default': 5, 'title': 'Poll Interval', 'type': 'integer'}}, 'required': ['workflow_uuid'], 'type': 'object'}}, {'name': 'workflow_get_status', 'description': 'Get the current status of a workflow.\n\nArgs:\n    workflow_uuid: The UUID of the workflow\n    \nReturns:\n    Dictionary with status information\n', 'inputSchema': {'properties': {'workflow_uuid': {'title': 'Workflow Uuid', 'type': 'string'}}, 'required': ['workflow_uuid'], 'type': 'object'}}, {'name': 'workflow_stop', 'description': 'Stop a running workflow.\n\nArgs:\n    workflow_uuid: The UUID of the workflow to stop\n    \nReturns:\n    Dictionary with confirmation message\n', 'inputSchema': {'properties': {'workflow_uuid': {'title': 'Workflow Uuid', 'type': 'string'}}, 'required': ['workflow_uuid'], 'type': 'object'}}, {'name': 'workflow_delete', 'description': 'Delete a workflow.\n\nThis permanently removes the workflow and its results from the database.\n\nArgs:\n    workflow_uuid: The UUID of the workflow to delete\n    \nReturns:\n    Dictionary with confirmation message\n', 'inputSchema': {'properties': {'workflow_uuid': {'title': 'Workflow Uuid', 'type': 'string'}}, 'required': ['workflow_uuid'], 'type': 'object'}}, {'name': 'retrieve_workflow', 'description': 'Retrieve a workflow from the API.\n\nArgs:\n    uuid: The UUID of the workflow to retrieve\n    \nReturns:\n    Dictionary containing the complete workflow data\n    \nRaises:\n    HTTPError: If the API request fails\n', 'inputSchema': {'properties': {'uuid': {'title': 'Uuid', 'type': 'string'}}, 'required': ['uuid'], 'type': 'object'}}, {'name': 'retrieve_calculation_molecules', 'description': 'Retrieve a list of molecules from a calculation.\n\nArgs:\n    uuid: The UUID of the calculation to retrieve molecules from\n    \nReturns:\n    List of dictionaries representing the molecules in the calculation\n    \nRaises:\n    HTTPError: If the API request fails\n', 'inputSchema': {'properties': {'uuid': {'title': 'Uuid', 'type': 'string'}}, 'required': ['uuid'], 'type': 'object'}}, {'name': 'list_workflows', 'description': 'List workflows subject to the specified criteria.\n\nArgs:\n    parent_uuid: The UUID of the parent folder\n    name_contains: Substring to search for in workflow names\n    public: Filter workflows by their public status\n    starred: Filter workflows by their starred status\n    status: Filter workflows by their status\n    workflow_type: Filter workflows by their type\n    page: The page number to retrieve (default: 0)\n    size: The number of items per page (default: 10)\n    \nReturns:\n    List of workflow dictionaries that match the search criteria\n    \nRaises:\n    HTTPError: If the request to the API fails\n', 'inputSchema': {'properties': {'parent_uuid': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Parent Uuid'}, 'name_contains': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Name Contains'}, 'public': {'anyOf': [{'type': 'boolean'}, {'type': 'null'}], 'default': None, 'title': 'Public'}, 'starred': {'anyOf': [{'type': 'boolean'}, {'type': 'null'}], 'default': None, 'title': 'Starred'}, 'status': {'anyOf': [{'type': 'integer'}, {'type': 'null'}], 'default': None, 'title': 'Status'}, 'workflow_type': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Workflow Type'}, 'page': {'default': 0, 'title': 'Page', 'type': 'integer'}, 'size': {'default': 10, 'title': 'Size', 'type': 'integer'}}, 'type': 'object'}}, {'name': 'workflow_update', 'description': 'Update workflow details.\n\nArgs:\n    workflow_uuid: The UUID of the workflow to update\n    name: New name for the workflow (optional)\n    notes: New notes for the workflow (optional)\n    starred: Whether to star/unstar the workflow (optional)\n    public: Whether to make the workflow public/private (optional)\n    \nReturns:\n    Dictionary with updated workflow information\n', 'inputSchema': {'properties': {'workflow_uuid': {'title': 'Workflow Uuid', 'type': 'string'}, 'name': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Name'}, 'notes': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Notes'}, 'starred': {'anyOf': [{'type': 'boolean'}, {'type': 'null'}], 'default': None, 'title': 'Starred'}, 'public': {'anyOf': [{'type': 'boolean'}, {'type': 'null'}], 'default': None, 'title': 'Public'}}, 'required': ['workflow_uuid'], 'type': 'object'}}, {'name': 'workflow_is_finished', 'description': 'Check if a workflow is finished.\n\nArgs:\n    workflow_uuid: The UUID of the workflow to check\n    \nReturns:\n    Dictionary with workflow completion status\n', 'inputSchema': {'properties': {'workflow_uuid': {'title': 'Workflow Uuid', 'type': 'string'}}, 'required': ['workflow_uuid'], 'type': 'object'}}, {'name': 'workflow_delete_data', 'description': 'Delete workflow data while keeping the workflow record.\n\nArgs:\n    workflow_uuid: The UUID of the workflow\n    \nReturns:\n    Dictionary with confirmation message\n', 'inputSchema': {'properties': {'workflow_uuid': {'title': 'Workflow Uuid', 'type': 'string'}}, 'required': ['workflow_uuid'], 'type': 'object'}}]})), metadata=None)
2025-08-02 13:49:41,850 - sse_starlette.sse - DEBUG - chunk: b'event: message\r\ndata: {"jsonrpc":"2.0","id":1,"result":{"tools":[{"name":"submit_basic_calculation_workflow","description":"Submit a basic calculation workflow using Rowan v2 API.\\n\\nPerforms fundamental quantum chemistry calculations with configurable methods\\nand computational tasks. Returns a workflow object for tracking progress.\\n","inputSchema":{"properties":{"initial_molecule":{"anyOf":[{"type":"string"},{"additionalProperties":true,"type":"object"},{}],"description":"The molecule to perform the calculation on. Can be a SMILES string, dict, StJamesMolecule, or RdkitMol object","title":"Initial Molecule"},"method":{"default":"uma_m_omol","description":"The method to use for the calculation (e.g., \'uma_m_omol\', \'gfn2-xtb\', \'r2scan_3c\')","title":"Method","type":"string"},"tasks":{"anyOf":[{"items":{"type":"string"},"type":"array"},{"type":"null"}],"default":null,"description":"List of computational tasks to perform. Optional[List[str]], Defaults to None","title":"Tasks"},"mode":{"default":"auto","description":"The mode to run the calculation in (\'auto\', \'rapid\', \'careful\', \'meticulous\')","title":"Mode","type":"string"},"engine":{"default":"omol25","description":"The computational engine to use (\'omol25\', \'xtb\', \'psi4\')","title":"Engine","type":"string"},"name":{"default":"Basic Calculation Workflow","description":"The name of the workflow for identification","title":"Name","type":"string"},"folder_uuid":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"description":"UUID of the folder to place the workflow in (optional)","title":"Folder Uuid"},"max_credits":{"anyOf":[{"type":"integer"},{"type":"null"}],"default":null,"description":"Maximum number of credits to use for the workflow (optional)","title":"Max Credits"}},"required":["initial_molecule"],"type":"object"}},{"name":"submit_conformer_search_workflow","description":"Submit a conformer search workflow using Rowan v2 API.\\n\\nExplores the conformational space of a molecule to find low-energy structures.\\n\\nArgs:\\n    initial_molecule: SMILES string or molecule object\\n    conf_gen_mode: default to \\"rapid\\"\\n        Options: \\"rapid\\", \\"careful\\", \\"meticulous\\"\\n    final_method: default: \\"aimnet2_wb97md3\\"\\n        Try other options, if user specifies\\n    solvent: Optional solvent for implicit solvation (e.g., \\"water\\", \\"ethanol\\")\\n    transition_state: Whether searching for transition state conformers (default: False)\\n    name: Workflow name for tracking\\n    folder_uuid: Optional folder UUID for organization\\n    max_credits: Optional credit limit for the calculation\\n    \\nReturns:\\n    Workflow object representing the submitted workflow\\n    \\nExample:\\n    # Basic conformer search\\n    result = submit_conformer_search_workflow(\\n        initial_molecule=\\"CCCC\\",\\n        conf_gen_mode=\\"rapid\\"\\n    )\\n    \\n    # Careful search with solvent\\n    result = submit_conformer_search_workflow(\\n        initial_molecule=\\"CC(C)CC(=O)O\\",\\n        conf_gen_mode=\\"careful\\",\\n        solvent=\\"water\\",\\n        final_method=\\"r2scan_3c\\"\\n    )\\n","inputSchema":{"properties":{"initial_molecule":{"title":"Initial Molecule","type":"string"},"conf_gen_mode":{"default":"rapid","title":"Conf Gen Mode","type":"string"},"final_method":{"default":"aimnet2_wb97md3","title":"Final Method","type":"string"},"solvent":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"title":"Solvent"},"transition_state":{"default":false,"title":"Transition State","type":"boolean"},"name":{"default":"Conformer Search Workflow","title":"Name","type":"string"},"folder_uuid":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"title":"Folder Uuid"},"max_credits":{"anyOf":[{"type":"integer"},{"type":"null"}],"default":null,"title":"Max Credits"}},"required":["initial_molecule"],"type":"object"}},{"name":"submit_solubility_workflow","description":"Submit a solubility prediction workflow using Rowan v2 API.\\n\\nPredicts solubility (log S) of a molecule in multiple solvents at various temperatures\\nusing machine learning models.\\n\\nArgs:\\n    initial_smiles: SMILES string of the molecule\\n    solvents: List of solvents as SMILES or common names (e.g., [\\"water\\", \\"ethanol\\"])\\n        If None, uses default solvents\\n    temperatures: List of temperatures in Kelvin\\n        If None, uses default temperature range\\n    name: Workflow name for tracking\\n    folder_uuid: Optional folder UUID for organization\\n    max_credits: Optional credit limit for the calculation\\n    \\nReturns:\\n    Workflow object representing the submitted workflow\\n    \\nExample:\\n    # Basic solubility prediction\\n    result = submit_solubility_workflow(\\n        initial_smiles=\\"CC(=O)Nc1ccc(O)cc1\\",\\n        solvents=[\\"water\\", \\"ethanol\\"],\\n        temperatures=[298.15, 310.15]\\n    )\\n    \\n    # With SMILES solvents\\n    result = submit_solubility_workflow(\\n        initial_smiles=\\"CC(=O)O\\",\\n        solvents=[\\"O\\", \\"CCO\\", \\"CCCCCC\\"],\\n        temperatures=[273.15, 298.15, 323.15]\\n    )\\n","inputSchema":{"properties":{"initial_smiles":{"title":"Initial Smiles","type":"string"},"solvents":{"anyOf":[{"items":{"type":"string"},"type":"array"},{"type":"null"}],"default":null,"title":"Solvents"},"temperatures":{"anyOf":[{"items":{"type":"number"},"type":"array"},{"type":"null"}],"default":null,"title":"Temperatures"},"name":{"default":"Solubility Workflow","title":"Name","type":"string"},"folder_uuid":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"title":"Folder Uuid"},"max_credits":{"anyOf":[{"type":"integer"},{"type":"null"}],"default":null,"title":"Max Credits"}},"required":["initial_smiles"],"type":"object"}},{"name":"submit_pka_workflow","description":"Submit a pKa prediction workflow using Rowan v2 API.\\n\\nPredicts acid dissociation constants (pKa) for ionizable groups in a molecule\\nusing quantum chemistry calculations.\\n\\nArgs:\\n    initial_molecule: SMILES string or molecule object\\n    pka_range: Tuple of (min, max) pKa values to search (default: (2, 12))\\n    deprotonate_elements: List of elements to consider for deprotonation\\n        (e.g., [\\"N\\", \\"O\\", \\"S\\"]). If None, uses defaults\\n    protonate_elements: List of elements to consider for protonation\\n        (e.g., [\\"N\\", \\"O\\"]). If None, uses defaults\\n    mode: Calculation mode (default: \\"careful\\")\\n        Options: \\"rapid\\", \\"careful\\", \\"meticulous\\"\\n    name: Workflow name for tracking\\n    folder_uuid: Optional folder UUID for organization\\n    max_credits: Optional credit limit for the calculation\\n    \\nReturns:\\n    Workflow object representing the submitted workflow\\n    \\nExample:\\n    # Basic pKa prediction\\n    result = submit_pka_workflow(\\n        initial_molecule=\\"CC(=O)O\\",\\n        pka_range=(2, 8)\\n    )\\n    \\n    # Specific elements with meticulous mode\\n    result = submit_pka_workflow(\\n        initial_molecule=\\"NC(C)C(=O)O\\",\\n        pka_range=(1, 14),\\n        deprotonate_elements=[\\"N\\", \\"O\\"],\\n        mode=\\"meticulous\\"\\n    )\\n","inputSchema":{"properties":{"initial_molecule":{"title":"Initial Molecule","type":"string"},"pka_range":{"default":[2,12],"maxItems":2,"minItems":2,"prefixItems":[{"type":"number"},{"type":"number"}],"title":"Pka Range","type":"array"},"deprotonate_elements":{"anyOf":[{"items":{"type":"string"},"type":"array"},{"type":"null"}],"default":null,"title":"Deprotonate Elements"},"protonate_elements":{"anyOf":[{"items":{"type":"string"},"type":"array"},{"type":"null"}],"default":null,"title":"Protonate Elements"},"mode":{"default":"careful","title":"Mode","type":"string"},"name":{"default":"pKa Workflow","title":"Name","type":"string"},"folder_uuid":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"title":"Folder Uuid"},"max_credits":{"anyOf":[{"type":"integer"},{"type":"null"}],"default":null,"title":"Max Credits"}},"required":["initial_molecule"],"type":"object"}},{"name":"submit_redox_potential_workflow","description":"Submit a redox potential calculation workflow using Rowan v2 API.\\n\\nCalculates reduction and/or oxidation potentials for a molecule using\\nquantum chemistry methods.\\n\\nArgs:\\n    initial_molecule: SMILES string or molecule object\\n    reduction: Whether to calculate reduction potential (default: False)\\n    oxidization: Whether to calculate oxidation potential (default: True)\\n    mode: Calculation mode (default: \\"rapid\\")\\n        Options: \\"rapid\\", \\"careful\\", \\"meticulous\\"\\n    name: Workflow name for tracking\\n    folder_uuid: Optional folder UUID for organization\\n    max_credits: Optional credit limit for the calculation\\n    \\nReturns:\\n    Workflow object representing the submitted workflow\\n    \\nExample:\\n    # Basic oxidation potential\\n    result = submit_redox_potential_workflow(\\n        initial_molecule=\\"CC1=CC=CC=C1\\",\\n        oxidization=True\\n    )\\n    \\n    # Both reduction and oxidation with careful mode\\n    result = submit_redox_potential_workflow(\\n        initial_molecule=\\"c1ccccc1\\",\\n        reduction=True,\\n        oxidization=True,\\n        mode=\\"careful\\"\\n    )\\n","inputSchema":{"properties":{"initial_molecule":{"title":"Initial Molecule","type":"string"},"reduction":{"default":false,"title":"Reduction","type":"boolean"},"oxidization":{"default":true,"title":"Oxidization","type":"boolean"},"mode":{"default":"rapid","title":"Mode","type":"string"},"name":{"default":"Redox Potential Workflow","title":"Name","type":"string"},"folder_uuid":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"title":"Folder Uuid"},"max_credits":{"anyOf":[{"type":"integer"},{"type":"null"}],"default":null,"title":"Max Credits"}},"required":["initial_molecule"],"type":"object"}},{"name":"submit_fukui_workflow","description":"Submit a Fukui indices calculation workflow using Rowan v2 API.\\n\\nCalculates Fukui indices to predict molecular reactivity at different sites.\\nFukui indices indicate susceptibility to nucleophilic/electrophilic attack.\\n\\nArgs:\\n    initial_molecule: SMILES string or molecule object\\n    optimization_method: Method for geometry optimization (default: \\"gfn2_xtb\\")\\n        Common options: \\"gfn2_xtb\\", \\"r2scan_3c\\", \\"aimnet2_wb97md3\\"\\n    fukui_method: Method for Fukui calculation (default: \\"gfn1_xtb\\")\\n        Common options: \\"gfn1_xtb\\", \\"gfn2_xtb\\"\\n    solvent_settings: Optional solvent configuration dictionary\\n        Example: {\\"solvent\\": \\"water\\", \\"model\\": \\"alpb\\"}\\n    name: Workflow name for tracking\\n    folder_uuid: Optional folder UUID for organization\\n    max_credits: Optional credit limit for the calculation\\n    \\nReturns:\\n    Workflow object representing the submitted workflow\\n    \\nExample:\\n    # Basic Fukui indices\\n    result = submit_fukui_workflow(\\n        initial_molecule=\\"CC(=O)O\\"\\n    )\\n    \\n    # With solvent and advanced methods\\n    result = submit_fukui_workflow(\\n        initial_molecule=\\"c1ccccc1N\\",\\n        optimization_method=\\"r2scan_3c\\",\\n        fukui_method=\\"gfn2_xtb\\",\\n        solvent_settings={\\"solvent\\": \\"water\\", \\"model\\": \\"alpb\\"}\\n    )\\n","inputSchema":{"properties":{"initial_molecule":{"title":"Initial Molecule","type":"string"},"optimization_method":{"default":"gfn2_xtb","title":"Optimization Method","type":"string"},"fukui_method":{"default":"gfn1_xtb","title":"Fukui Method","type":"string"},"solvent_settings":{"anyOf":[{"additionalProperties":true,"type":"object"},{"type":"null"}],"default":null,"title":"Solvent Settings"},"name":{"default":"Fukui Workflow","title":"Name","type":"string"},"folder_uuid":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"title":"Folder Uuid"},"max_credits":{"anyOf":[{"type":"integer"},{"type":"null"}],"default":null,"title":"Max Credits"}},"required":["initial_molecule"],"type":"object"}},{"name":"submit_tautomer_search_workflow","description":"Submit a tautomer search workflow using Rowan v2 API.\\n\\nSearches for different tautomeric forms of a molecule and evaluates their\\nrelative stabilities. Tautomers are structural isomers that readily interconvert.\\n\\nArgs:\\n    initial_molecule: SMILES string or molecule object\\n    mode: Search mode (default: \\"careful\\")\\n        Options: \\"rapid\\", \\"careful\\", \\"meticulous\\"\\n    name: Workflow name for tracking\\n    folder_uuid: Optional folder UUID for organization\\n    max_credits: Optional credit limit for the calculation\\n    \\nReturns:\\n    Workflow object representing the submitted workflow\\n    \\nExample:\\n    # Basic tautomer search\\n    result = submit_tautomer_search_workflow(\\n        initial_molecule=\\"CC(=O)CC(=O)C\\"\\n    )\\n    \\n    # Meticulous search for complex molecule\\n    result = submit_tautomer_search_workflow(\\n        initial_molecule=\\"c1ccc2c(c1)ncc(=O)[nH]2\\",\\n        mode=\\"meticulous\\"\\n    )\\n","inputSchema":{"properties":{"initial_molecule":{"title":"Initial Molecule","type":"string"},"mode":{"default":"careful","title":"Mode","type":"string"},"name":{"default":"Tautomer Search Workflow","title":"Name","type":"string"},"folder_uuid":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"title":"Folder Uuid"},"max_credits":{"anyOf":[{"type":"integer"},{"type":"null"}],"default":null,"title":"Max Credits"}},"required":["initial_molecule"],"type":"object"}},{"name":"submit_descriptors_workflow","description":"Submit a molecular descriptors calculation workflow using Rowan v2 API.\\n\\nCalculates a comprehensive set of molecular descriptors including:\\n- Physical properties (MW, logP, TPSA, etc.)\\n- Electronic properties (HOMO/LUMO, dipole moment, etc.)\\n- Structural features (rotatable bonds, H-bond donors/acceptors, etc.)\\n- Topological indices\\n\\nArgs:\\n    initial_molecule: SMILES string or molecule object\\n    name: Workflow name for tracking\\n    folder_uuid: Optional folder UUID for organization\\n    max_credits: Optional credit limit for the calculation\\n    \\nReturns:\\n    Workflow object representing the submitted workflow\\n    \\nExample:\\n    # Basic descriptor calculation\\n    result = submit_descriptors_workflow(\\n        initial_molecule=\\"CC(=O)Nc1ccc(O)cc1\\"\\n    )\\n    \\n    # For complex molecule\\n    result = submit_descriptors_workflow(\\n        initial_molecule=\\"CN1C=NC2=C1C(=O)N(C(=O)N2C)C\\",\\n        name=\\"Caffeine Descriptors\\"\\n    )\\n","inputSchema":{"properties":{"initial_molecule":{"title":"Initial Molecule","type":"string"},"name":{"default":"Descriptors Workflow","title":"Name","type":"string"},"folder_uuid":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"title":"Folder Uuid"},"max_credits":{"anyOf":[{"type":"integer"},{"type":"null"}],"default":null,"title":"Max Credits"}},"required":["initial_molecule"],"type":"object"}},{"name":"submit_scan_workflow","description":"Submit a potential energy surface scan workflow using Rowan v2 API.\\n\\nPerforms systematic scans along specified molecular coordinates (bonds, angles,\\nor dihedrals) to map the potential energy surface.\\n\\nArgs:\\n    initial_molecule: SMILES string or molecule object\\n    scan_settings: Dictionary specifying scan parameters\\n        Example: {\\n            \\"type\\": \\"dihedral\\",  # or \\"bond\\", \\"angle\\"\\n            \\"atoms\\": [0, 1, 2, 3],  # atom indices\\n            \\"start\\": -180,\\n            \\"stop\\": 180,\\n            \\"step\\": 10\\n        }\\n    calculation_engine: Computational engine (default: \\"omol25\\")\\n        Options: \\"omol25\\", \\"xtb\\", \\"psi4\\"\\n    calculation_method: Method for calculations (default: \\"uma_m_omol\\")\\n        Options depend on engine\\n    wavefront_propagation: Use wavefront optimization (default: True)\\n        Speeds up scans by using previous geometries as starting points\\n    name: Workflow name for tracking\\n    folder_uuid: Optional folder UUID for organization\\n    max_credits: Optional credit limit for the calculation\\n    \\nReturns:\\n    Workflow object representing the submitted workflow\\n    \\nExample:\\n    # Dihedral scan\\n    result = submit_scan_workflow(\\n        initial_molecule=\\"CC(C)CC\\",\\n        scan_settings={\\n            \\"type\\": \\"dihedral\\",\\n            \\"atoms\\": [0, 1, 2, 3],\\n            \\"start\\": -180,\\n            \\"stop\\": 180,\\n            \\"step\\": 15\\n        }\\n    )\\n    \\n    # Bond scan with advanced method\\n    result = submit_scan_workflow(\\n        initial_molecule=\\"CC\\",\\n        scan_settings={\\n            \\"type\\": \\"bond\\",\\n            \\"atoms\\": [0, 1],\\n            \\"start\\": 1.0,\\n            \\"stop\\": 2.5,\\n            \\"step\\": 0.1\\n        },\\n        calculation_method=\\"r2scan_3c\\"\\n    )\\n","inputSchema":{"properties":{"initial_molecule":{"title":"Initial Molecule","type":"string"},"scan_settings":{"anyOf":[{"additionalProperties":true,"type":"object"},{"type":"null"}],"default":null,"title":"Scan Settings"},"calculation_engine":{"default":"omol25","title":"Calculation Engine","type":"string"},"calculation_method":{"default":"uma_m_omol","title":"Calculation Method","type":"string"},"wavefront_propagation":{"default":true,"title":"Wavefront Propagation","type":"boolean"},"name":{"default":"Scan Workflow","title":"Name","type":"string"},"folder_uuid":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"title":"Folder Uuid"},"max_credits":{"anyOf":[{"type":"integer"},{"type":"null"}],"default":null,"title":"Max Credits"}},"required":["initial_molecule"],"type":"object"}},{"name":"submit_irc_workflow","description":"Submits an Intrinsic Reaction Coordinate (IRC) workflow to the API.\\n\\nArgs:\\n    initial_molecule: The initial molecule to perform the IRC calculation on.\\n        Can be a dict, StJamesMolecule, or RdkitMol object\\n    method: The computational method to use for the IRC calculation (default: \\"uma_m_omol\\")\\n        See list of available methods for options\\n    engine: The computational engine to use for the calculation (default: \\"omol25\\")\\n        See list of available engines\\n    preopt: Whether to perform a pre-optimization of the molecule (default: True)\\n    step_size: The step size to use for the IRC calculation (default: 0.05)\\n    max_irc_steps: The maximum number of IRC steps to perform (default: 30)\\n    name: The name of the workflow\\n    folder_uuid: The UUID of the folder to place the workflow in\\n    max_credits: The maximum number of credits to use for the workflow\\n    \\nReturns:\\n    Workflow object representing the submitted IRC workflow\\n    \\nExample:\\n    # Basic IRC calculation\\n    result = submit_irc_workflow(\\n        initial_molecule={\\"smiles\\": \\"[CH3].[CH3]\\"},\\n        method=\\"gfn2_xtb\\",\\n        max_irc_steps=50\\n    )\\n    \\n    # IRC with specific method and engine\\n    result = submit_irc_workflow(\\n        initial_molecule={\\"smiles\\": \\"CC(O)=CC\\"},\\n        method=\\"r2scan_3c\\",\\n        engine=\\"psi4\\",\\n        step_size=0.03\\n    )\\n","inputSchema":{"properties":{"initial_molecule":{"anyOf":[{"additionalProperties":true,"type":"object"},{},{"type":"null"}],"default":null,"title":"Initial Molecule"},"method":{"default":"uma_m_omol","title":"Method","type":"string"},"engine":{"default":"omol25","title":"Engine","type":"string"},"preopt":{"default":true,"title":"Preopt","type":"boolean"},"step_size":{"default":0.05,"title":"Step Size","type":"number"},"max_irc_steps":{"default":30,"title":"Max Irc Steps","type":"integer"},"name":{"default":"IRC Workflow","title":"Name","type":"string"},"folder_uuid":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"title":"Folder Uuid"},"max_credits":{"anyOf":[{"type":"integer"},{"type":"null"}],"default":null,"title":"Max Credits"}},"type":"object"}},{"name":"submit_protein_cofolding_workflow","description":"Submits a protein cofolding workflow to the API.\\n\\nArgs:\\n    initial_protein_sequences: The sequences of the proteins to be cofolded\\n    initial_smiles_list: A list of SMILES strings for the ligands to be cofolded with\\n    ligand_binding_affinity_index: The index of the ligand for which to compute the binding affinity\\n    use_msa_server: Whether to use the MSA server for the computation\\n    use_potentials: Whether to use potentials for the computation\\n    name: The name of the workflow\\n    model: The model to use for the computation\\n    folder_uuid: The UUID of the folder to store the workflow in\\n    max_credits: The maximum number of credits to use for the workflow\\n    \\nReturns:\\n    Workflow object representing the submitted workflow\\n    \\nExample:\\n    # Protein dimer cofolding\\n    result = submit_protein_cofolding_workflow(\\n        initial_protein_sequences=[\\n            \\"MKTAYIAKQRQISFVKSHFSRQLEERLGLIEVQAPILSRVGDGTQDNLSGAEK\\",\\n            \\"MKQHKAMIVALIVICITAVVAALVTRKDLCEVHIRTGQTEVAVF\\"\\n        ]\\n    )\\n    \\n    # Protein-ligand complex\\n    result = submit_protein_cofolding_workflow(\\n        initial_protein_sequences=[\\"MGSSHHHHHHSSGLVPRGSH\\"],\\n        initial_smiles_list=[\\"CC(=O)O\\", \\"CCO\\"],\\n        ligand_binding_affinity_index=0,\\n        use_msa_server=True\\n    )\\n","inputSchema":{"properties":{"initial_protein_sequences":{"items":{"type":"string"},"title":"Initial Protein Sequences","type":"array"},"initial_smiles_list":{"anyOf":[{"items":{"type":"string"},"type":"array"},{"type":"null"}],"default":null,"title":"Initial Smiles List"},"ligand_binding_affinity_index":{"anyOf":[{"type":"integer"},{"type":"null"}],"default":null,"title":"Ligand Binding Affinity Index"},"use_msa_server":{"default":true,"title":"Use Msa Server","type":"boolean"},"use_potentials":{"default":false,"title":"Use Potentials","type":"boolean"},"name":{"default":"Cofolding Workflow","title":"Name","type":"string"},"model":{"default":"boltz_2","title":"Model","type":"string"},"folder_uuid":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"title":"Folder Uuid"},"max_credits":{"anyOf":[{"type":"integer"},{"type":"null"}],"default":null,"title":"Max Credits"}},"required":["initial_protein_sequences"],"type":"object"}},{"name":"submit_docking_workflow","description":"Submits a Docking workflow to the API.\\n\\nArgs:\\n    protein: The protein to dock. Can be fed as a uuid or a Protein object\\n    pocket: The pocket to dock into\\n    initial_molecule: The initial molecule to be docked.\\n        Can be a dict, StJamesMolecule, or RdkitMol object\\n    do_csearch: Whether to perform a conformational search on the ligand\\n    do_optimization: Whether to perform an optimization on the ligand\\n    name: The name of the workflow\\n    folder_uuid: The UUID of the folder to place the workflow in\\n    max_credits: The maximum number of credits to use for the workflow\\n    \\nReturns:\\n    Workflow object representing the submitted workflow\\n    \\nExample:\\n    # Basic docking with protein UUID\\n    result = submit_docking_workflow(\\n        protein=\\"protein-uuid-123\\",\\n        pocket=pocket_obj,\\n        initial_molecule={\\"smiles\\": \\"CC(=O)Oc1ccccc1C(=O)O\\"}\\n    )\\n    \\n    # Docking with optimization disabled\\n    result = submit_docking_workflow(\\n        protein=protein_obj,\\n        pocket=pocket_obj,\\n        initial_molecule={\\"smiles\\": \\"CCO\\"},\\n        do_csearch=False,\\n        do_optimization=False\\n    )\\n","inputSchema":{"properties":{"protein":{"anyOf":[{"type":"string"},{}],"title":"Protein"},"pocket":{"title":"Pocket"},"initial_molecule":{"anyOf":[{"additionalProperties":true,"type":"object"},{},{"type":"null"}],"default":null,"title":"Initial Molecule"},"do_csearch":{"default":true,"title":"Do Csearch","type":"boolean"},"do_optimization":{"default":true,"title":"Do Optimization","type":"boolean"},"name":{"default":"Docking Workflow","title":"Name","type":"string"},"folder_uuid":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"title":"Folder Uuid"},"max_credits":{"anyOf":[{"type":"integer"},{"type":"null"}],"default":null,"title":"Max Credits"}},"required":["protein","pocket"],"type":"object"}},{"name":"workflow_fetch_latest","description":"Fetch the latest workflow data from the database.\\n\\nUpdates the workflow object with the most recent status and results.\\n\\nArgs:\\n    workflow_uuid: The UUID of the workflow to fetch\\n    in_place: Whether to update the workflow object in place (default: False)\\n    \\nReturns:\\n    Dictionary containing the updated workflow data including status and results\\n","inputSchema":{"properties":{"workflow_uuid":{"title":"Workflow Uuid","type":"string"},"in_place":{"default":false,"title":"In Place","type":"boolean"}},"required":["workflow_uuid"],"type":"object"}},{"name":"workflow_wait_for_result","description":"Wait for a workflow to complete and return the result.\\n\\nBlocks until the workflow completes, polling at specified intervals.\\n\\nArgs:\\n    workflow_uuid: The UUID of the workflow to wait for\\n    poll_interval: Time in seconds between status checks (default: 5)\\n    \\nReturns:\\n    Dictionary containing the completed workflow data including results\\n","inputSchema":{"properties":{"workflow_uuid":{"title":"Workflow Uuid","type":"string"},"poll_interval":{"default":5,"title":"Poll Interval","type":"integer"}},"required":["workflow_uuid"],"type":"object"}},{"name":"workflow_get_status","description":"Get the current status of a workflow.\\n\\nArgs:\\n    workflow_uuid: The UUID of the workflow\\n    \\nReturns:\\n    Dictionary with status information\\n","inputSchema":{"properties":{"workflow_uuid":{"title":"Workflow Uuid","type":"string"}},"required":["workflow_uuid"],"type":"object"}},{"name":"workflow_stop","description":"Stop a running workflow.\\n\\nArgs:\\n    workflow_uuid: The UUID of the workflow to stop\\n    \\nReturns:\\n    Dictionary with confirmation message\\n","inputSchema":{"properties":{"workflow_uuid":{"title":"Workflow Uuid","type":"string"}},"required":["workflow_uuid"],"type":"object"}},{"name":"workflow_delete","description":"Delete a workflow.\\n\\nThis permanently removes the workflow and its results from the database.\\n\\nArgs:\\n    workflow_uuid: The UUID of the workflow to delete\\n    \\nReturns:\\n    Dictionary with confirmation message\\n","inputSchema":{"properties":{"workflow_uuid":{"title":"Workflow Uuid","type":"string"}},"required":["workflow_uuid"],"type":"object"}},{"name":"retrieve_workflow","description":"Retrieve a workflow from the API.\\n\\nArgs:\\n    uuid: The UUID of the workflow to retrieve\\n    \\nReturns:\\n    Dictionary containing the complete workflow data\\n    \\nRaises:\\n    HTTPError: If the API request fails\\n","inputSchema":{"properties":{"uuid":{"title":"Uuid","type":"string"}},"required":["uuid"],"type":"object"}},{"name":"retrieve_calculation_molecules","description":"Retrieve a list of molecules from a calculation.\\n\\nArgs:\\n    uuid: The UUID of the calculation to retrieve molecules from\\n    \\nReturns:\\n    List of dictionaries representing the molecules in the calculation\\n    \\nRaises:\\n    HTTPError: If the API request fails\\n","inputSchema":{"properties":{"uuid":{"title":"Uuid","type":"string"}},"required":["uuid"],"type":"object"}},{"name":"list_workflows","description":"List workflows subject to the specified criteria.\\n\\nArgs:\\n    parent_uuid: The UUID of the parent folder\\n    name_contains: Substring to search for in workflow names\\n    public: Filter workflows by their public status\\n    starred: Filter workflows by their starred status\\n    status: Filter workflows by their status\\n    workflow_type: Filter workflows by their type\\n    page: The page number to retrieve (default: 0)\\n    size: The number of items per page (default: 10)\\n    \\nReturns:\\n    List of workflow dictionaries that match the search criteria\\n    \\nRaises:\\n    HTTPError: If the request to the API fails\\n","inputSchema":{"properties":{"parent_uuid":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"title":"Parent Uuid"},"name_contains":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"title":"Name Contains"},"public":{"anyOf":[{"type":"boolean"},{"type":"null"}],"default":null,"title":"Public"},"starred":{"anyOf":[{"type":"boolean"},{"type":"null"}],"default":null,"title":"Starred"},"status":{"anyOf":[{"type":"integer"},{"type":"null"}],"default":null,"title":"Status"},"workflow_type":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"title":"Workflow Type"},"page":{"default":0,"title":"Page","type":"integer"},"size":{"default":10,"title":"Size","type":"integer"}},"type":"object"}},{"name":"workflow_update","description":"Update workflow details.\\n\\nArgs:\\n    workflow_uuid: The UUID of the workflow to update\\n    name: New name for the workflow (optional)\\n    notes: New notes for the workflow (optional)\\n    starred: Whether to star/unstar the workflow (optional)\\n    public: Whether to make the workflow public/private (optional)\\n    \\nReturns:\\n    Dictionary with updated workflow information\\n","inputSchema":{"properties":{"workflow_uuid":{"title":"Workflow Uuid","type":"string"},"name":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"title":"Name"},"notes":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"title":"Notes"},"starred":{"anyOf":[{"type":"boolean"},{"type":"null"}],"default":null,"title":"Starred"},"public":{"anyOf":[{"type":"boolean"},{"type":"null"}],"default":null,"title":"Public"}},"required":["workflow_uuid"],"type":"object"}},{"name":"workflow_is_finished","description":"Check if a workflow is finished.\\n\\nArgs:\\n    workflow_uuid: The UUID of the workflow to check\\n    \\nReturns:\\n    Dictionary with workflow completion status\\n","inputSchema":{"properties":{"workflow_uuid":{"title":"Workflow Uuid","type":"string"}},"required":["workflow_uuid"],"type":"object"}},{"name":"workflow_delete_data","description":"Delete workflow data while keeping the workflow record.\\n\\nArgs:\\n    workflow_uuid: The UUID of the workflow\\n    \\nReturns:\\n    Dictionary with confirmation message\\n","inputSchema":{"properties":{"workflow_uuid":{"title":"Workflow Uuid","type":"string"}},"required":["workflow_uuid"],"type":"object"}}]}}\r\n\r\n'
2025-08-02 13:49:54,436 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 20:49:54.435784+00:00\r\n\r\n'
2025-08-02 13:49:54,742 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 20:49:54.741568+00:00\r\n\r\n'
2025-08-02 13:49:56,454 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 20:49:56.453851+00:00\r\n\r\n'
2025-08-02 13:50:02,652 - mcp.server.sse - DEBUG - Handling POST message
2025-08-02 13:50:02,652 - mcp.server.sse - DEBUG - Parsed session ID: be66ed27-7514-4125-b934-c2b1e6363ef2
2025-08-02 13:50:02,652 - mcp.server.sse - DEBUG - Received JSON: b'{"jsonrpc":"2.0","id":2,"method":"tools/call","params":{"_meta":{"progressToken":2},"name":"submit_basic_calculation_workflow","arguments":{"method":"uma_m_omol","tasks":["optimize"],"mode":"auto","engine":"omol25","name":"Basic Calculation Workflow","folder_uuid":null,"max_credits":null}}}'
2025-08-02 13:50:02,653 - mcp.server.sse - DEBUG - Validated client message: root=JSONRPCRequest(method='tools/call', params={'_meta': {'progressToken': 2}, 'name': 'submit_basic_calculation_workflow', 'arguments': {'method': 'uma_m_omol', 'tasks': ['optimize'], 'mode': 'auto', 'engine': 'omol25', 'name': 'Basic Calculation Workflow', 'folder_uuid': None, 'max_credits': None}}, jsonrpc='2.0', id=2)
2025-08-02 13:50:02,653 - mcp.server.sse - DEBUG - Sending session message to writer: SessionMessage(message=JSONRPCMessage(root=JSONRPCRequest(method='tools/call', params={'_meta': {'progressToken': 2}, 'name': 'submit_basic_calculation_workflow', 'arguments': {'method': 'uma_m_omol', 'tasks': ['optimize'], 'mode': 'auto', 'engine': 'omol25', 'name': 'Basic Calculation Workflow', 'folder_uuid': None, 'max_credits': None}}, jsonrpc='2.0', id=2)), metadata=ServerMessageMetadata(related_request_id=None, request_context=<starlette.requests.Request object at 0x10c889eb0>))
2025-08-02 13:50:02,654 - mcp.server.lowlevel.server - DEBUG - Received message: <mcp.shared.session.RequestResponder object at 0x10c88f050>
2025-08-02 13:50:02,654 - mcp.server.lowlevel.server - INFO - Processing request of type CallToolRequest
2025-08-02 13:50:02,654 - mcp.server.lowlevel.server - DEBUG - Dispatching request of type CallToolRequest
2025-08-02 13:50:02,654 - FastMCP.fastmcp.tools.tool_manager - ERROR - Error calling tool 'submit_basic_calculation_workflow': 1 validation error for call[submit_basic_calculation_workflow]
initial_molecule
  Missing required argument [type=missing_argument, input_value={'method': 'uma_m_omol', ...ne, 'max_credits': None}, input_type=dict]
    For further information visit https://errors.pydantic.dev/2.11/v/missing_argument
Traceback (most recent call last):
  File "/Users/katherineyenko/Desktop/sandbox/rowan-mcp/.venv/lib/python3.13/site-packages/fastmcp/tools/tool_manager.py", line 131, in call_tool
    return await tool.run(arguments)
           ^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/katherineyenko/Desktop/sandbox/rowan-mcp/.venv/lib/python3.13/site-packages/fastmcp/tools/tool.py", line 187, in run
    result = type_adapter.validate_python(arguments)
  File "/Users/katherineyenko/Desktop/sandbox/rowan-mcp/.venv/lib/python3.13/site-packages/pydantic/type_adapter.py", line 421, in validate_python
    return self.validator.validate_python(
           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^
        object,
        ^^^^^^^
    ...<5 lines>...
        by_name=by_name,
        ^^^^^^^^^^^^^^^^
    )
    ^
pydantic_core._pydantic_core.ValidationError: 1 validation error for call[submit_basic_calculation_workflow]
initial_molecule
  Missing required argument [type=missing_argument, input_value={'method': 'uma_m_omol', ...ne, 'max_credits': None}, input_type=dict]
    For further information visit https://errors.pydantic.dev/2.11/v/missing_argument
2025-08-02 13:50:02,723 - mcp.server.lowlevel.server - DEBUG - Response sent
2025-08-02 13:50:02,723 - mcp.server.sse - DEBUG - Sending message via SSE: SessionMessage(message=JSONRPCMessage(root=JSONRPCResponse(jsonrpc='2.0', id=2, result={'content': [{'type': 'text', 'text': "Error calling tool 'submit_basic_calculation_workflow': 1 validation error for call[submit_basic_calculation_workflow]\ninitial_molecule\n  Missing required argument [type=missing_argument, input_value={'method': 'uma_m_omol', ...ne, 'max_credits': None}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/missing_argument"}], 'isError': True})), metadata=None)
2025-08-02 13:50:02,723 - sse_starlette.sse - DEBUG - chunk: b'event: message\r\ndata: {"jsonrpc":"2.0","id":2,"result":{"content":[{"type":"text","text":"Error calling tool \'submit_basic_calculation_workflow\': 1 validation error for call[submit_basic_calculation_workflow]\\ninitial_molecule\\n  Missing required argument [type=missing_argument, input_value={\'method\': \'uma_m_omol\', ...ne, \'max_credits\': None}, input_type=dict]\\n    For further information visit https://errors.pydantic.dev/2.11/v/missing_argument"}],"isError":true}}\r\n\r\n'
2025-08-02 13:50:09,438 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 20:50:09.438028+00:00\r\n\r\n'
2025-08-02 13:50:09,744 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 20:50:09.744214+00:00\r\n\r\n'
2025-08-02 13:50:11,456 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 20:50:11.456429+00:00\r\n\r\n'
2025-08-02 13:50:24,220 - mcp.server.sse - DEBUG - Handling POST message
2025-08-02 13:50:24,221 - mcp.server.sse - DEBUG - Parsed session ID: be66ed27-7514-4125-b934-c2b1e6363ef2
2025-08-02 13:50:24,221 - mcp.server.sse - DEBUG - Received JSON: b'{"jsonrpc":"2.0","id":3,"method":"tools/call","params":{"_meta":{"progressToken":3},"name":"submit_basic_calculation_workflow","arguments":{"method":"gfn2-xtb","tasks":["optimize"],"mode":"auto","engine":"omol25","name":"Basic Calculation Workflow","folder_uuid":null,"max_credits":null}}}'
2025-08-02 13:50:24,221 - mcp.server.sse - DEBUG - Validated client message: root=JSONRPCRequest(method='tools/call', params={'_meta': {'progressToken': 3}, 'name': 'submit_basic_calculation_workflow', 'arguments': {'method': 'gfn2-xtb', 'tasks': ['optimize'], 'mode': 'auto', 'engine': 'omol25', 'name': 'Basic Calculation Workflow', 'folder_uuid': None, 'max_credits': None}}, jsonrpc='2.0', id=3)
2025-08-02 13:50:24,221 - mcp.server.sse - DEBUG - Sending session message to writer: SessionMessage(message=JSONRPCMessage(root=JSONRPCRequest(method='tools/call', params={'_meta': {'progressToken': 3}, 'name': 'submit_basic_calculation_workflow', 'arguments': {'method': 'gfn2-xtb', 'tasks': ['optimize'], 'mode': 'auto', 'engine': 'omol25', 'name': 'Basic Calculation Workflow', 'folder_uuid': None, 'max_credits': None}}, jsonrpc='2.0', id=3)), metadata=ServerMessageMetadata(related_request_id=None, request_context=<starlette.requests.Request object at 0x10c914290>))
2025-08-02 13:50:24,222 - mcp.server.lowlevel.server - DEBUG - Received message: <mcp.shared.session.RequestResponder object at 0x10c88f450>
2025-08-02 13:50:24,223 - mcp.server.lowlevel.server - INFO - Processing request of type CallToolRequest
2025-08-02 13:50:24,223 - mcp.server.lowlevel.server - DEBUG - Dispatching request of type CallToolRequest
2025-08-02 13:50:24,223 - FastMCP.fastmcp.tools.tool_manager - ERROR - Error calling tool 'submit_basic_calculation_workflow': 1 validation error for call[submit_basic_calculation_workflow]
initial_molecule
  Missing required argument [type=missing_argument, input_value={'method': 'gfn2-xtb', 't...ne, 'max_credits': None}, input_type=dict]
    For further information visit https://errors.pydantic.dev/2.11/v/missing_argument
Traceback (most recent call last):
  File "/Users/katherineyenko/Desktop/sandbox/rowan-mcp/.venv/lib/python3.13/site-packages/fastmcp/tools/tool_manager.py", line 131, in call_tool
    return await tool.run(arguments)
           ^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/katherineyenko/Desktop/sandbox/rowan-mcp/.venv/lib/python3.13/site-packages/fastmcp/tools/tool.py", line 187, in run
    result = type_adapter.validate_python(arguments)
  File "/Users/katherineyenko/Desktop/sandbox/rowan-mcp/.venv/lib/python3.13/site-packages/pydantic/type_adapter.py", line 421, in validate_python
    return self.validator.validate_python(
           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^
        object,
        ^^^^^^^
    ...<5 lines>...
        by_name=by_name,
        ^^^^^^^^^^^^^^^^
    )
    ^
pydantic_core._pydantic_core.ValidationError: 1 validation error for call[submit_basic_calculation_workflow]
initial_molecule
  Missing required argument [type=missing_argument, input_value={'method': 'gfn2-xtb', 't...ne, 'max_credits': None}, input_type=dict]
    For further information visit https://errors.pydantic.dev/2.11/v/missing_argument
2025-08-02 13:50:24,302 - mcp.server.lowlevel.server - DEBUG - Response sent
2025-08-02 13:50:24,303 - mcp.server.sse - DEBUG - Sending message via SSE: SessionMessage(message=JSONRPCMessage(root=JSONRPCResponse(jsonrpc='2.0', id=3, result={'content': [{'type': 'text', 'text': "Error calling tool 'submit_basic_calculation_workflow': 1 validation error for call[submit_basic_calculation_workflow]\ninitial_molecule\n  Missing required argument [type=missing_argument, input_value={'method': 'gfn2-xtb', 't...ne, 'max_credits': None}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/missing_argument"}], 'isError': True})), metadata=None)
2025-08-02 13:50:24,303 - sse_starlette.sse - DEBUG - chunk: b'event: message\r\ndata: {"jsonrpc":"2.0","id":3,"result":{"content":[{"type":"text","text":"Error calling tool \'submit_basic_calculation_workflow\': 1 validation error for call[submit_basic_calculation_workflow]\\ninitial_molecule\\n  Missing required argument [type=missing_argument, input_value={\'method\': \'gfn2-xtb\', \'t...ne, \'max_credits\': None}, input_type=dict]\\n    For further information visit https://errors.pydantic.dev/2.11/v/missing_argument"}],"isError":true}}\r\n\r\n'
2025-08-02 13:50:24,439 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 20:50:24.439793+00:00\r\n\r\n'
2025-08-02 13:50:24,745 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 20:50:24.745553+00:00\r\n\r\n'
2025-08-02 13:50:26,459 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 20:50:26.459026+00:00\r\n\r\n'
2025-08-02 13:50:39,441 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 20:50:39.441463+00:00\r\n\r\n'
2025-08-02 13:50:39,749 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 20:50:39.749048+00:00\r\n\r\n'
2025-08-02 13:50:41,461 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 20:50:41.461762+00:00\r\n\r\n'
2025-08-02 13:50:54,445 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 20:50:54.445107+00:00\r\n\r\n'
2025-08-02 13:50:54,752 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 20:50:54.752646+00:00\r\n\r\n'
2025-08-02 13:50:56,463 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 20:50:56.463387+00:00\r\n\r\n'
2025-08-02 13:51:09,448 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 20:51:09.447770+00:00\r\n\r\n'
2025-08-02 13:51:09,755 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 20:51:09.755563+00:00\r\n\r\n'
2025-08-02 13:51:11,465 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 20:51:11.465159+00:00\r\n\r\n'
2025-08-02 13:51:16,903 - mcp.server.sse - DEBUG - Handling POST message
2025-08-02 13:51:16,904 - mcp.server.sse - DEBUG - Parsed session ID: be66ed27-7514-4125-b934-c2b1e6363ef2
2025-08-02 13:51:16,904 - mcp.server.sse - DEBUG - Received JSON: b'{"jsonrpc":"2.0","id":4,"method":"tools/call","params":{"_meta":{"progressToken":4},"name":"submit_basic_calculation_workflow","arguments":{"method":"\\"gfn2-xtb\\"","tasks":["optimize"],"mode":"auto","engine":"omol25","name":"Basic Calculation Workflow","folder_uuid":null,"max_credits":null}}}'
2025-08-02 13:51:16,905 - mcp.server.sse - DEBUG - Validated client message: root=JSONRPCRequest(method='tools/call', params={'_meta': {'progressToken': 4}, 'name': 'submit_basic_calculation_workflow', 'arguments': {'method': '"gfn2-xtb"', 'tasks': ['optimize'], 'mode': 'auto', 'engine': 'omol25', 'name': 'Basic Calculation Workflow', 'folder_uuid': None, 'max_credits': None}}, jsonrpc='2.0', id=4)
2025-08-02 13:51:16,905 - mcp.server.sse - DEBUG - Sending session message to writer: SessionMessage(message=JSONRPCMessage(root=JSONRPCRequest(method='tools/call', params={'_meta': {'progressToken': 4}, 'name': 'submit_basic_calculation_workflow', 'arguments': {'method': '"gfn2-xtb"', 'tasks': ['optimize'], 'mode': 'auto', 'engine': 'omol25', 'name': 'Basic Calculation Workflow', 'folder_uuid': None, 'max_credits': None}}, jsonrpc='2.0', id=4)), metadata=ServerMessageMetadata(related_request_id=None, request_context=<starlette.requests.Request object at 0x10c914320>))
2025-08-02 13:51:16,907 - mcp.server.lowlevel.server - DEBUG - Received message: <mcp.shared.session.RequestResponder object at 0x10c8c59a0>
2025-08-02 13:51:16,908 - mcp.server.lowlevel.server - INFO - Processing request of type CallToolRequest
2025-08-02 13:51:16,908 - mcp.server.lowlevel.server - DEBUG - Dispatching request of type CallToolRequest
2025-08-02 13:51:16,908 - FastMCP.fastmcp.tools.tool_manager - ERROR - Error calling tool 'submit_basic_calculation_workflow': 1 validation error for call[submit_basic_calculation_workflow]
initial_molecule
  Missing required argument [type=missing_argument, input_value={'method': '"gfn2-xtb"', ...ne, 'max_credits': None}, input_type=dict]
    For further information visit https://errors.pydantic.dev/2.11/v/missing_argument
Traceback (most recent call last):
  File "/Users/katherineyenko/Desktop/sandbox/rowan-mcp/.venv/lib/python3.13/site-packages/fastmcp/tools/tool_manager.py", line 131, in call_tool
    return await tool.run(arguments)
           ^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/katherineyenko/Desktop/sandbox/rowan-mcp/.venv/lib/python3.13/site-packages/fastmcp/tools/tool.py", line 187, in run
    result = type_adapter.validate_python(arguments)
  File "/Users/katherineyenko/Desktop/sandbox/rowan-mcp/.venv/lib/python3.13/site-packages/pydantic/type_adapter.py", line 421, in validate_python
    return self.validator.validate_python(
           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^
        object,
        ^^^^^^^
    ...<5 lines>...
        by_name=by_name,
        ^^^^^^^^^^^^^^^^
    )
    ^
pydantic_core._pydantic_core.ValidationError: 1 validation error for call[submit_basic_calculation_workflow]
initial_molecule
  Missing required argument [type=missing_argument, input_value={'method': '"gfn2-xtb"', ...ne, 'max_credits': None}, input_type=dict]
    For further information visit https://errors.pydantic.dev/2.11/v/missing_argument
2025-08-02 13:51:16,946 - mcp.server.lowlevel.server - DEBUG - Response sent
2025-08-02 13:51:16,946 - mcp.server.sse - DEBUG - Sending message via SSE: SessionMessage(message=JSONRPCMessage(root=JSONRPCResponse(jsonrpc='2.0', id=4, result={'content': [{'type': 'text', 'text': 'Error calling tool \'submit_basic_calculation_workflow\': 1 validation error for call[submit_basic_calculation_workflow]\ninitial_molecule\n  Missing required argument [type=missing_argument, input_value={\'method\': \'"gfn2-xtb"\', ...ne, \'max_credits\': None}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/missing_argument'}], 'isError': True})), metadata=None)
2025-08-02 13:51:16,947 - sse_starlette.sse - DEBUG - chunk: b'event: message\r\ndata: {"jsonrpc":"2.0","id":4,"result":{"content":[{"type":"text","text":"Error calling tool \'submit_basic_calculation_workflow\': 1 validation error for call[submit_basic_calculation_workflow]\\ninitial_molecule\\n  Missing required argument [type=missing_argument, input_value={\'method\': \'\\"gfn2-xtb\\"\', ...ne, \'max_credits\': None}, input_type=dict]\\n    For further information visit https://errors.pydantic.dev/2.11/v/missing_argument"}],"isError":true}}\r\n\r\n'
2025-08-02 13:51:24,453 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 20:51:24.452040+00:00\r\n\r\n'
2025-08-02 13:51:24,759 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 20:51:24.758820+00:00\r\n\r\n'
2025-08-02 13:51:26,467 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 20:51:26.466977+00:00\r\n\r\n'
2025-08-02 13:51:29,036 - mcp.server.sse - DEBUG - Handling POST message
2025-08-02 13:51:29,036 - mcp.server.sse - DEBUG - Parsed session ID: be66ed27-7514-4125-b934-c2b1e6363ef2
2025-08-02 13:51:29,036 - mcp.server.sse - DEBUG - Received JSON: b'{"jsonrpc":"2.0","id":5,"method":"tools/call","params":{"_meta":{"progressToken":5},"name":"submit_basic_calculation_workflow","arguments":{"method":"gfn2-xtb","tasks":["optimize"],"mode":"auto","engine":"omol25","name":"Basic Calculation Workflow","folder_uuid":null,"max_credits":null}}}'
2025-08-02 13:51:29,036 - mcp.server.sse - DEBUG - Validated client message: root=JSONRPCRequest(method='tools/call', params={'_meta': {'progressToken': 5}, 'name': 'submit_basic_calculation_workflow', 'arguments': {'method': 'gfn2-xtb', 'tasks': ['optimize'], 'mode': 'auto', 'engine': 'omol25', 'name': 'Basic Calculation Workflow', 'folder_uuid': None, 'max_credits': None}}, jsonrpc='2.0', id=5)
2025-08-02 13:51:29,036 - mcp.server.sse - DEBUG - Sending session message to writer: SessionMessage(message=JSONRPCMessage(root=JSONRPCRequest(method='tools/call', params={'_meta': {'progressToken': 5}, 'name': 'submit_basic_calculation_workflow', 'arguments': {'method': 'gfn2-xtb', 'tasks': ['optimize'], 'mode': 'auto', 'engine': 'omol25', 'name': 'Basic Calculation Workflow', 'folder_uuid': None, 'max_credits': None}}, jsonrpc='2.0', id=5)), metadata=ServerMessageMetadata(related_request_id=None, request_context=<starlette.requests.Request object at 0x10c914290>))
2025-08-02 13:51:29,037 - mcp.server.lowlevel.server - DEBUG - Received message: <mcp.shared.session.RequestResponder object at 0x10c8c4f50>
2025-08-02 13:51:29,037 - mcp.server.lowlevel.server - INFO - Processing request of type CallToolRequest
2025-08-02 13:51:29,037 - mcp.server.lowlevel.server - DEBUG - Dispatching request of type CallToolRequest
2025-08-02 13:51:29,037 - FastMCP.fastmcp.tools.tool_manager - ERROR - Error calling tool 'submit_basic_calculation_workflow': 1 validation error for call[submit_basic_calculation_workflow]
initial_molecule
  Missing required argument [type=missing_argument, input_value={'method': 'gfn2-xtb', 't...ne, 'max_credits': None}, input_type=dict]
    For further information visit https://errors.pydantic.dev/2.11/v/missing_argument
Traceback (most recent call last):
  File "/Users/katherineyenko/Desktop/sandbox/rowan-mcp/.venv/lib/python3.13/site-packages/fastmcp/tools/tool_manager.py", line 131, in call_tool
    return await tool.run(arguments)
           ^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/katherineyenko/Desktop/sandbox/rowan-mcp/.venv/lib/python3.13/site-packages/fastmcp/tools/tool.py", line 187, in run
    result = type_adapter.validate_python(arguments)
  File "/Users/katherineyenko/Desktop/sandbox/rowan-mcp/.venv/lib/python3.13/site-packages/pydantic/type_adapter.py", line 421, in validate_python
    return self.validator.validate_python(
           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^
        object,
        ^^^^^^^
    ...<5 lines>...
        by_name=by_name,
        ^^^^^^^^^^^^^^^^
    )
    ^
pydantic_core._pydantic_core.ValidationError: 1 validation error for call[submit_basic_calculation_workflow]
initial_molecule
  Missing required argument [type=missing_argument, input_value={'method': 'gfn2-xtb', 't...ne, 'max_credits': None}, input_type=dict]
    For further information visit https://errors.pydantic.dev/2.11/v/missing_argument
2025-08-02 13:51:29,084 - mcp.server.lowlevel.server - DEBUG - Response sent
2025-08-02 13:51:29,084 - mcp.server.sse - DEBUG - Sending message via SSE: SessionMessage(message=JSONRPCMessage(root=JSONRPCResponse(jsonrpc='2.0', id=5, result={'content': [{'type': 'text', 'text': "Error calling tool 'submit_basic_calculation_workflow': 1 validation error for call[submit_basic_calculation_workflow]\ninitial_molecule\n  Missing required argument [type=missing_argument, input_value={'method': 'gfn2-xtb', 't...ne, 'max_credits': None}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/missing_argument"}], 'isError': True})), metadata=None)
2025-08-02 13:51:29,084 - sse_starlette.sse - DEBUG - chunk: b'event: message\r\ndata: {"jsonrpc":"2.0","id":5,"result":{"content":[{"type":"text","text":"Error calling tool \'submit_basic_calculation_workflow\': 1 validation error for call[submit_basic_calculation_workflow]\\ninitial_molecule\\n  Missing required argument [type=missing_argument, input_value={\'method\': \'gfn2-xtb\', \'t...ne, \'max_credits\': None}, input_type=dict]\\n    For further information visit https://errors.pydantic.dev/2.11/v/missing_argument"}],"isError":true}}\r\n\r\n'
2025-08-02 13:51:39,455 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 20:51:39.455758+00:00\r\n\r\n'
2025-08-02 13:51:39,761 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 20:51:39.760822+00:00\r\n\r\n'
2025-08-02 13:51:41,470 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 20:51:41.470006+00:00\r\n\r\n'
2025-08-02 13:51:54,457 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 20:51:54.457715+00:00\r\n\r\n'
2025-08-02 13:51:54,764 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 20:51:54.764070+00:00\r\n\r\n'
2025-08-02 13:51:56,471 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 20:51:56.471645+00:00\r\n\r\n'
2025-08-02 13:52:09,460 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 20:52:09.459819+00:00\r\n\r\n'
2025-08-02 13:52:09,765 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 20:52:09.765402+00:00\r\n\r\n'
2025-08-02 13:52:11,473 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 20:52:11.473664+00:00\r\n\r\n'
2025-08-02 13:52:24,462 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 20:52:24.461963+00:00\r\n\r\n'
2025-08-02 13:52:24,767 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 20:52:24.767443+00:00\r\n\r\n'
2025-08-02 13:52:26,476 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 20:52:26.476078+00:00\r\n\r\n'
2025-08-02 13:52:31,006 - mcp.server.sse - DEBUG - Handling POST message
2025-08-02 13:52:31,006 - mcp.server.sse - DEBUG - Parsed session ID: be66ed27-7514-4125-b934-c2b1e6363ef2
2025-08-02 13:52:31,006 - mcp.server.sse - DEBUG - Received JSON: b'{"jsonrpc":"2.0","id":6,"method":"tools/call","params":{"_meta":{"progressToken":6},"name":"submit_basic_calculation_workflow","arguments":{"method":"gfn2-xtb","tasks":["optimize"],"mode":"auto","engine":"xtb","name":"Basic Calculation Workflow","folder_uuid":null,"max_credits":null}}}'
2025-08-02 13:52:31,006 - mcp.server.sse - DEBUG - Validated client message: root=JSONRPCRequest(method='tools/call', params={'_meta': {'progressToken': 6}, 'name': 'submit_basic_calculation_workflow', 'arguments': {'method': 'gfn2-xtb', 'tasks': ['optimize'], 'mode': 'auto', 'engine': 'xtb', 'name': 'Basic Calculation Workflow', 'folder_uuid': None, 'max_credits': None}}, jsonrpc='2.0', id=6)
2025-08-02 13:52:31,006 - mcp.server.sse - DEBUG - Sending session message to writer: SessionMessage(message=JSONRPCMessage(root=JSONRPCRequest(method='tools/call', params={'_meta': {'progressToken': 6}, 'name': 'submit_basic_calculation_workflow', 'arguments': {'method': 'gfn2-xtb', 'tasks': ['optimize'], 'mode': 'auto', 'engine': 'xtb', 'name': 'Basic Calculation Workflow', 'folder_uuid': None, 'max_credits': None}}, jsonrpc='2.0', id=6)), metadata=ServerMessageMetadata(related_request_id=None, request_context=<starlette.requests.Request object at 0x10c914320>))
2025-08-02 13:52:31,007 - mcp.server.lowlevel.server - DEBUG - Received message: <mcp.shared.session.RequestResponder object at 0x10c8cb070>
2025-08-02 13:52:31,008 - mcp.server.lowlevel.server - INFO - Processing request of type CallToolRequest
2025-08-02 13:52:31,008 - mcp.server.lowlevel.server - DEBUG - Dispatching request of type CallToolRequest
2025-08-02 13:52:31,008 - FastMCP.fastmcp.tools.tool_manager - ERROR - Error calling tool 'submit_basic_calculation_workflow': 1 validation error for call[submit_basic_calculation_workflow]
initial_molecule
  Missing required argument [type=missing_argument, input_value={'method': 'gfn2-xtb', 't...ne, 'max_credits': None}, input_type=dict]
    For further information visit https://errors.pydantic.dev/2.11/v/missing_argument
Traceback (most recent call last):
  File "/Users/katherineyenko/Desktop/sandbox/rowan-mcp/.venv/lib/python3.13/site-packages/fastmcp/tools/tool_manager.py", line 131, in call_tool
    return await tool.run(arguments)
           ^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/katherineyenko/Desktop/sandbox/rowan-mcp/.venv/lib/python3.13/site-packages/fastmcp/tools/tool.py", line 187, in run
    result = type_adapter.validate_python(arguments)
  File "/Users/katherineyenko/Desktop/sandbox/rowan-mcp/.venv/lib/python3.13/site-packages/pydantic/type_adapter.py", line 421, in validate_python
    return self.validator.validate_python(
           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^
        object,
        ^^^^^^^
    ...<5 lines>...
        by_name=by_name,
        ^^^^^^^^^^^^^^^^
    )
    ^
pydantic_core._pydantic_core.ValidationError: 1 validation error for call[submit_basic_calculation_workflow]
initial_molecule
  Missing required argument [type=missing_argument, input_value={'method': 'gfn2-xtb', 't...ne, 'max_credits': None}, input_type=dict]
    For further information visit https://errors.pydantic.dev/2.11/v/missing_argument
2025-08-02 13:52:31,054 - mcp.server.lowlevel.server - DEBUG - Response sent
2025-08-02 13:52:31,054 - mcp.server.sse - DEBUG - Sending message via SSE: SessionMessage(message=JSONRPCMessage(root=JSONRPCResponse(jsonrpc='2.0', id=6, result={'content': [{'type': 'text', 'text': "Error calling tool 'submit_basic_calculation_workflow': 1 validation error for call[submit_basic_calculation_workflow]\ninitial_molecule\n  Missing required argument [type=missing_argument, input_value={'method': 'gfn2-xtb', 't...ne, 'max_credits': None}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/missing_argument"}], 'isError': True})), metadata=None)
2025-08-02 13:52:31,054 - sse_starlette.sse - DEBUG - chunk: b'event: message\r\ndata: {"jsonrpc":"2.0","id":6,"result":{"content":[{"type":"text","text":"Error calling tool \'submit_basic_calculation_workflow\': 1 validation error for call[submit_basic_calculation_workflow]\\ninitial_molecule\\n  Missing required argument [type=missing_argument, input_value={\'method\': \'gfn2-xtb\', \'t...ne, \'max_credits\': None}, input_type=dict]\\n    For further information visit https://errors.pydantic.dev/2.11/v/missing_argument"}],"isError":true}}\r\n\r\n'
2025-08-02 13:52:39,464 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 20:52:39.464072+00:00\r\n\r\n'
2025-08-02 13:52:39,770 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 20:52:39.770036+00:00\r\n\r\n'
2025-08-02 13:52:41,479 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 20:52:41.478788+00:00\r\n\r\n'
2025-08-02 13:52:49,387 - mcp.server.sse - DEBUG - Handling POST message
2025-08-02 13:52:49,387 - mcp.server.sse - DEBUG - Parsed session ID: be66ed27-7514-4125-b934-c2b1e6363ef2
2025-08-02 13:52:49,387 - mcp.server.sse - DEBUG - Received JSON: b'{"jsonrpc":"2.0","id":7,"method":"tools/call","params":{"_meta":{"progressToken":7},"name":"submit_basic_calculation_workflow","arguments":{"initial_molecule":"CCCC","method":"gfn2-xtb","tasks":["optimize"],"mode":"auto","engine":"xtb","name":"Basic Calculation Workflow","folder_uuid":null,"max_credits":null}}}'
2025-08-02 13:52:49,388 - mcp.server.sse - DEBUG - Validated client message: root=JSONRPCRequest(method='tools/call', params={'_meta': {'progressToken': 7}, 'name': 'submit_basic_calculation_workflow', 'arguments': {'initial_molecule': 'CCCC', 'method': 'gfn2-xtb', 'tasks': ['optimize'], 'mode': 'auto', 'engine': 'xtb', 'name': 'Basic Calculation Workflow', 'folder_uuid': None, 'max_credits': None}}, jsonrpc='2.0', id=7)
2025-08-02 13:52:49,388 - mcp.server.sse - DEBUG - Sending session message to writer: SessionMessage(message=JSONRPCMessage(root=JSONRPCRequest(method='tools/call', params={'_meta': {'progressToken': 7}, 'name': 'submit_basic_calculation_workflow', 'arguments': {'initial_molecule': 'CCCC', 'method': 'gfn2-xtb', 'tasks': ['optimize'], 'mode': 'auto', 'engine': 'xtb', 'name': 'Basic Calculation Workflow', 'folder_uuid': None, 'max_credits': None}}, jsonrpc='2.0', id=7)), metadata=ServerMessageMetadata(related_request_id=None, request_context=<starlette.requests.Request object at 0x10c914290>))
2025-08-02 13:52:49,389 - mcp.server.lowlevel.server - DEBUG - Received message: <mcp.shared.session.RequestResponder object at 0x10c8c92b0>
2025-08-02 13:52:49,389 - mcp.server.lowlevel.server - INFO - Processing request of type CallToolRequest
2025-08-02 13:52:49,389 - mcp.server.lowlevel.server - DEBUG - Dispatching request of type CallToolRequest
2025-08-02 13:52:49,391 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - INFO - ============================================================
2025-08-02 13:52:49,391 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - INFO - submit_basic_calculation_workflow called with:
2025-08-02 13:52:49,391 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - INFO -   method: gfn2-xtb (type: <class 'str'>)
2025-08-02 13:52:49,391 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - INFO -   tasks: ['optimize'] (type: <class 'list'>)
2025-08-02 13:52:49,391 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - INFO -   mode: auto
2025-08-02 13:52:49,391 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - INFO -   engine: xtb
2025-08-02 13:52:49,391 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - INFO -   name: Basic Calculation Workflow
2025-08-02 13:52:49,391 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - INFO -   initial_molecule: 'CCCC' (SMILES string)
2025-08-02 13:52:49,391 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - DEBUG - Converting SMILES string to StJamesMolecule
2025-08-02 13:52:49,397 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - DEBUG - Successfully converted to StJamesMolecule
2025-08-02 13:52:49,398 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - INFO - Calling rowan.submit_basic_calculation_workflow...
2025-08-02 13:52:49,410 - httpcore.connection - DEBUG - connect_tcp.started host='api.rowansci.com' port=443 local_address=None timeout=5.0 socket_options=None
2025-08-02 13:52:49,504 - httpcore.connection - DEBUG - connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x10c9260d0>
2025-08-02 13:52:49,504 - httpcore.connection - DEBUG - start_tls.started ssl_context=<ssl.SSLContext object at 0x10c889eb0> server_hostname='api.rowansci.com' timeout=5.0
2025-08-02 13:52:49,621 - httpcore.connection - DEBUG - start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x10c97b360>
2025-08-02 13:52:49,622 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-08-02 13:52:49,623 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-08-02 13:52:49,623 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-08-02 13:52:49,623 - httpcore.http11 - DEBUG - send_request_body.complete
2025-08-02 13:52:49,624 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-08-02 13:52:50,483 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sat, 02 Aug 2025 20:52:50 GMT'), (b'Content-Type', b'application/json'), (b'Content-Length', b'2073'), (b'Connection', b'keep-alive'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains')])
2025-08-02 13:52:50,483 - httpx - INFO - HTTP Request: POST https://api.rowansci.com/workflow "HTTP/1.1 200 OK"
2025-08-02 13:52:50,483 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-08-02 13:52:50,483 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-08-02 13:52:50,483 - httpcore.http11 - DEBUG - response_closed.started
2025-08-02 13:52:50,483 - httpcore.http11 - DEBUG - response_closed.complete
2025-08-02 13:52:50,483 - httpcore.connection - DEBUG - close.started
2025-08-02 13:52:50,483 - httpcore.connection - DEBUG - close.complete
2025-08-02 13:52:50,484 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - INFO - SUCCESS: Workflow submitted with UUID: e5f3c8a4-c32a-45e6-ac4e-16cfd0717ac7
2025-08-02 13:52:50,484 - mcp.server.lowlevel.server - DEBUG - Response sent
2025-08-02 13:52:50,484 - mcp.server.sse - DEBUG - Sending message via SSE: SessionMessage(message=JSONRPCMessage(root=JSONRPCResponse(jsonrpc='2.0', id=7, result={'content': [{'type': 'text', 'text': '{\n  "name": "Basic Calculation Workflow",\n  "uuid": "e5f3c8a4-c32a-45e6-ac4e-16cfd0717ac7",\n  "created_at": "2025-08-02T20:52:49.766590Z",\n  "updated_at": null,\n  "started_at": null,\n  "completed_at": null,\n  "object_status": 0,\n  "parent_uuid": "e5c3ce65-43df-4ab3-90e0-a56f42584cc0",\n  "notes": "",\n  "starred": false,\n  "public": false,\n  "object_type": "basic_calculation",\n  "object_data": {\n    "settings": {\n      "method": "GFN2_XTB",\n      "tasks": [\n        "optimize"\n      ],\n      "mode": "auto"\n    },\n    "engine": "xtb",\n    "initial_molecule": {\n      "charge": 0,\n      "multiplicity": 1,\n      "atoms": [\n        {\n          "atomic_number": 6,\n          "position": [\n            -1.86762893,\n            -0.13012499,\n            -0.2131859\n          ]\n        },\n        {\n          "atomic_number": 6,\n          "position": [\n            -0.63032717,\n            -0.18027503,\n            0.668866\n          ]\n        },\n        {\n          "atomic_number": 6,\n          "position": [\n            0.63032604,\n            0.18027639,\n            -0.114436\n          ]\n        },\n        {\n          "atomic_number": 6,\n          "position": [\n            1.86762955,\n            0.13012222,\n            0.76761199\n          ]\n        },\n        {\n          "atomic_number": 1,\n          "position": [\n            -2.7578718,\n            -0.39146072,\n            0.36741114\n          ]\n        },\n        {\n          "atomic_number": 1,\n          "position": [\n            -2.01414814,\n            0.87274707,\n            -0.62686313\n          ]\n        },\n        {\n          "atomic_number": 1,\n          "position": [\n            -1.78518452,\n            -0.8366946,\n            -1.04523826\n          ]\n        },\n        {\n          "atomic_number": 1,\n          "position": [\n            -0.75856968,\n            0.51320342,\n            1.50816505\n          ]\n        },\n        {\n          "atomic_number": 1,\n          "position": [\n            -0.53090199,\n            -1.18661607,\n            1.09215469\n          ]\n        },\n        {\n          "atomic_number": 1,\n          "position": [\n            0.75856929,\n            -0.51319817,\n            -0.95373764\n          ]\n        },\n        {\n          "atomic_number": 1,\n          "position": [\n            0.53090159,\n            1.18661899,\n            -0.53772214\n          ]\n        },\n        {\n          "atomic_number": 1,\n          "position": [\n            1.78518681,\n            0.83669225,\n            1.59966357\n          ]\n        },\n        {\n          "atomic_number": 1,\n          "position": [\n            2.01414891,\n            -0.87275127,\n            1.18128539\n          ]\n        },\n        {\n          "atomic_number": 1,\n          "position": [\n            2.75787005,\n            0.39146051,\n            0.18701245\n          ]\n        }\n      ],\n      "cell": null,\n      "energy": null,\n      "scf_iterations": null,\n      "scf_completed": null,\n      "elapsed": null,\n      "homo_lumo_gap": null,\n      "gradient": null,\n      "stress": null,\n      "velocities": null,\n      "mulliken_charges": null,\n      "mulliken_spin_densities": null,\n      "dipole": null,\n      "vibrational_modes": null,\n      "zero_point_energy": null,\n      "thermal_energy_corr": null,\n      "thermal_enthalpy_corr": null,\n      "thermal_free_energy_corr": null,\n      "smiles": "CCCC",\n      "calculation_index": null\n    }\n  },\n  "email_when_complete": false,\n  "max_credits": null,\n  "elapsed": 0.0,\n  "credits_charged": 0.0\n}'}], 'isError': False})), metadata=None)
2025-08-02 13:52:50,484 - sse_starlette.sse - DEBUG - chunk: b'event: message\r\ndata: {"jsonrpc":"2.0","id":7,"result":{"content":[{"type":"text","text":"{\\n  \\"name\\": \\"Basic Calculation Workflow\\",\\n  \\"uuid\\": \\"e5f3c8a4-c32a-45e6-ac4e-16cfd0717ac7\\",\\n  \\"created_at\\": \\"2025-08-02T20:52:49.766590Z\\",\\n  \\"updated_at\\": null,\\n  \\"started_at\\": null,\\n  \\"completed_at\\": null,\\n  \\"object_status\\": 0,\\n  \\"parent_uuid\\": \\"e5c3ce65-43df-4ab3-90e0-a56f42584cc0\\",\\n  \\"notes\\": \\"\\",\\n  \\"starred\\": false,\\n  \\"public\\": false,\\n  \\"object_type\\": \\"basic_calculation\\",\\n  \\"object_data\\": {\\n    \\"settings\\": {\\n      \\"method\\": \\"GFN2_XTB\\",\\n      \\"tasks\\": [\\n        \\"optimize\\"\\n      ],\\n      \\"mode\\": \\"auto\\"\\n    },\\n    \\"engine\\": \\"xtb\\",\\n    \\"initial_molecule\\": {\\n      \\"charge\\": 0,\\n      \\"multiplicity\\": 1,\\n      \\"atoms\\": [\\n        {\\n          \\"atomic_number\\": 6,\\n          \\"position\\": [\\n            -1.86762893,\\n            -0.13012499,\\n            -0.2131859\\n          ]\\n        },\\n        {\\n          \\"atomic_number\\": 6,\\n          \\"position\\": [\\n            -0.63032717,\\n            -0.18027503,\\n            0.668866\\n          ]\\n        },\\n        {\\n          \\"atomic_number\\": 6,\\n          \\"position\\": [\\n            0.63032604,\\n            0.18027639,\\n            -0.114436\\n          ]\\n        },\\n        {\\n          \\"atomic_number\\": 6,\\n          \\"position\\": [\\n            1.86762955,\\n            0.13012222,\\n            0.76761199\\n          ]\\n        },\\n        {\\n          \\"atomic_number\\": 1,\\n          \\"position\\": [\\n            -2.7578718,\\n            -0.39146072,\\n            0.36741114\\n          ]\\n        },\\n        {\\n          \\"atomic_number\\": 1,\\n          \\"position\\": [\\n            -2.01414814,\\n            0.87274707,\\n            -0.62686313\\n          ]\\n        },\\n        {\\n          \\"atomic_number\\": 1,\\n          \\"position\\": [\\n            -1.78518452,\\n            -0.8366946,\\n            -1.04523826\\n          ]\\n        },\\n        {\\n          \\"atomic_number\\": 1,\\n          \\"position\\": [\\n            -0.75856968,\\n            0.51320342,\\n            1.50816505\\n          ]\\n        },\\n        {\\n          \\"atomic_number\\": 1,\\n          \\"position\\": [\\n            -0.53090199,\\n            -1.18661607,\\n            1.09215469\\n          ]\\n        },\\n        {\\n          \\"atomic_number\\": 1,\\n          \\"position\\": [\\n            0.75856929,\\n            -0.51319817,\\n            -0.95373764\\n          ]\\n        },\\n        {\\n          \\"atomic_number\\": 1,\\n          \\"position\\": [\\n            0.53090159,\\n            1.18661899,\\n            -0.53772214\\n          ]\\n        },\\n        {\\n          \\"atomic_number\\": 1,\\n          \\"position\\": [\\n            1.78518681,\\n            0.83669225,\\n            1.59966357\\n          ]\\n        },\\n        {\\n          \\"atomic_number\\": 1,\\n          \\"position\\": [\\n            2.01414891,\\n            -0.87275127,\\n            1.18128539\\n          ]\\n        },\\n        {\\n          \\"atomic_number\\": 1,\\n          \\"position\\": [\\n            2.75787005,\\n            0.39146051,\\n            0.18701245\\n          ]\\n        }\\n      ],\\n      \\"cell\\": null,\\n      \\"energy\\": null,\\n      \\"scf_iterations\\": null,\\n      \\"scf_completed\\": null,\\n      \\"elapsed\\": null,\\n      \\"homo_lumo_gap\\": null,\\n      \\"gradient\\": null,\\n      \\"stress\\": null,\\n      \\"velocities\\": null,\\n      \\"mulliken_charges\\": null,\\n      \\"mulliken_spin_densities\\": null,\\n      \\"dipole\\": null,\\n      \\"vibrational_modes\\": null,\\n      \\"zero_point_energy\\": null,\\n      \\"thermal_energy_corr\\": null,\\n      \\"thermal_enthalpy_corr\\": null,\\n      \\"thermal_free_energy_corr\\": null,\\n      \\"smiles\\": \\"CCCC\\",\\n      \\"calculation_index\\": null\\n    }\\n  },\\n  \\"email_when_complete\\": false,\\n  \\"max_credits\\": null,\\n  \\"elapsed\\": 0.0,\\n  \\"credits_charged\\": 0.0\\n}"}],"isError":false}}\r\n\r\n'
2025-08-02 13:52:54,466 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 20:52:54.466012+00:00\r\n\r\n'
2025-08-02 13:52:54,776 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 20:52:54.776625+00:00\r\n\r\n'
2025-08-02 13:52:56,481 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 20:52:56.481618+00:00\r\n\r\n'
2025-08-02 13:53:09,468 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 20:53:09.468205+00:00\r\n\r\n'
2025-08-02 13:53:09,779 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 20:53:09.779309+00:00\r\n\r\n'
2025-08-02 13:53:11,483 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 20:53:11.483750+00:00\r\n\r\n'
2025-08-02 13:53:24,471 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 20:53:24.471050+00:00\r\n\r\n'
2025-08-02 13:53:24,782 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 20:53:24.782596+00:00\r\n\r\n'
2025-08-02 13:53:25,307 - mcp.server.sse - DEBUG - Handling POST message
2025-08-02 13:53:25,308 - mcp.server.sse - DEBUG - Parsed session ID: be66ed27-7514-4125-b934-c2b1e6363ef2
2025-08-02 13:53:25,308 - mcp.server.sse - DEBUG - Received JSON: b'{"jsonrpc":"2.0","id":8,"method":"tools/call","params":{"_meta":{"progressToken":8},"name":"submit_basic_calculation_workflow","arguments":{"initial_molecule":"CCCC","method":"gfn2-xtb","tasks":["optimize"],"mode":"auto","engine":"xtb","name":"Basic Calculation Workflow","folder_uuid":null,"max_credits":null}}}'
2025-08-02 13:53:25,308 - mcp.server.sse - DEBUG - Validated client message: root=JSONRPCRequest(method='tools/call', params={'_meta': {'progressToken': 8}, 'name': 'submit_basic_calculation_workflow', 'arguments': {'initial_molecule': 'CCCC', 'method': 'gfn2-xtb', 'tasks': ['optimize'], 'mode': 'auto', 'engine': 'xtb', 'name': 'Basic Calculation Workflow', 'folder_uuid': None, 'max_credits': None}}, jsonrpc='2.0', id=8)
2025-08-02 13:53:25,308 - mcp.server.sse - DEBUG - Sending session message to writer: SessionMessage(message=JSONRPCMessage(root=JSONRPCRequest(method='tools/call', params={'_meta': {'progressToken': 8}, 'name': 'submit_basic_calculation_workflow', 'arguments': {'initial_molecule': 'CCCC', 'method': 'gfn2-xtb', 'tasks': ['optimize'], 'mode': 'auto', 'engine': 'xtb', 'name': 'Basic Calculation Workflow', 'folder_uuid': None, 'max_credits': None}}, jsonrpc='2.0', id=8)), metadata=ServerMessageMetadata(related_request_id=None, request_context=<starlette.requests.Request object at 0x10c9144d0>))
2025-08-02 13:53:25,309 - mcp.server.lowlevel.server - DEBUG - Received message: <mcp.shared.session.RequestResponder object at 0x10c8b2750>
2025-08-02 13:53:25,309 - mcp.server.lowlevel.server - INFO - Processing request of type CallToolRequest
2025-08-02 13:53:25,310 - mcp.server.lowlevel.server - DEBUG - Dispatching request of type CallToolRequest
2025-08-02 13:53:25,311 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - INFO - ============================================================
2025-08-02 13:53:25,311 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - INFO - submit_basic_calculation_workflow called with:
2025-08-02 13:53:25,311 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - INFO -   method: gfn2-xtb (type: <class 'str'>)
2025-08-02 13:53:25,311 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - INFO -   tasks: ['optimize'] (type: <class 'list'>)
2025-08-02 13:53:25,311 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - INFO -   mode: auto
2025-08-02 13:53:25,312 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - INFO -   engine: xtb
2025-08-02 13:53:25,312 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - INFO -   name: Basic Calculation Workflow
2025-08-02 13:53:25,312 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - INFO -   initial_molecule: 'CCCC' (SMILES string)
2025-08-02 13:53:25,312 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - DEBUG - Converting SMILES string to StJamesMolecule
2025-08-02 13:53:25,317 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - DEBUG - Successfully converted to StJamesMolecule
2025-08-02 13:53:25,317 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - INFO - Calling rowan.submit_basic_calculation_workflow...
2025-08-02 13:53:25,329 - httpcore.connection - DEBUG - connect_tcp.started host='api.rowansci.com' port=443 local_address=None timeout=5.0 socket_options=None
2025-08-02 13:53:25,449 - httpcore.connection - DEBUG - connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x10c97ac40>
2025-08-02 13:53:25,449 - httpcore.connection - DEBUG - start_tls.started ssl_context=<ssl.SSLContext object at 0x10c9143b0> server_hostname='api.rowansci.com' timeout=5.0
2025-08-02 13:53:25,585 - httpcore.connection - DEBUG - start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x10c8c2210>
2025-08-02 13:53:25,586 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-08-02 13:53:25,586 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-08-02 13:53:25,586 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-08-02 13:53:25,586 - httpcore.http11 - DEBUG - send_request_body.complete
2025-08-02 13:53:25,586 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-08-02 13:53:26,125 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sat, 02 Aug 2025 20:53:26 GMT'), (b'Content-Type', b'application/json'), (b'Content-Length', b'2074'), (b'Connection', b'keep-alive'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains')])
2025-08-02 13:53:26,126 - httpx - INFO - HTTP Request: POST https://api.rowansci.com/workflow "HTTP/1.1 200 OK"
2025-08-02 13:53:26,126 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-08-02 13:53:26,126 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-08-02 13:53:26,126 - httpcore.http11 - DEBUG - response_closed.started
2025-08-02 13:53:26,126 - httpcore.http11 - DEBUG - response_closed.complete
2025-08-02 13:53:26,126 - httpcore.connection - DEBUG - close.started
2025-08-02 13:53:26,126 - httpcore.connection - DEBUG - close.complete
2025-08-02 13:53:26,126 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - INFO - SUCCESS: Workflow submitted with UUID: 0b510e9d-a580-4186-af26-a4bcd7ceaba9
2025-08-02 13:53:26,127 - mcp.server.lowlevel.server - DEBUG - Response sent
2025-08-02 13:53:26,127 - mcp.server.sse - DEBUG - Sending message via SSE: SessionMessage(message=JSONRPCMessage(root=JSONRPCResponse(jsonrpc='2.0', id=8, result={'content': [{'type': 'text', 'text': '{\n  "name": "Basic Calculation Workflow",\n  "uuid": "0b510e9d-a580-4186-af26-a4bcd7ceaba9",\n  "created_at": "2025-08-02T20:53:25.752042Z",\n  "updated_at": null,\n  "started_at": null,\n  "completed_at": null,\n  "object_status": 0,\n  "parent_uuid": "e5c3ce65-43df-4ab3-90e0-a56f42584cc0",\n  "notes": "",\n  "starred": false,\n  "public": false,\n  "object_type": "basic_calculation",\n  "object_data": {\n    "settings": {\n      "method": "GFN2_XTB",\n      "tasks": [\n        "optimize"\n      ],\n      "mode": "auto"\n    },\n    "engine": "xtb",\n    "initial_molecule": {\n      "charge": 0,\n      "multiplicity": 1,\n      "atoms": [\n        {\n          "atomic_number": 6,\n          "position": [\n            1.51043944,\n            0.61835589,\n            0.19660175\n          ]\n        },\n        {\n          "atomic_number": 6,\n          "position": [\n            0.75241042,\n            -0.58009286,\n            -0.35321524\n          ]\n        },\n        {\n          "atomic_number": 6,\n          "position": [\n            -0.7159172,\n            -0.28333627,\n            -0.65922199\n          ]\n        },\n        {\n          "atomic_number": 6,\n          "position": [\n            -1.53836053,\n            0.042257,\n            0.57801761\n          ]\n        },\n        {\n          "atomic_number": 1,\n          "position": [\n            1.13211288,\n            0.91591273,\n            1.17894237\n          ]\n        },\n        {\n          "atomic_number": 1,\n          "position": [\n            2.57091914,\n            0.37164287,\n            0.31084329\n          ]\n        },\n        {\n          "atomic_number": 1,\n          "position": [\n            1.4332494,\n            1.47597854,\n            -0.47911451\n          ]\n        },\n        {\n          "atomic_number": 1,\n          "position": [\n            0.82494855,\n            -1.41335022,\n            0.35540883\n          ]\n        },\n        {\n          "atomic_number": 1,\n          "position": [\n            1.24136741,\n            -0.90742678,\n            -1.27850856\n          ]\n        },\n        {\n          "atomic_number": 1,\n          "position": [\n            -0.78826313,\n            0.54537098,\n            -1.37318125\n          ]\n        },\n        {\n          "atomic_number": 1,\n          "position": [\n            -1.15390858,\n            -1.16184567,\n            -1.1478723\n          ]\n        },\n        {\n          "atomic_number": 1,\n          "position": [\n            -1.21215242,\n            0.97784015,\n            1.04163028\n          ]\n        },\n        {\n          "atomic_number": 1,\n          "position": [\n            -2.59323585,\n            0.15637037,\n            0.30829116\n          ]\n        },\n        {\n          "atomic_number": 1,\n          "position": [\n            -1.46360952,\n            -0.75767669,\n            1.32137855\n          ]\n        }\n      ],\n      "cell": null,\n      "energy": null,\n      "scf_iterations": null,\n      "scf_completed": null,\n      "elapsed": null,\n      "homo_lumo_gap": null,\n      "gradient": null,\n      "stress": null,\n      "velocities": null,\n      "mulliken_charges": null,\n      "mulliken_spin_densities": null,\n      "dipole": null,\n      "vibrational_modes": null,\n      "zero_point_energy": null,\n      "thermal_energy_corr": null,\n      "thermal_enthalpy_corr": null,\n      "thermal_free_energy_corr": null,\n      "smiles": "CCCC",\n      "calculation_index": null\n    }\n  },\n  "email_when_complete": false,\n  "max_credits": null,\n  "elapsed": 0.0,\n  "credits_charged": 0.0\n}'}], 'isError': False})), metadata=None)
2025-08-02 13:53:26,127 - sse_starlette.sse - DEBUG - chunk: b'event: message\r\ndata: {"jsonrpc":"2.0","id":8,"result":{"content":[{"type":"text","text":"{\\n  \\"name\\": \\"Basic Calculation Workflow\\",\\n  \\"uuid\\": \\"0b510e9d-a580-4186-af26-a4bcd7ceaba9\\",\\n  \\"created_at\\": \\"2025-08-02T20:53:25.752042Z\\",\\n  \\"updated_at\\": null,\\n  \\"started_at\\": null,\\n  \\"completed_at\\": null,\\n  \\"object_status\\": 0,\\n  \\"parent_uuid\\": \\"e5c3ce65-43df-4ab3-90e0-a56f42584cc0\\",\\n  \\"notes\\": \\"\\",\\n  \\"starred\\": false,\\n  \\"public\\": false,\\n  \\"object_type\\": \\"basic_calculation\\",\\n  \\"object_data\\": {\\n    \\"settings\\": {\\n      \\"method\\": \\"GFN2_XTB\\",\\n      \\"tasks\\": [\\n        \\"optimize\\"\\n      ],\\n      \\"mode\\": \\"auto\\"\\n    },\\n    \\"engine\\": \\"xtb\\",\\n    \\"initial_molecule\\": {\\n      \\"charge\\": 0,\\n      \\"multiplicity\\": 1,\\n      \\"atoms\\": [\\n        {\\n          \\"atomic_number\\": 6,\\n          \\"position\\": [\\n            1.51043944,\\n            0.61835589,\\n            0.19660175\\n          ]\\n        },\\n        {\\n          \\"atomic_number\\": 6,\\n          \\"position\\": [\\n            0.75241042,\\n            -0.58009286,\\n            -0.35321524\\n          ]\\n        },\\n        {\\n          \\"atomic_number\\": 6,\\n          \\"position\\": [\\n            -0.7159172,\\n            -0.28333627,\\n            -0.65922199\\n          ]\\n        },\\n        {\\n          \\"atomic_number\\": 6,\\n          \\"position\\": [\\n            -1.53836053,\\n            0.042257,\\n            0.57801761\\n          ]\\n        },\\n        {\\n          \\"atomic_number\\": 1,\\n          \\"position\\": [\\n            1.13211288,\\n            0.91591273,\\n            1.17894237\\n          ]\\n        },\\n        {\\n          \\"atomic_number\\": 1,\\n          \\"position\\": [\\n            2.57091914,\\n            0.37164287,\\n            0.31084329\\n          ]\\n        },\\n        {\\n          \\"atomic_number\\": 1,\\n          \\"position\\": [\\n            1.4332494,\\n            1.47597854,\\n            -0.47911451\\n          ]\\n        },\\n        {\\n          \\"atomic_number\\": 1,\\n          \\"position\\": [\\n            0.82494855,\\n            -1.41335022,\\n            0.35540883\\n          ]\\n        },\\n        {\\n          \\"atomic_number\\": 1,\\n          \\"position\\": [\\n            1.24136741,\\n            -0.90742678,\\n            -1.27850856\\n          ]\\n        },\\n        {\\n          \\"atomic_number\\": 1,\\n          \\"position\\": [\\n            -0.78826313,\\n            0.54537098,\\n            -1.37318125\\n          ]\\n        },\\n        {\\n          \\"atomic_number\\": 1,\\n          \\"position\\": [\\n            -1.15390858,\\n            -1.16184567,\\n            -1.1478723\\n          ]\\n        },\\n        {\\n          \\"atomic_number\\": 1,\\n          \\"position\\": [\\n            -1.21215242,\\n            0.97784015,\\n            1.04163028\\n          ]\\n        },\\n        {\\n          \\"atomic_number\\": 1,\\n          \\"position\\": [\\n            -2.59323585,\\n            0.15637037,\\n            0.30829116\\n          ]\\n        },\\n        {\\n          \\"atomic_number\\": 1,\\n          \\"position\\": [\\n            -1.46360952,\\n            -0.75767669,\\n            1.32137855\\n          ]\\n        }\\n      ],\\n      \\"cell\\": null,\\n      \\"energy\\": null,\\n      \\"scf_iterations\\": null,\\n      \\"scf_completed\\": null,\\n      \\"elapsed\\": null,\\n      \\"homo_lumo_gap\\": null,\\n      \\"gradient\\": null,\\n      \\"stress\\": null,\\n      \\"velocities\\": null,\\n      \\"mulliken_charges\\": null,\\n      \\"mulliken_spin_densities\\": null,\\n      \\"dipole\\": null,\\n      \\"vibrational_modes\\": null,\\n      \\"zero_point_energy\\": null,\\n      \\"thermal_energy_corr\\": null,\\n      \\"thermal_enthalpy_corr\\": null,\\n      \\"thermal_free_energy_corr\\": null,\\n      \\"smiles\\": \\"CCCC\\",\\n      \\"calculation_index\\": null\\n    }\\n  },\\n  \\"email_when_complete\\": false,\\n  \\"max_credits\\": null,\\n  \\"elapsed\\": 0.0,\\n  \\"credits_charged\\": 0.0\\n}"}],"isError":false}}\r\n\r\n'
2025-08-02 13:53:26,486 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 20:53:26.485981+00:00\r\n\r\n'
2025-08-02 13:53:39,474 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 20:53:39.474391+00:00\r\n\r\n'
2025-08-02 13:53:39,785 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 20:53:39.785534+00:00\r\n\r\n'
2025-08-02 13:53:41,487 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 20:53:41.487675+00:00\r\n\r\n'
2025-08-02 13:53:54,477 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 20:53:54.477509+00:00\r\n\r\n'
2025-08-02 13:53:54,787 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 20:53:54.787305+00:00\r\n\r\n'
2025-08-02 13:53:56,490 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 20:53:56.490757+00:00\r\n\r\n'
2025-08-02 13:54:09,480 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 20:54:09.480322+00:00\r\n\r\n'
2025-08-02 13:54:09,790 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 20:54:09.790617+00:00\r\n\r\n'
2025-08-02 13:54:11,493 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 20:54:11.493498+00:00\r\n\r\n'
2025-08-02 13:54:24,481 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 20:54:24.481021+00:00\r\n\r\n'
2025-08-02 13:54:24,794 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 20:54:24.794114+00:00\r\n\r\n'
2025-08-02 13:54:26,497 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 20:54:26.496905+00:00\r\n\r\n'
2025-08-02 13:54:39,483 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 20:54:39.482772+00:00\r\n\r\n'
2025-08-02 13:54:39,795 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 20:54:39.794823+00:00\r\n\r\n'
2025-08-02 13:54:41,499 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 20:54:41.499160+00:00\r\n\r\n'
2025-08-02 13:54:54,485 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 20:54:54.485360+00:00\r\n\r\n'
2025-08-02 13:54:54,798 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 20:54:54.798062+00:00\r\n\r\n'
2025-08-02 13:54:56,501 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 20:54:56.500840+00:00\r\n\r\n'
2025-08-02 13:55:09,488 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 20:55:09.487915+00:00\r\n\r\n'
2025-08-02 13:55:09,800 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 20:55:09.800802+00:00\r\n\r\n'
2025-08-02 13:55:11,503 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 20:55:11.503281+00:00\r\n\r\n'
2025-08-02 13:55:24,489 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 20:55:24.489835+00:00\r\n\r\n'
2025-08-02 13:55:24,802 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 20:55:24.802325+00:00\r\n\r\n'
2025-08-02 13:55:26,505 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 20:55:26.505098+00:00\r\n\r\n'
2025-08-02 13:55:31,772 - mcp.server.sse - DEBUG - Handling POST message
2025-08-02 13:55:31,772 - mcp.server.sse - DEBUG - Parsed session ID: 9eb62d12-9922-4e00-918e-61d22c022c4b
2025-08-02 13:55:31,773 - mcp.server.sse - DEBUG - Received JSON: b'{"method":"tools/call","params":{"name":"submit_basic_calculation_workflow","arguments":{"initial_molecule":"CCCC","method":"gfn2-xtb","mode":"auto","engine":"xtb","name":"Basic Calculation Workflow"},"_meta":{"progressToken":5}},"jsonrpc":"2.0","id":5}'
2025-08-02 13:55:31,773 - mcp.server.sse - DEBUG - Validated client message: root=JSONRPCRequest(method='tools/call', params={'name': 'submit_basic_calculation_workflow', 'arguments': {'initial_molecule': 'CCCC', 'method': 'gfn2-xtb', 'mode': 'auto', 'engine': 'xtb', 'name': 'Basic Calculation Workflow'}, '_meta': {'progressToken': 5}}, jsonrpc='2.0', id=5)
2025-08-02 13:55:31,773 - mcp.server.sse - DEBUG - Sending session message to writer: SessionMessage(message=JSONRPCMessage(root=JSONRPCRequest(method='tools/call', params={'name': 'submit_basic_calculation_workflow', 'arguments': {'initial_molecule': 'CCCC', 'method': 'gfn2-xtb', 'mode': 'auto', 'engine': 'xtb', 'name': 'Basic Calculation Workflow'}, '_meta': {'progressToken': 5}}, jsonrpc='2.0', id=5)), metadata=ServerMessageMetadata(related_request_id=None, request_context=<starlette.requests.Request object at 0x10c914560>))
2025-08-02 13:55:31,774 - mcp.server.lowlevel.server - DEBUG - Received message: <mcp.shared.session.RequestResponder object at 0x10c820b90>
2025-08-02 13:55:31,774 - mcp.server.lowlevel.server - INFO - Processing request of type CallToolRequest
2025-08-02 13:55:31,774 - mcp.server.lowlevel.server - DEBUG - Dispatching request of type CallToolRequest
2025-08-02 13:55:31,774 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - INFO - ============================================================
2025-08-02 13:55:31,774 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - INFO - submit_basic_calculation_workflow called with:
2025-08-02 13:55:31,774 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - INFO -   method: gfn2-xtb (type: <class 'str'>)
2025-08-02 13:55:31,775 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - INFO -   tasks: None (type: <class 'NoneType'>)
2025-08-02 13:55:31,775 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - INFO -   mode: auto
2025-08-02 13:55:31,775 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - INFO -   engine: xtb
2025-08-02 13:55:31,775 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - INFO -   name: Basic Calculation Workflow
2025-08-02 13:55:31,775 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - INFO -   initial_molecule: 'CCCC' (SMILES string)
2025-08-02 13:55:31,775 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - DEBUG - Converting SMILES string to StJamesMolecule
2025-08-02 13:55:31,779 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - DEBUG - Successfully converted to StJamesMolecule
2025-08-02 13:55:31,779 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - INFO - Calling rowan.submit_basic_calculation_workflow...
2025-08-02 13:55:31,789 - httpcore.connection - DEBUG - connect_tcp.started host='api.rowansci.com' port=443 local_address=None timeout=5.0 socket_options=None
2025-08-02 13:55:31,888 - httpcore.connection - DEBUG - connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x10c847460>
2025-08-02 13:55:31,888 - httpcore.connection - DEBUG - start_tls.started ssl_context=<ssl.SSLContext object at 0x10c792840> server_hostname='api.rowansci.com' timeout=5.0
2025-08-02 13:55:32,005 - httpcore.connection - DEBUG - start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x10c847790>
2025-08-02 13:55:32,006 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-08-02 13:55:32,007 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-08-02 13:55:32,007 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-08-02 13:55:32,007 - httpcore.http11 - DEBUG - send_request_body.complete
2025-08-02 13:55:32,007 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-08-02 13:55:32,485 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sat, 02 Aug 2025 20:55:32 GMT'), (b'Content-Type', b'application/json'), (b'Content-Length', b'2074'), (b'Connection', b'keep-alive'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains')])
2025-08-02 13:55:32,486 - httpx - INFO - HTTP Request: POST https://api.rowansci.com/workflow "HTTP/1.1 200 OK"
2025-08-02 13:55:32,486 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-08-02 13:55:32,487 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-08-02 13:55:32,487 - httpcore.http11 - DEBUG - response_closed.started
2025-08-02 13:55:32,487 - httpcore.http11 - DEBUG - response_closed.complete
2025-08-02 13:55:32,488 - httpcore.connection - DEBUG - close.started
2025-08-02 13:55:32,488 - httpcore.connection - DEBUG - close.complete
2025-08-02 13:55:32,488 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - INFO - SUCCESS: Workflow submitted with UUID: e7cb6ccf-a027-4cca-bf45-4a6ce93b0a4f
2025-08-02 13:55:32,489 - mcp.server.lowlevel.server - DEBUG - Response sent
2025-08-02 13:55:32,489 - mcp.server.sse - DEBUG - Sending message via SSE: SessionMessage(message=JSONRPCMessage(root=JSONRPCResponse(jsonrpc='2.0', id=5, result={'content': [{'type': 'text', 'text': '{\n  "name": "Basic Calculation Workflow",\n  "uuid": "e7cb6ccf-a027-4cca-bf45-4a6ce93b0a4f",\n  "created_at": "2025-08-02T20:55:32.141148Z",\n  "updated_at": null,\n  "started_at": null,\n  "completed_at": null,\n  "object_status": 0,\n  "parent_uuid": "e5c3ce65-43df-4ab3-90e0-a56f42584cc0",\n  "notes": "",\n  "starred": false,\n  "public": false,\n  "object_type": "basic_calculation",\n  "object_data": {\n    "settings": {\n      "method": "GFN2_XTB",\n      "tasks": [\n        "optimize"\n      ],\n      "mode": "auto"\n    },\n    "engine": "xtb",\n    "initial_molecule": {\n      "charge": 0,\n      "multiplicity": 1,\n      "atoms": [\n        {\n          "atomic_number": 6,\n          "position": [\n            -1.92105031,\n            -0.11441042,\n            0.4101449\n          ]\n        },\n        {\n          "atomic_number": 6,\n          "position": [\n            -0.46914867,\n            0.11903615,\n            0.79605906\n          ]\n        },\n        {\n          "atomic_number": 6,\n          "position": [\n            0.46914831,\n            -0.11903176,\n            -0.38535031\n          ]\n        },\n        {\n          "atomic_number": 6,\n          "position": [\n            1.92105049,\n            0.11440743,\n            0.00056613\n          ]\n        },\n        {\n          "atomic_number": 1,\n          "position": [\n            -2.07610298,\n            -1.14341519,\n            0.07035722\n          ]\n        },\n        {\n          "atomic_number": 1,\n          "position": [\n            -2.57482366,\n            0.06147482,\n            1.2701254\n          ]\n        },\n        {\n          "atomic_number": 1,\n          "position": [\n            -2.22717648,\n            0.5629509,\n            -0.39348215\n          ]\n        },\n        {\n          "atomic_number": 1,\n          "position": [\n            -0.20459043,\n            -0.5505302,\n            1.62278158\n          ]\n        },\n        {\n          "atomic_number": 1,\n          "position": [\n            -0.35481238,\n            1.14622636,\n            1.16155559\n          ]\n        },\n        {\n          "atomic_number": 1,\n          "position": [\n            0.20459352,\n            0.55053799,\n            -1.21207091\n          ]\n        },\n        {\n          "atomic_number": 1,\n          "position": [\n            0.35480868,\n            -1.14622035,\n            -0.75084987\n          ]\n        },\n        {\n          "atomic_number": 1,\n          "position": [\n            2.07610868,\n            1.14341297,\n            0.34034991\n          ]\n        },\n        {\n          "atomic_number": 1,\n          "position": [\n            2.22717054,\n            -0.56295287,\n            0.80419657\n          ]\n        },\n        {\n          "atomic_number": 1,\n          "position": [\n            2.5748247,\n            -0.06148582,\n            -0.85941241\n          ]\n        }\n      ],\n      "cell": null,\n      "energy": null,\n      "scf_iterations": null,\n      "scf_completed": null,\n      "elapsed": null,\n      "homo_lumo_gap": null,\n      "gradient": null,\n      "stress": null,\n      "velocities": null,\n      "mulliken_charges": null,\n      "mulliken_spin_densities": null,\n      "dipole": null,\n      "vibrational_modes": null,\n      "zero_point_energy": null,\n      "thermal_energy_corr": null,\n      "thermal_enthalpy_corr": null,\n      "thermal_free_energy_corr": null,\n      "smiles": "CCCC",\n      "calculation_index": null\n    }\n  },\n  "email_when_complete": false,\n  "max_credits": null,\n  "elapsed": 0.0,\n  "credits_charged": 0.0\n}'}], 'isError': False})), metadata=None)
2025-08-02 13:55:32,490 - sse_starlette.sse - DEBUG - chunk: b'event: message\r\ndata: {"jsonrpc":"2.0","id":5,"result":{"content":[{"type":"text","text":"{\\n  \\"name\\": \\"Basic Calculation Workflow\\",\\n  \\"uuid\\": \\"e7cb6ccf-a027-4cca-bf45-4a6ce93b0a4f\\",\\n  \\"created_at\\": \\"2025-08-02T20:55:32.141148Z\\",\\n  \\"updated_at\\": null,\\n  \\"started_at\\": null,\\n  \\"completed_at\\": null,\\n  \\"object_status\\": 0,\\n  \\"parent_uuid\\": \\"e5c3ce65-43df-4ab3-90e0-a56f42584cc0\\",\\n  \\"notes\\": \\"\\",\\n  \\"starred\\": false,\\n  \\"public\\": false,\\n  \\"object_type\\": \\"basic_calculation\\",\\n  \\"object_data\\": {\\n    \\"settings\\": {\\n      \\"method\\": \\"GFN2_XTB\\",\\n      \\"tasks\\": [\\n        \\"optimize\\"\\n      ],\\n      \\"mode\\": \\"auto\\"\\n    },\\n    \\"engine\\": \\"xtb\\",\\n    \\"initial_molecule\\": {\\n      \\"charge\\": 0,\\n      \\"multiplicity\\": 1,\\n      \\"atoms\\": [\\n        {\\n          \\"atomic_number\\": 6,\\n          \\"position\\": [\\n            -1.92105031,\\n            -0.11441042,\\n            0.4101449\\n          ]\\n        },\\n        {\\n          \\"atomic_number\\": 6,\\n          \\"position\\": [\\n            -0.46914867,\\n            0.11903615,\\n            0.79605906\\n          ]\\n        },\\n        {\\n          \\"atomic_number\\": 6,\\n          \\"position\\": [\\n            0.46914831,\\n            -0.11903176,\\n            -0.38535031\\n          ]\\n        },\\n        {\\n          \\"atomic_number\\": 6,\\n          \\"position\\": [\\n            1.92105049,\\n            0.11440743,\\n            0.00056613\\n          ]\\n        },\\n        {\\n          \\"atomic_number\\": 1,\\n          \\"position\\": [\\n            -2.07610298,\\n            -1.14341519,\\n            0.07035722\\n          ]\\n        },\\n        {\\n          \\"atomic_number\\": 1,\\n          \\"position\\": [\\n            -2.57482366,\\n            0.06147482,\\n            1.2701254\\n          ]\\n        },\\n        {\\n          \\"atomic_number\\": 1,\\n          \\"position\\": [\\n            -2.22717648,\\n            0.5629509,\\n            -0.39348215\\n          ]\\n        },\\n        {\\n          \\"atomic_number\\": 1,\\n          \\"position\\": [\\n            -0.20459043,\\n            -0.5505302,\\n            1.62278158\\n          ]\\n        },\\n        {\\n          \\"atomic_number\\": 1,\\n          \\"position\\": [\\n            -0.35481238,\\n            1.14622636,\\n            1.16155559\\n          ]\\n        },\\n        {\\n          \\"atomic_number\\": 1,\\n          \\"position\\": [\\n            0.20459352,\\n            0.55053799,\\n            -1.21207091\\n          ]\\n        },\\n        {\\n          \\"atomic_number\\": 1,\\n          \\"position\\": [\\n            0.35480868,\\n            -1.14622035,\\n            -0.75084987\\n          ]\\n        },\\n        {\\n          \\"atomic_number\\": 1,\\n          \\"position\\": [\\n            2.07610868,\\n            1.14341297,\\n            0.34034991\\n          ]\\n        },\\n        {\\n          \\"atomic_number\\": 1,\\n          \\"position\\": [\\n            2.22717054,\\n            -0.56295287,\\n            0.80419657\\n          ]\\n        },\\n        {\\n          \\"atomic_number\\": 1,\\n          \\"position\\": [\\n            2.5748247,\\n            -0.06148582,\\n            -0.85941241\\n          ]\\n        }\\n      ],\\n      \\"cell\\": null,\\n      \\"energy\\": null,\\n      \\"scf_iterations\\": null,\\n      \\"scf_completed\\": null,\\n      \\"elapsed\\": null,\\n      \\"homo_lumo_gap\\": null,\\n      \\"gradient\\": null,\\n      \\"stress\\": null,\\n      \\"velocities\\": null,\\n      \\"mulliken_charges\\": null,\\n      \\"mulliken_spin_densities\\": null,\\n      \\"dipole\\": null,\\n      \\"vibrational_modes\\": null,\\n      \\"zero_point_energy\\": null,\\n      \\"thermal_energy_corr\\": null,\\n      \\"thermal_enthalpy_corr\\": null,\\n      \\"thermal_free_energy_corr\\": null,\\n      \\"smiles\\": \\"CCCC\\",\\n      \\"calculation_index\\": null\\n    }\\n  },\\n  \\"email_when_complete\\": false,\\n  \\"max_credits\\": null,\\n  \\"elapsed\\": 0.0,\\n  \\"credits_charged\\": 0.0\\n}"}],"isError":false}}\r\n\r\n'
2025-08-02 13:55:39,491 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 20:55:39.491365+00:00\r\n\r\n'
2025-08-02 13:55:39,804 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 20:55:39.804282+00:00\r\n\r\n'
2025-08-02 13:55:41,510 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 20:55:41.510772+00:00\r\n\r\n'
2025-08-02 13:55:54,492 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 20:55:54.492675+00:00\r\n\r\n'
2025-08-02 13:55:54,806 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 20:55:54.806160+00:00\r\n\r\n'
2025-08-02 13:55:56,513 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 20:55:56.512820+00:00\r\n\r\n'
2025-08-02 13:56:09,495 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 20:56:09.495353+00:00\r\n\r\n'
2025-08-02 13:56:09,809 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 20:56:09.809029+00:00\r\n\r\n'
2025-08-02 13:56:11,516 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 20:56:11.515764+00:00\r\n\r\n'
2025-08-02 13:56:24,497 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 20:56:24.497388+00:00\r\n\r\n'
2025-08-02 13:56:24,810 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 20:56:24.810420+00:00\r\n\r\n'
2025-08-02 13:56:26,518 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 20:56:26.518352+00:00\r\n\r\n'
2025-08-02 13:56:39,501 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 20:56:39.501305+00:00\r\n\r\n'
2025-08-02 13:56:39,813 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 20:56:39.813124+00:00\r\n\r\n'
2025-08-02 13:56:41,521 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 20:56:41.521071+00:00\r\n\r\n'
2025-08-02 13:56:54,504 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 20:56:54.503835+00:00\r\n\r\n'
2025-08-02 13:56:54,816 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 20:56:54.816288+00:00\r\n\r\n'
2025-08-02 13:56:56,525 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 20:56:56.525398+00:00\r\n\r\n'
2025-08-02 13:57:09,506 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 20:57:09.506327+00:00\r\n\r\n'
2025-08-02 13:57:09,819 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 20:57:09.819508+00:00\r\n\r\n'
2025-08-02 13:57:11,528 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 20:57:11.528342+00:00\r\n\r\n'
2025-08-02 13:57:24,509 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 20:57:24.509641+00:00\r\n\r\n'
2025-08-02 13:57:24,823 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 20:57:24.823287+00:00\r\n\r\n'
2025-08-02 13:57:26,531 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 20:57:26.531394+00:00\r\n\r\n'
2025-08-02 13:57:35,694 - mcp.server.lowlevel.server - DEBUG - Initializing server 'Rowan MCP Server'
2025-08-02 13:57:35,695 - mcp.server.lowlevel.server - DEBUG - Registering handler for ListToolsRequest
2025-08-02 13:57:35,695 - mcp.server.lowlevel.server - DEBUG - Registering handler for ListResourcesRequest
2025-08-02 13:57:35,695 - mcp.server.lowlevel.server - DEBUG - Registering handler for ListResourceTemplatesRequest
2025-08-02 13:57:35,695 - mcp.server.lowlevel.server - DEBUG - Registering handler for PromptListRequest
2025-08-02 13:57:35,695 - mcp.server.lowlevel.server - DEBUG - Registering handler for CallToolRequest
2025-08-02 13:57:35,695 - mcp.server.lowlevel.server - DEBUG - Registering handler for ReadResourceRequest
2025-08-02 13:57:35,695 - mcp.server.lowlevel.server - DEBUG - Registering handler for GetPromptRequest
2025-08-02 13:57:35,710 - asyncio - DEBUG - Using selector: KqueueSelector
2025-08-02 13:57:35,714 - mcp.server.sse - DEBUG - SseServerTransport initialized with endpoint: /messages/
2025-08-02 13:57:35,715 - FastMCP.fastmcp.server.server - INFO - Starting MCP server 'Rowan MCP Server' with transport 'sse' on http://127.0.0.1:6276/sse
2025-08-02 13:57:37,226 - mcp.server.sse - DEBUG - Setting up SSE connection
2025-08-02 13:57:37,227 - mcp.server.sse - DEBUG - Created new session with ID: 5d3f767c-44fb-4f8d-955f-16c6286cffa3
2025-08-02 13:57:37,227 - mcp.server.sse - DEBUG - Starting SSE response task
2025-08-02 13:57:37,227 - mcp.server.sse - DEBUG - Yielding read and write streams
2025-08-02 13:57:37,229 - mcp.server.sse - DEBUG - Starting SSE writer
2025-08-02 13:57:37,229 - mcp.server.sse - DEBUG - Sent endpoint event: /messages/?session_id=5d3f767c44fb4f8d955f16c6286cffa3
2025-08-02 13:57:37,230 - sse_starlette.sse - DEBUG - chunk: b'event: endpoint\r\ndata: /messages/?session_id=5d3f767c44fb4f8d955f16c6286cffa3\r\n\r\n'
2025-08-02 13:57:37,231 - mcp.server.sse - DEBUG - Setting up SSE connection
2025-08-02 13:57:37,231 - mcp.server.sse - DEBUG - Created new session with ID: ca93c336-b0e8-4c92-9b60-50115a72ef12
2025-08-02 13:57:37,231 - mcp.server.sse - DEBUG - Starting SSE response task
2025-08-02 13:57:37,231 - mcp.server.sse - DEBUG - Yielding read and write streams
2025-08-02 13:57:37,233 - mcp.server.sse - DEBUG - Starting SSE writer
2025-08-02 13:57:37,234 - mcp.server.sse - DEBUG - Sent endpoint event: /messages/?session_id=ca93c336b0e84c929b6050115a72ef12
2025-08-02 13:57:37,234 - sse_starlette.sse - DEBUG - chunk: b'event: endpoint\r\ndata: /messages/?session_id=ca93c336b0e84c929b6050115a72ef12\r\n\r\n'
2025-08-02 13:57:37,237 - mcp.server.sse - DEBUG - Setting up SSE connection
2025-08-02 13:57:37,238 - mcp.server.sse - DEBUG - Created new session with ID: de7fcb53-49c7-4e5c-ad94-9d0b2fe064ed
2025-08-02 13:57:37,238 - mcp.server.sse - DEBUG - Starting SSE response task
2025-08-02 13:57:37,238 - mcp.server.sse - DEBUG - Yielding read and write streams
2025-08-02 13:57:37,240 - mcp.server.sse - DEBUG - Starting SSE writer
2025-08-02 13:57:37,240 - mcp.server.sse - DEBUG - Sent endpoint event: /messages/?session_id=de7fcb5349c74e5cad949d0b2fe064ed
2025-08-02 13:57:37,240 - sse_starlette.sse - DEBUG - chunk: b'event: endpoint\r\ndata: /messages/?session_id=de7fcb5349c74e5cad949d0b2fe064ed\r\n\r\n'
2025-08-02 13:57:37,243 - mcp.server.sse - DEBUG - Handling POST message
2025-08-02 13:57:37,243 - mcp.server.sse - DEBUG - Parsed session ID: de7fcb53-49c7-4e5c-ad94-9d0b2fe064ed
2025-08-02 13:57:37,243 - mcp.server.sse - DEBUG - Received JSON: b'{"method":"initialize","params":{"protocolVersion":"2025-06-18","capabilities":{"tools":true,"prompts":true,"resources":false,"logging":false,"roots":{"listChanged":false}},"clientInfo":{"name":"cursor-vscode","version":"1.0.0"}},"jsonrpc":"2.0","id":1}'
2025-08-02 13:57:37,243 - mcp.server.sse - DEBUG - Validated client message: root=JSONRPCRequest(method='initialize', params={'protocolVersion': '2025-06-18', 'capabilities': {'tools': True, 'prompts': True, 'resources': False, 'logging': False, 'roots': {'listChanged': False}}, 'clientInfo': {'name': 'cursor-vscode', 'version': '1.0.0'}}, jsonrpc='2.0', id=1)
2025-08-02 13:57:37,243 - mcp.server.sse - DEBUG - Sending session message to writer: SessionMessage(message=JSONRPCMessage(root=JSONRPCRequest(method='initialize', params={'protocolVersion': '2025-06-18', 'capabilities': {'tools': True, 'prompts': True, 'resources': False, 'logging': False, 'roots': {'listChanged': False}}, 'clientInfo': {'name': 'cursor-vscode', 'version': '1.0.0'}}, jsonrpc='2.0', id=1)), metadata=ServerMessageMetadata(related_request_id=None, request_context=<starlette.requests.Request object at 0x10a013690>))
2025-08-02 13:57:37,244 - mcp.server.sse - DEBUG - Sending message via SSE: SessionMessage(message=JSONRPCMessage(root=JSONRPCResponse(jsonrpc='2.0', id=1, result={'protocolVersion': '2025-03-26', 'capabilities': {'experimental': {}, 'prompts': {'listChanged': False}, 'resources': {'subscribe': False, 'listChanged': False}, 'tools': {'listChanged': False}}, 'serverInfo': {'name': 'Rowan MCP Server', 'version': '1.9.3'}})), metadata=None)
2025-08-02 13:57:37,244 - sse_starlette.sse - DEBUG - chunk: b'event: message\r\ndata: {"jsonrpc":"2.0","id":1,"result":{"protocolVersion":"2025-03-26","capabilities":{"experimental":{},"prompts":{"listChanged":false},"resources":{"subscribe":false,"listChanged":false},"tools":{"listChanged":false}},"serverInfo":{"name":"Rowan MCP Server","version":"1.9.3"}}}\r\n\r\n'
2025-08-02 13:57:37,246 - mcp.server.sse - DEBUG - Handling POST message
2025-08-02 13:57:37,246 - mcp.server.sse - DEBUG - Parsed session ID: de7fcb53-49c7-4e5c-ad94-9d0b2fe064ed
2025-08-02 13:57:37,246 - mcp.server.sse - DEBUG - Received JSON: b'{"method":"notifications/initialized","jsonrpc":"2.0"}'
2025-08-02 13:57:37,246 - mcp.server.sse - DEBUG - Validated client message: root=JSONRPCNotification(method='notifications/initialized', params=None, jsonrpc='2.0')
2025-08-02 13:57:37,246 - mcp.server.sse - DEBUG - Sending session message to writer: SessionMessage(message=JSONRPCMessage(root=JSONRPCNotification(method='notifications/initialized', params=None, jsonrpc='2.0')), metadata=ServerMessageMetadata(related_request_id=None, request_context=<starlette.requests.Request object at 0x10a024950>))
2025-08-02 13:57:37,246 - mcp.server.lowlevel.server - DEBUG - Received message: root=InitializedNotification(method='notifications/initialized', params=None, jsonrpc='2.0')
2025-08-02 13:57:37,249 - mcp.server.sse - DEBUG - Handling POST message
2025-08-02 13:57:37,249 - mcp.server.sse - DEBUG - Parsed session ID: de7fcb53-49c7-4e5c-ad94-9d0b2fe064ed
2025-08-02 13:57:37,249 - mcp.server.sse - DEBUG - Received JSON: b'{"method":"tools/list","jsonrpc":"2.0","id":2}'
2025-08-02 13:57:37,249 - mcp.server.sse - DEBUG - Validated client message: root=JSONRPCRequest(method='tools/list', params=None, jsonrpc='2.0', id=2)
2025-08-02 13:57:37,249 - mcp.server.sse - DEBUG - Sending session message to writer: SessionMessage(message=JSONRPCMessage(root=JSONRPCRequest(method='tools/list', params=None, jsonrpc='2.0', id=2)), metadata=ServerMessageMetadata(related_request_id=None, request_context=<starlette.requests.Request object at 0x10a034730>))
2025-08-02 13:57:37,250 - mcp.server.lowlevel.server - DEBUG - Received message: <mcp.shared.session.RequestResponder object at 0x10a048690>
2025-08-02 13:57:37,250 - mcp.server.lowlevel.server - INFO - Processing request of type ListToolsRequest
2025-08-02 13:57:37,250 - mcp.server.lowlevel.server - DEBUG - Dispatching request of type ListToolsRequest
2025-08-02 13:57:37,250 - mcp.server.lowlevel.server - DEBUG - Response sent
2025-08-02 13:57:37,251 - mcp.server.sse - DEBUG - Sending message via SSE: SessionMessage(message=JSONRPCMessage(root=JSONRPCResponse(jsonrpc='2.0', id=2, result={'tools': [{'name': 'submit_basic_calculation_workflow', 'description': 'Submit a basic calculation workflow using Rowan v2 API.\n\nPerforms fundamental quantum chemistry calculations with configurable methods\nand computational tasks. Returns a workflow object for tracking progress.\n', 'inputSchema': {'properties': {'initial_molecule': {'anyOf': [{'type': 'string'}, {'additionalProperties': True, 'type': 'object'}, {}], 'description': 'The molecule to perform the calculation on. Can be a SMILES string, dict, StJamesMolecule, or RdkitMol object', 'title': 'Initial Molecule'}, 'method': {'default': 'uma_m_omol', 'description': "The method to use for the calculation (e.g., 'uma_m_omol', 'gfn2-xtb', 'r2scan_3c')", 'title': 'Method', 'type': 'string'}, 'tasks': {'anyOf': [{'items': {'type': 'string'}, 'type': 'array'}, {'type': 'null'}], 'default': None, 'description': "List of computational tasks to perform. Optional[List[str]] (e.g. ['optimize']), Defaults to None", 'title': 'Tasks'}, 'mode': {'default': 'auto', 'description': "The mode to run the calculation in ('auto', 'rapid', 'careful', 'meticulous')", 'title': 'Mode', 'type': 'string'}, 'engine': {'default': 'omol25', 'description': "The computational engine to use ('omol25', 'xtb', 'psi4')", 'title': 'Engine', 'type': 'string'}, 'name': {'default': 'Basic Calculation Workflow', 'description': 'The name of the workflow for identification', 'title': 'Name', 'type': 'string'}, 'folder_uuid': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'UUID of the folder to place the workflow in (optional)', 'title': 'Folder Uuid'}, 'max_credits': {'anyOf': [{'type': 'integer'}, {'type': 'null'}], 'default': None, 'description': 'Maximum number of credits to use for the workflow (optional)', 'title': 'Max Credits'}}, 'required': ['initial_molecule'], 'type': 'object'}}, {'name': 'submit_conformer_search_workflow', 'description': 'Submit a conformer search workflow using Rowan v2 API.\n\nExplores the conformational space of a molecule to find low-energy structures.\n\nArgs:\n    initial_molecule: SMILES string or molecule object\n    conf_gen_mode: default to "rapid"\n        Options: "rapid", "careful", "meticulous"\n    final_method: default: "aimnet2_wb97md3"\n        Try other options, if user specifies\n    solvent: Optional solvent for implicit solvation (e.g., "water", "ethanol")\n    transition_state: Whether searching for transition state conformers (default: False)\n    name: Workflow name for tracking\n    folder_uuid: Optional folder UUID for organization\n    max_credits: Optional credit limit for the calculation\n    \nReturns:\n    Workflow object representing the submitted workflow\n    \nExample:\n    # Basic conformer search\n    result = submit_conformer_search_workflow(\n        initial_molecule="CCCC",\n        conf_gen_mode="rapid"\n    )\n    \n    # Careful search with solvent\n    result = submit_conformer_search_workflow(\n        initial_molecule="CC(C)CC(=O)O",\n        conf_gen_mode="careful",\n        solvent="water",\n        final_method="r2scan_3c"\n    )\n', 'inputSchema': {'properties': {'initial_molecule': {'title': 'Initial Molecule', 'type': 'string'}, 'conf_gen_mode': {'default': 'rapid', 'title': 'Conf Gen Mode', 'type': 'string'}, 'final_method': {'default': 'aimnet2_wb97md3', 'title': 'Final Method', 'type': 'string'}, 'solvent': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Solvent'}, 'transition_state': {'default': False, 'title': 'Transition State', 'type': 'boolean'}, 'name': {'default': 'Conformer Search Workflow', 'title': 'Name', 'type': 'string'}, 'folder_uuid': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Folder Uuid'}, 'max_credits': {'anyOf': [{'type': 'integer'}, {'type': 'null'}], 'default': None, 'title': 'Max Credits'}}, 'required': ['initial_molecule'], 'type': 'object'}}, {'name': 'submit_solubility_workflow', 'description': 'Submit a solubility prediction workflow using Rowan v2 API.\n\nPredicts solubility (log S) of a molecule in multiple solvents at various temperatures\nusing machine learning models.\n\nArgs:\n    initial_smiles: SMILES string of the molecule\n    solvents: List of solvents as SMILES or common names (e.g., ["water", "ethanol"])\n        If None, uses default solvents\n    temperatures: List of temperatures in Kelvin\n        If None, uses default temperature range\n    name: Workflow name for tracking\n    folder_uuid: Optional folder UUID for organization\n    max_credits: Optional credit limit for the calculation\n    \nReturns:\n    Workflow object representing the submitted workflow\n    \nExample:\n    # Basic solubility prediction\n    result = submit_solubility_workflow(\n        initial_smiles="CC(=O)Nc1ccc(O)cc1",\n        solvents=["water", "ethanol"],\n        temperatures=[298.15, 310.15]\n    )\n    \n    # With SMILES solvents\n    result = submit_solubility_workflow(\n        initial_smiles="CC(=O)O",\n        solvents=["O", "CCO", "CCCCCC"],\n        temperatures=[273.15, 298.15, 323.15]\n    )\n', 'inputSchema': {'properties': {'initial_smiles': {'title': 'Initial Smiles', 'type': 'string'}, 'solvents': {'anyOf': [{'items': {'type': 'string'}, 'type': 'array'}, {'type': 'null'}], 'default': None, 'title': 'Solvents'}, 'temperatures': {'anyOf': [{'items': {'type': 'number'}, 'type': 'array'}, {'type': 'null'}], 'default': None, 'title': 'Temperatures'}, 'name': {'default': 'Solubility Workflow', 'title': 'Name', 'type': 'string'}, 'folder_uuid': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Folder Uuid'}, 'max_credits': {'anyOf': [{'type': 'integer'}, {'type': 'null'}], 'default': None, 'title': 'Max Credits'}}, 'required': ['initial_smiles'], 'type': 'object'}}, {'name': 'submit_pka_workflow', 'description': 'Submit a pKa prediction workflow using Rowan v2 API.\n\nPredicts acid dissociation constants (pKa) for ionizable groups in a molecule\nusing quantum chemistry calculations.\n\nArgs:\n    initial_molecule: SMILES string or molecule object\n    pka_range: Tuple of (min, max) pKa values to search (default: (2, 12))\n    deprotonate_elements: List of elements to consider for deprotonation\n        (e.g., ["N", "O", "S"]). If None, uses defaults\n    protonate_elements: List of elements to consider for protonation\n        (e.g., ["N", "O"]). If None, uses defaults\n    mode: Calculation mode (default: "careful")\n        Options: "rapid", "careful", "meticulous"\n    name: Workflow name for tracking\n    folder_uuid: Optional folder UUID for organization\n    max_credits: Optional credit limit for the calculation\n    \nReturns:\n    Workflow object representing the submitted workflow\n    \nExample:\n    # Basic pKa prediction\n    result = submit_pka_workflow(\n        initial_molecule="CC(=O)O",\n        pka_range=(2, 8)\n    )\n    \n    # Specific elements with meticulous mode\n    result = submit_pka_workflow(\n        initial_molecule="NC(C)C(=O)O",\n        pka_range=(1, 14),\n        deprotonate_elements=["N", "O"],\n        mode="meticulous"\n    )\n', 'inputSchema': {'properties': {'initial_molecule': {'title': 'Initial Molecule', 'type': 'string'}, 'pka_range': {'default': [2, 12], 'maxItems': 2, 'minItems': 2, 'prefixItems': [{'type': 'number'}, {'type': 'number'}], 'title': 'Pka Range', 'type': 'array'}, 'deprotonate_elements': {'anyOf': [{'items': {'type': 'string'}, 'type': 'array'}, {'type': 'null'}], 'default': None, 'title': 'Deprotonate Elements'}, 'protonate_elements': {'anyOf': [{'items': {'type': 'string'}, 'type': 'array'}, {'type': 'null'}], 'default': None, 'title': 'Protonate Elements'}, 'mode': {'default': 'careful', 'title': 'Mode', 'type': 'string'}, 'name': {'default': 'pKa Workflow', 'title': 'Name', 'type': 'string'}, 'folder_uuid': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Folder Uuid'}, 'max_credits': {'anyOf': [{'type': 'integer'}, {'type': 'null'}], 'default': None, 'title': 'Max Credits'}}, 'required': ['initial_molecule'], 'type': 'object'}}, {'name': 'submit_redox_potential_workflow', 'description': 'Submit a redox potential calculation workflow using Rowan v2 API.\n\nCalculates reduction and/or oxidation potentials for a molecule using\nquantum chemistry methods.\n\nArgs:\n    initial_molecule: SMILES string or molecule object\n    reduction: Whether to calculate reduction potential (default: False)\n    oxidization: Whether to calculate oxidation potential (default: True)\n    mode: Calculation mode (default: "rapid")\n        Options: "rapid", "careful", "meticulous"\n    name: Workflow name for tracking\n    folder_uuid: Optional folder UUID for organization\n    max_credits: Optional credit limit for the calculation\n    \nReturns:\n    Workflow object representing the submitted workflow\n    \nExample:\n    # Basic oxidation potential\n    result = submit_redox_potential_workflow(\n        initial_molecule="CC1=CC=CC=C1",\n        oxidization=True\n    )\n    \n    # Both reduction and oxidation with careful mode\n    result = submit_redox_potential_workflow(\n        initial_molecule="c1ccccc1",\n        reduction=True,\n        oxidization=True,\n        mode="careful"\n    )\n', 'inputSchema': {'properties': {'initial_molecule': {'title': 'Initial Molecule', 'type': 'string'}, 'reduction': {'default': False, 'title': 'Reduction', 'type': 'boolean'}, 'oxidization': {'default': True, 'title': 'Oxidization', 'type': 'boolean'}, 'mode': {'default': 'rapid', 'title': 'Mode', 'type': 'string'}, 'name': {'default': 'Redox Potential Workflow', 'title': 'Name', 'type': 'string'}, 'folder_uuid': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Folder Uuid'}, 'max_credits': {'anyOf': [{'type': 'integer'}, {'type': 'null'}], 'default': None, 'title': 'Max Credits'}}, 'required': ['initial_molecule'], 'type': 'object'}}, {'name': 'submit_fukui_workflow', 'description': 'Submit a Fukui indices calculation workflow using Rowan v2 API.\n\nCalculates Fukui indices to predict molecular reactivity at different sites.\nFukui indices indicate susceptibility to nucleophilic/electrophilic attack.\n\nArgs:\n    initial_molecule: SMILES string or molecule object\n    optimization_method: Method for geometry optimization (default: "gfn2_xtb")\n        Common options: "gfn2_xtb", "r2scan_3c", "aimnet2_wb97md3"\n    fukui_method: Method for Fukui calculation (default: "gfn1_xtb")\n        Common options: "gfn1_xtb", "gfn2_xtb"\n    solvent_settings: Optional solvent configuration dictionary\n        Example: {"solvent": "water", "model": "alpb"}\n    name: Workflow name for tracking\n    folder_uuid: Optional folder UUID for organization\n    max_credits: Optional credit limit for the calculation\n    \nReturns:\n    Workflow object representing the submitted workflow\n    \nExample:\n    # Basic Fukui indices\n    result = submit_fukui_workflow(\n        initial_molecule="CC(=O)O"\n    )\n    \n    # With solvent and advanced methods\n    result = submit_fukui_workflow(\n        initial_molecule="c1ccccc1N",\n        optimization_method="r2scan_3c",\n        fukui_method="gfn2_xtb",\n        solvent_settings={"solvent": "water", "model": "alpb"}\n    )\n', 'inputSchema': {'properties': {'initial_molecule': {'title': 'Initial Molecule', 'type': 'string'}, 'optimization_method': {'default': 'gfn2_xtb', 'title': 'Optimization Method', 'type': 'string'}, 'fukui_method': {'default': 'gfn1_xtb', 'title': 'Fukui Method', 'type': 'string'}, 'solvent_settings': {'anyOf': [{'additionalProperties': True, 'type': 'object'}, {'type': 'null'}], 'default': None, 'title': 'Solvent Settings'}, 'name': {'default': 'Fukui Workflow', 'title': 'Name', 'type': 'string'}, 'folder_uuid': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Folder Uuid'}, 'max_credits': {'anyOf': [{'type': 'integer'}, {'type': 'null'}], 'default': None, 'title': 'Max Credits'}}, 'required': ['initial_molecule'], 'type': 'object'}}, {'name': 'submit_tautomer_search_workflow', 'description': 'Submit a tautomer search workflow using Rowan v2 API.\n\nSearches for different tautomeric forms of a molecule and evaluates their\nrelative stabilities. Tautomers are structural isomers that readily interconvert.\n\nArgs:\n    initial_molecule: SMILES string or molecule object\n    mode: Search mode (default: "careful")\n        Options: "rapid", "careful", "meticulous"\n    name: Workflow name for tracking\n    folder_uuid: Optional folder UUID for organization\n    max_credits: Optional credit limit for the calculation\n    \nReturns:\n    Workflow object representing the submitted workflow\n    \nExample:\n    # Basic tautomer search\n    result = submit_tautomer_search_workflow(\n        initial_molecule="CC(=O)CC(=O)C"\n    )\n    \n    # Meticulous search for complex molecule\n    result = submit_tautomer_search_workflow(\n        initial_molecule="c1ccc2c(c1)ncc(=O)[nH]2",\n        mode="meticulous"\n    )\n', 'inputSchema': {'properties': {'initial_molecule': {'title': 'Initial Molecule', 'type': 'string'}, 'mode': {'default': 'careful', 'title': 'Mode', 'type': 'string'}, 'name': {'default': 'Tautomer Search Workflow', 'title': 'Name', 'type': 'string'}, 'folder_uuid': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Folder Uuid'}, 'max_credits': {'anyOf': [{'type': 'integer'}, {'type': 'null'}], 'default': None, 'title': 'Max Credits'}}, 'required': ['initial_molecule'], 'type': 'object'}}, {'name': 'submit_descriptors_workflow', 'description': 'Submit a molecular descriptors calculation workflow using Rowan v2 API.\n\nCalculates a comprehensive set of molecular descriptors including:\n- Physical properties (MW, logP, TPSA, etc.)\n- Electronic properties (HOMO/LUMO, dipole moment, etc.)\n- Structural features (rotatable bonds, H-bond donors/acceptors, etc.)\n- Topological indices\n\nArgs:\n    initial_molecule: SMILES string or molecule object\n    name: Workflow name for tracking\n    folder_uuid: Optional folder UUID for organization\n    max_credits: Optional credit limit for the calculation\n    \nReturns:\n    Workflow object representing the submitted workflow\n    \nExample:\n    # Basic descriptor calculation\n    result = submit_descriptors_workflow(\n        initial_molecule="CC(=O)Nc1ccc(O)cc1"\n    )\n    \n    # For complex molecule\n    result = submit_descriptors_workflow(\n        initial_molecule="CN1C=NC2=C1C(=O)N(C(=O)N2C)C",\n        name="Caffeine Descriptors"\n    )\n', 'inputSchema': {'properties': {'initial_molecule': {'title': 'Initial Molecule', 'type': 'string'}, 'name': {'default': 'Descriptors Workflow', 'title': 'Name', 'type': 'string'}, 'folder_uuid': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Folder Uuid'}, 'max_credits': {'anyOf': [{'type': 'integer'}, {'type': 'null'}], 'default': None, 'title': 'Max Credits'}}, 'required': ['initial_molecule'], 'type': 'object'}}, {'name': 'submit_scan_workflow', 'description': 'Submit a potential energy surface scan workflow using Rowan v2 API.\n\nPerforms systematic scans along specified molecular coordinates (bonds, angles,\nor dihedrals) to map the potential energy surface.\n\nArgs:\n    initial_molecule: SMILES string or molecule object\n    scan_settings: Dictionary specifying scan parameters\n        Example: {\n            "type": "dihedral",  # or "bond", "angle"\n            "atoms": [0, 1, 2, 3],  # atom indices\n            "start": -180,\n            "stop": 180,\n            "step": 10\n        }\n    calculation_engine: Computational engine (default: "omol25")\n        Options: "omol25", "xtb", "psi4"\n    calculation_method: Method for calculations (default: "uma_m_omol")\n        Options depend on engine\n    wavefront_propagation: Use wavefront optimization (default: True)\n        Speeds up scans by using previous geometries as starting points\n    name: Workflow name for tracking\n    folder_uuid: Optional folder UUID for organization\n    max_credits: Optional credit limit for the calculation\n    \nReturns:\n    Workflow object representing the submitted workflow\n    \nExample:\n    # Dihedral scan\n    result = submit_scan_workflow(\n        initial_molecule="CC(C)CC",\n        scan_settings={\n            "type": "dihedral",\n            "atoms": [0, 1, 2, 3],\n            "start": -180,\n            "stop": 180,\n            "step": 15\n        }\n    )\n    \n    # Bond scan with advanced method\n    result = submit_scan_workflow(\n        initial_molecule="CC",\n        scan_settings={\n            "type": "bond",\n            "atoms": [0, 1],\n            "start": 1.0,\n            "stop": 2.5,\n            "step": 0.1\n        },\n        calculation_method="r2scan_3c"\n    )\n', 'inputSchema': {'properties': {'initial_molecule': {'title': 'Initial Molecule', 'type': 'string'}, 'scan_settings': {'anyOf': [{'additionalProperties': True, 'type': 'object'}, {'type': 'null'}], 'default': None, 'title': 'Scan Settings'}, 'calculation_engine': {'default': 'omol25', 'title': 'Calculation Engine', 'type': 'string'}, 'calculation_method': {'default': 'uma_m_omol', 'title': 'Calculation Method', 'type': 'string'}, 'wavefront_propagation': {'default': True, 'title': 'Wavefront Propagation', 'type': 'boolean'}, 'name': {'default': 'Scan Workflow', 'title': 'Name', 'type': 'string'}, 'folder_uuid': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Folder Uuid'}, 'max_credits': {'anyOf': [{'type': 'integer'}, {'type': 'null'}], 'default': None, 'title': 'Max Credits'}}, 'required': ['initial_molecule'], 'type': 'object'}}, {'name': 'submit_irc_workflow', 'description': 'Submits an Intrinsic Reaction Coordinate (IRC) workflow to the API.\n\nArgs:\n    initial_molecule: The initial molecule to perform the IRC calculation on.\n        Can be a dict, StJamesMolecule, or RdkitMol object\n    method: The computational method to use for the IRC calculation (default: "uma_m_omol")\n        See list of available methods for options\n    engine: The computational engine to use for the calculation (default: "omol25")\n        See list of available engines\n    preopt: Whether to perform a pre-optimization of the molecule (default: True)\n    step_size: The step size to use for the IRC calculation (default: 0.05)\n    max_irc_steps: The maximum number of IRC steps to perform (default: 30)\n    name: The name of the workflow\n    folder_uuid: The UUID of the folder to place the workflow in\n    max_credits: The maximum number of credits to use for the workflow\n    \nReturns:\n    Workflow object representing the submitted IRC workflow\n    \nExample:\n    # Basic IRC calculation\n    result = submit_irc_workflow(\n        initial_molecule={"smiles": "[CH3].[CH3]"},\n        method="gfn2_xtb",\n        max_irc_steps=50\n    )\n    \n    # IRC with specific method and engine\n    result = submit_irc_workflow(\n        initial_molecule={"smiles": "CC(O)=CC"},\n        method="r2scan_3c",\n        engine="psi4",\n        step_size=0.03\n    )\n', 'inputSchema': {'properties': {'initial_molecule': {'anyOf': [{'additionalProperties': True, 'type': 'object'}, {}, {'type': 'null'}], 'default': None, 'title': 'Initial Molecule'}, 'method': {'default': 'uma_m_omol', 'title': 'Method', 'type': 'string'}, 'engine': {'default': 'omol25', 'title': 'Engine', 'type': 'string'}, 'preopt': {'default': True, 'title': 'Preopt', 'type': 'boolean'}, 'step_size': {'default': 0.05, 'title': 'Step Size', 'type': 'number'}, 'max_irc_steps': {'default': 30, 'title': 'Max Irc Steps', 'type': 'integer'}, 'name': {'default': 'IRC Workflow', 'title': 'Name', 'type': 'string'}, 'folder_uuid': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Folder Uuid'}, 'max_credits': {'anyOf': [{'type': 'integer'}, {'type': 'null'}], 'default': None, 'title': 'Max Credits'}}, 'type': 'object'}}, {'name': 'submit_protein_cofolding_workflow', 'description': 'Submits a protein cofolding workflow to the API.\n\nArgs:\n    initial_protein_sequences: The sequences of the proteins to be cofolded\n    initial_smiles_list: A list of SMILES strings for the ligands to be cofolded with\n    ligand_binding_affinity_index: The index of the ligand for which to compute the binding affinity\n    use_msa_server: Whether to use the MSA server for the computation\n    use_potentials: Whether to use potentials for the computation\n    name: The name of the workflow\n    model: The model to use for the computation\n    folder_uuid: The UUID of the folder to store the workflow in\n    max_credits: The maximum number of credits to use for the workflow\n    \nReturns:\n    Workflow object representing the submitted workflow\n    \nExample:\n    # Protein dimer cofolding\n    result = submit_protein_cofolding_workflow(\n        initial_protein_sequences=[\n            "MKTAYIAKQRQISFVKSHFSRQLEERLGLIEVQAPILSRVGDGTQDNLSGAEK",\n            "MKQHKAMIVALIVICITAVVAALVTRKDLCEVHIRTGQTEVAVF"\n        ]\n    )\n    \n    # Protein-ligand complex\n    result = submit_protein_cofolding_workflow(\n        initial_protein_sequences=["MGSSHHHHHHSSGLVPRGSH"],\n        initial_smiles_list=["CC(=O)O", "CCO"],\n        ligand_binding_affinity_index=0,\n        use_msa_server=True\n    )\n', 'inputSchema': {'properties': {'initial_protein_sequences': {'items': {'type': 'string'}, 'title': 'Initial Protein Sequences', 'type': 'array'}, 'initial_smiles_list': {'anyOf': [{'items': {'type': 'string'}, 'type': 'array'}, {'type': 'null'}], 'default': None, 'title': 'Initial Smiles List'}, 'ligand_binding_affinity_index': {'anyOf': [{'type': 'integer'}, {'type': 'null'}], 'default': None, 'title': 'Ligand Binding Affinity Index'}, 'use_msa_server': {'default': True, 'title': 'Use Msa Server', 'type': 'boolean'}, 'use_potentials': {'default': False, 'title': 'Use Potentials', 'type': 'boolean'}, 'name': {'default': 'Cofolding Workflow', 'title': 'Name', 'type': 'string'}, 'model': {'default': 'boltz_2', 'title': 'Model', 'type': 'string'}, 'folder_uuid': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Folder Uuid'}, 'max_credits': {'anyOf': [{'type': 'integer'}, {'type': 'null'}], 'default': None, 'title': 'Max Credits'}}, 'required': ['initial_protein_sequences'], 'type': 'object'}}, {'name': 'submit_docking_workflow', 'description': 'Submits a Docking workflow to the API.\n\nArgs:\n    protein: The protein to dock. Can be fed as a uuid or a Protein object\n    pocket: The pocket to dock into\n    initial_molecule: The initial molecule to be docked.\n        Can be a dict, StJamesMolecule, or RdkitMol object\n    do_csearch: Whether to perform a conformational search on the ligand\n    do_optimization: Whether to perform an optimization on the ligand\n    name: The name of the workflow\n    folder_uuid: The UUID of the folder to place the workflow in\n    max_credits: The maximum number of credits to use for the workflow\n    \nReturns:\n    Workflow object representing the submitted workflow\n    \nExample:\n    # Basic docking with protein UUID\n    result = submit_docking_workflow(\n        protein="protein-uuid-123",\n        pocket=pocket_obj,\n        initial_molecule={"smiles": "CC(=O)Oc1ccccc1C(=O)O"}\n    )\n    \n    # Docking with optimization disabled\n    result = submit_docking_workflow(\n        protein=protein_obj,\n        pocket=pocket_obj,\n        initial_molecule={"smiles": "CCO"},\n        do_csearch=False,\n        do_optimization=False\n    )\n', 'inputSchema': {'properties': {'protein': {'anyOf': [{'type': 'string'}, {}], 'title': 'Protein'}, 'pocket': {'title': 'Pocket'}, 'initial_molecule': {'anyOf': [{'additionalProperties': True, 'type': 'object'}, {}, {'type': 'null'}], 'default': None, 'title': 'Initial Molecule'}, 'do_csearch': {'default': True, 'title': 'Do Csearch', 'type': 'boolean'}, 'do_optimization': {'default': True, 'title': 'Do Optimization', 'type': 'boolean'}, 'name': {'default': 'Docking Workflow', 'title': 'Name', 'type': 'string'}, 'folder_uuid': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Folder Uuid'}, 'max_credits': {'anyOf': [{'type': 'integer'}, {'type': 'null'}], 'default': None, 'title': 'Max Credits'}}, 'required': ['protein', 'pocket'], 'type': 'object'}}, {'name': 'workflow_fetch_latest', 'description': 'Fetch the latest workflow data from the database.\n\nUpdates the workflow object with the most recent status and results.\n\nArgs:\n    workflow_uuid: The UUID of the workflow to fetch\n    in_place: Whether to update the workflow object in place (default: False)\n    \nReturns:\n    Dictionary containing the updated workflow data including status and results\n', 'inputSchema': {'properties': {'workflow_uuid': {'title': 'Workflow Uuid', 'type': 'string'}, 'in_place': {'default': False, 'title': 'In Place', 'type': 'boolean'}}, 'required': ['workflow_uuid'], 'type': 'object'}}, {'name': 'workflow_wait_for_result', 'description': 'Wait for a workflow to complete and return the result.\n\nBlocks until the workflow completes, polling at specified intervals.\n\nArgs:\n    workflow_uuid: The UUID of the workflow to wait for\n    poll_interval: Time in seconds between status checks (default: 5)\n    \nReturns:\n    Dictionary containing the completed workflow data including results\n', 'inputSchema': {'properties': {'workflow_uuid': {'title': 'Workflow Uuid', 'type': 'string'}, 'poll_interval': {'default': 5, 'title': 'Poll Interval', 'type': 'integer'}}, 'required': ['workflow_uuid'], 'type': 'object'}}, {'name': 'workflow_get_status', 'description': 'Get the current status of a workflow.\n\nArgs:\n    workflow_uuid: The UUID of the workflow\n    \nReturns:\n    Dictionary with status information\n', 'inputSchema': {'properties': {'workflow_uuid': {'title': 'Workflow Uuid', 'type': 'string'}}, 'required': ['workflow_uuid'], 'type': 'object'}}, {'name': 'workflow_stop', 'description': 'Stop a running workflow.\n\nArgs:\n    workflow_uuid: The UUID of the workflow to stop\n    \nReturns:\n    Dictionary with confirmation message\n', 'inputSchema': {'properties': {'workflow_uuid': {'title': 'Workflow Uuid', 'type': 'string'}}, 'required': ['workflow_uuid'], 'type': 'object'}}, {'name': 'workflow_delete', 'description': 'Delete a workflow.\n\nThis permanently removes the workflow and its results from the database.\n\nArgs:\n    workflow_uuid: The UUID of the workflow to delete\n    \nReturns:\n    Dictionary with confirmation message\n', 'inputSchema': {'properties': {'workflow_uuid': {'title': 'Workflow Uuid', 'type': 'string'}}, 'required': ['workflow_uuid'], 'type': 'object'}}, {'name': 'retrieve_workflow', 'description': 'Retrieve a workflow from the API.\n\nArgs:\n    uuid: The UUID of the workflow to retrieve\n    \nReturns:\n    Dictionary containing the complete workflow data\n    \nRaises:\n    HTTPError: If the API request fails\n', 'inputSchema': {'properties': {'uuid': {'title': 'Uuid', 'type': 'string'}}, 'required': ['uuid'], 'type': 'object'}}, {'name': 'retrieve_calculation_molecules', 'description': 'Retrieve a list of molecules from a calculation.\n\nArgs:\n    uuid: The UUID of the calculation to retrieve molecules from\n    \nReturns:\n    List of dictionaries representing the molecules in the calculation\n    \nRaises:\n    HTTPError: If the API request fails\n', 'inputSchema': {'properties': {'uuid': {'title': 'Uuid', 'type': 'string'}}, 'required': ['uuid'], 'type': 'object'}}, {'name': 'list_workflows', 'description': 'List workflows subject to the specified criteria.\n\nArgs:\n    parent_uuid: The UUID of the parent folder\n    name_contains: Substring to search for in workflow names\n    public: Filter workflows by their public status\n    starred: Filter workflows by their starred status\n    status: Filter workflows by their status\n    workflow_type: Filter workflows by their type\n    page: The page number to retrieve (default: 0)\n    size: The number of items per page (default: 10)\n    \nReturns:\n    List of workflow dictionaries that match the search criteria\n    \nRaises:\n    HTTPError: If the request to the API fails\n', 'inputSchema': {'properties': {'parent_uuid': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Parent Uuid'}, 'name_contains': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Name Contains'}, 'public': {'anyOf': [{'type': 'boolean'}, {'type': 'null'}], 'default': None, 'title': 'Public'}, 'starred': {'anyOf': [{'type': 'boolean'}, {'type': 'null'}], 'default': None, 'title': 'Starred'}, 'status': {'anyOf': [{'type': 'integer'}, {'type': 'null'}], 'default': None, 'title': 'Status'}, 'workflow_type': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Workflow Type'}, 'page': {'default': 0, 'title': 'Page', 'type': 'integer'}, 'size': {'default': 10, 'title': 'Size', 'type': 'integer'}}, 'type': 'object'}}, {'name': 'workflow_update', 'description': 'Update workflow details.\n\nArgs:\n    workflow_uuid: The UUID of the workflow to update\n    name: New name for the workflow (optional)\n    notes: New notes for the workflow (optional)\n    starred: Whether to star/unstar the workflow (optional)\n    public: Whether to make the workflow public/private (optional)\n    \nReturns:\n    Dictionary with updated workflow information\n', 'inputSchema': {'properties': {'workflow_uuid': {'title': 'Workflow Uuid', 'type': 'string'}, 'name': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Name'}, 'notes': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Notes'}, 'starred': {'anyOf': [{'type': 'boolean'}, {'type': 'null'}], 'default': None, 'title': 'Starred'}, 'public': {'anyOf': [{'type': 'boolean'}, {'type': 'null'}], 'default': None, 'title': 'Public'}}, 'required': ['workflow_uuid'], 'type': 'object'}}, {'name': 'workflow_is_finished', 'description': 'Check if a workflow is finished.\n\nArgs:\n    workflow_uuid: The UUID of the workflow to check\n    \nReturns:\n    Dictionary with workflow completion status\n', 'inputSchema': {'properties': {'workflow_uuid': {'title': 'Workflow Uuid', 'type': 'string'}}, 'required': ['workflow_uuid'], 'type': 'object'}}, {'name': 'workflow_delete_data', 'description': 'Delete workflow data while keeping the workflow record.\n\nArgs:\n    workflow_uuid: The UUID of the workflow\n    \nReturns:\n    Dictionary with confirmation message\n', 'inputSchema': {'properties': {'workflow_uuid': {'title': 'Workflow Uuid', 'type': 'string'}}, 'required': ['workflow_uuid'], 'type': 'object'}}]})), metadata=None)
2025-08-02 13:57:37,252 - sse_starlette.sse - DEBUG - chunk: b'event: message\r\ndata: {"jsonrpc":"2.0","id":2,"result":{"tools":[{"name":"submit_basic_calculation_workflow","description":"Submit a basic calculation workflow using Rowan v2 API.\\n\\nPerforms fundamental quantum chemistry calculations with configurable methods\\nand computational tasks. Returns a workflow object for tracking progress.\\n","inputSchema":{"properties":{"initial_molecule":{"anyOf":[{"type":"string"},{"additionalProperties":true,"type":"object"},{}],"description":"The molecule to perform the calculation on. Can be a SMILES string, dict, StJamesMolecule, or RdkitMol object","title":"Initial Molecule"},"method":{"default":"uma_m_omol","description":"The method to use for the calculation (e.g., \'uma_m_omol\', \'gfn2-xtb\', \'r2scan_3c\')","title":"Method","type":"string"},"tasks":{"anyOf":[{"items":{"type":"string"},"type":"array"},{"type":"null"}],"default":null,"description":"List of computational tasks to perform. Optional[List[str]] (e.g. [\'optimize\']), Defaults to None","title":"Tasks"},"mode":{"default":"auto","description":"The mode to run the calculation in (\'auto\', \'rapid\', \'careful\', \'meticulous\')","title":"Mode","type":"string"},"engine":{"default":"omol25","description":"The computational engine to use (\'omol25\', \'xtb\', \'psi4\')","title":"Engine","type":"string"},"name":{"default":"Basic Calculation Workflow","description":"The name of the workflow for identification","title":"Name","type":"string"},"folder_uuid":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"description":"UUID of the folder to place the workflow in (optional)","title":"Folder Uuid"},"max_credits":{"anyOf":[{"type":"integer"},{"type":"null"}],"default":null,"description":"Maximum number of credits to use for the workflow (optional)","title":"Max Credits"}},"required":["initial_molecule"],"type":"object"}},{"name":"submit_conformer_search_workflow","description":"Submit a conformer search workflow using Rowan v2 API.\\n\\nExplores the conformational space of a molecule to find low-energy structures.\\n\\nArgs:\\n    initial_molecule: SMILES string or molecule object\\n    conf_gen_mode: default to \\"rapid\\"\\n        Options: \\"rapid\\", \\"careful\\", \\"meticulous\\"\\n    final_method: default: \\"aimnet2_wb97md3\\"\\n        Try other options, if user specifies\\n    solvent: Optional solvent for implicit solvation (e.g., \\"water\\", \\"ethanol\\")\\n    transition_state: Whether searching for transition state conformers (default: False)\\n    name: Workflow name for tracking\\n    folder_uuid: Optional folder UUID for organization\\n    max_credits: Optional credit limit for the calculation\\n    \\nReturns:\\n    Workflow object representing the submitted workflow\\n    \\nExample:\\n    # Basic conformer search\\n    result = submit_conformer_search_workflow(\\n        initial_molecule=\\"CCCC\\",\\n        conf_gen_mode=\\"rapid\\"\\n    )\\n    \\n    # Careful search with solvent\\n    result = submit_conformer_search_workflow(\\n        initial_molecule=\\"CC(C)CC(=O)O\\",\\n        conf_gen_mode=\\"careful\\",\\n        solvent=\\"water\\",\\n        final_method=\\"r2scan_3c\\"\\n    )\\n","inputSchema":{"properties":{"initial_molecule":{"title":"Initial Molecule","type":"string"},"conf_gen_mode":{"default":"rapid","title":"Conf Gen Mode","type":"string"},"final_method":{"default":"aimnet2_wb97md3","title":"Final Method","type":"string"},"solvent":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"title":"Solvent"},"transition_state":{"default":false,"title":"Transition State","type":"boolean"},"name":{"default":"Conformer Search Workflow","title":"Name","type":"string"},"folder_uuid":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"title":"Folder Uuid"},"max_credits":{"anyOf":[{"type":"integer"},{"type":"null"}],"default":null,"title":"Max Credits"}},"required":["initial_molecule"],"type":"object"}},{"name":"submit_solubility_workflow","description":"Submit a solubility prediction workflow using Rowan v2 API.\\n\\nPredicts solubility (log S) of a molecule in multiple solvents at various temperatures\\nusing machine learning models.\\n\\nArgs:\\n    initial_smiles: SMILES string of the molecule\\n    solvents: List of solvents as SMILES or common names (e.g., [\\"water\\", \\"ethanol\\"])\\n        If None, uses default solvents\\n    temperatures: List of temperatures in Kelvin\\n        If None, uses default temperature range\\n    name: Workflow name for tracking\\n    folder_uuid: Optional folder UUID for organization\\n    max_credits: Optional credit limit for the calculation\\n    \\nReturns:\\n    Workflow object representing the submitted workflow\\n    \\nExample:\\n    # Basic solubility prediction\\n    result = submit_solubility_workflow(\\n        initial_smiles=\\"CC(=O)Nc1ccc(O)cc1\\",\\n        solvents=[\\"water\\", \\"ethanol\\"],\\n        temperatures=[298.15, 310.15]\\n    )\\n    \\n    # With SMILES solvents\\n    result = submit_solubility_workflow(\\n        initial_smiles=\\"CC(=O)O\\",\\n        solvents=[\\"O\\", \\"CCO\\", \\"CCCCCC\\"],\\n        temperatures=[273.15, 298.15, 323.15]\\n    )\\n","inputSchema":{"properties":{"initial_smiles":{"title":"Initial Smiles","type":"string"},"solvents":{"anyOf":[{"items":{"type":"string"},"type":"array"},{"type":"null"}],"default":null,"title":"Solvents"},"temperatures":{"anyOf":[{"items":{"type":"number"},"type":"array"},{"type":"null"}],"default":null,"title":"Temperatures"},"name":{"default":"Solubility Workflow","title":"Name","type":"string"},"folder_uuid":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"title":"Folder Uuid"},"max_credits":{"anyOf":[{"type":"integer"},{"type":"null"}],"default":null,"title":"Max Credits"}},"required":["initial_smiles"],"type":"object"}},{"name":"submit_pka_workflow","description":"Submit a pKa prediction workflow using Rowan v2 API.\\n\\nPredicts acid dissociation constants (pKa) for ionizable groups in a molecule\\nusing quantum chemistry calculations.\\n\\nArgs:\\n    initial_molecule: SMILES string or molecule object\\n    pka_range: Tuple of (min, max) pKa values to search (default: (2, 12))\\n    deprotonate_elements: List of elements to consider for deprotonation\\n        (e.g., [\\"N\\", \\"O\\", \\"S\\"]). If None, uses defaults\\n    protonate_elements: List of elements to consider for protonation\\n        (e.g., [\\"N\\", \\"O\\"]). If None, uses defaults\\n    mode: Calculation mode (default: \\"careful\\")\\n        Options: \\"rapid\\", \\"careful\\", \\"meticulous\\"\\n    name: Workflow name for tracking\\n    folder_uuid: Optional folder UUID for organization\\n    max_credits: Optional credit limit for the calculation\\n    \\nReturns:\\n    Workflow object representing the submitted workflow\\n    \\nExample:\\n    # Basic pKa prediction\\n    result = submit_pka_workflow(\\n        initial_molecule=\\"CC(=O)O\\",\\n        pka_range=(2, 8)\\n    )\\n    \\n    # Specific elements with meticulous mode\\n    result = submit_pka_workflow(\\n        initial_molecule=\\"NC(C)C(=O)O\\",\\n        pka_range=(1, 14),\\n        deprotonate_elements=[\\"N\\", \\"O\\"],\\n        mode=\\"meticulous\\"\\n    )\\n","inputSchema":{"properties":{"initial_molecule":{"title":"Initial Molecule","type":"string"},"pka_range":{"default":[2,12],"maxItems":2,"minItems":2,"prefixItems":[{"type":"number"},{"type":"number"}],"title":"Pka Range","type":"array"},"deprotonate_elements":{"anyOf":[{"items":{"type":"string"},"type":"array"},{"type":"null"}],"default":null,"title":"Deprotonate Elements"},"protonate_elements":{"anyOf":[{"items":{"type":"string"},"type":"array"},{"type":"null"}],"default":null,"title":"Protonate Elements"},"mode":{"default":"careful","title":"Mode","type":"string"},"name":{"default":"pKa Workflow","title":"Name","type":"string"},"folder_uuid":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"title":"Folder Uuid"},"max_credits":{"anyOf":[{"type":"integer"},{"type":"null"}],"default":null,"title":"Max Credits"}},"required":["initial_molecule"],"type":"object"}},{"name":"submit_redox_potential_workflow","description":"Submit a redox potential calculation workflow using Rowan v2 API.\\n\\nCalculates reduction and/or oxidation potentials for a molecule using\\nquantum chemistry methods.\\n\\nArgs:\\n    initial_molecule: SMILES string or molecule object\\n    reduction: Whether to calculate reduction potential (default: False)\\n    oxidization: Whether to calculate oxidation potential (default: True)\\n    mode: Calculation mode (default: \\"rapid\\")\\n        Options: \\"rapid\\", \\"careful\\", \\"meticulous\\"\\n    name: Workflow name for tracking\\n    folder_uuid: Optional folder UUID for organization\\n    max_credits: Optional credit limit for the calculation\\n    \\nReturns:\\n    Workflow object representing the submitted workflow\\n    \\nExample:\\n    # Basic oxidation potential\\n    result = submit_redox_potential_workflow(\\n        initial_molecule=\\"CC1=CC=CC=C1\\",\\n        oxidization=True\\n    )\\n    \\n    # Both reduction and oxidation with careful mode\\n    result = submit_redox_potential_workflow(\\n        initial_molecule=\\"c1ccccc1\\",\\n        reduction=True,\\n        oxidization=True,\\n        mode=\\"careful\\"\\n    )\\n","inputSchema":{"properties":{"initial_molecule":{"title":"Initial Molecule","type":"string"},"reduction":{"default":false,"title":"Reduction","type":"boolean"},"oxidization":{"default":true,"title":"Oxidization","type":"boolean"},"mode":{"default":"rapid","title":"Mode","type":"string"},"name":{"default":"Redox Potential Workflow","title":"Name","type":"string"},"folder_uuid":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"title":"Folder Uuid"},"max_credits":{"anyOf":[{"type":"integer"},{"type":"null"}],"default":null,"title":"Max Credits"}},"required":["initial_molecule"],"type":"object"}},{"name":"submit_fukui_workflow","description":"Submit a Fukui indices calculation workflow using Rowan v2 API.\\n\\nCalculates Fukui indices to predict molecular reactivity at different sites.\\nFukui indices indicate susceptibility to nucleophilic/electrophilic attack.\\n\\nArgs:\\n    initial_molecule: SMILES string or molecule object\\n    optimization_method: Method for geometry optimization (default: \\"gfn2_xtb\\")\\n        Common options: \\"gfn2_xtb\\", \\"r2scan_3c\\", \\"aimnet2_wb97md3\\"\\n    fukui_method: Method for Fukui calculation (default: \\"gfn1_xtb\\")\\n        Common options: \\"gfn1_xtb\\", \\"gfn2_xtb\\"\\n    solvent_settings: Optional solvent configuration dictionary\\n        Example: {\\"solvent\\": \\"water\\", \\"model\\": \\"alpb\\"}\\n    name: Workflow name for tracking\\n    folder_uuid: Optional folder UUID for organization\\n    max_credits: Optional credit limit for the calculation\\n    \\nReturns:\\n    Workflow object representing the submitted workflow\\n    \\nExample:\\n    # Basic Fukui indices\\n    result = submit_fukui_workflow(\\n        initial_molecule=\\"CC(=O)O\\"\\n    )\\n    \\n    # With solvent and advanced methods\\n    result = submit_fukui_workflow(\\n        initial_molecule=\\"c1ccccc1N\\",\\n        optimization_method=\\"r2scan_3c\\",\\n        fukui_method=\\"gfn2_xtb\\",\\n        solvent_settings={\\"solvent\\": \\"water\\", \\"model\\": \\"alpb\\"}\\n    )\\n","inputSchema":{"properties":{"initial_molecule":{"title":"Initial Molecule","type":"string"},"optimization_method":{"default":"gfn2_xtb","title":"Optimization Method","type":"string"},"fukui_method":{"default":"gfn1_xtb","title":"Fukui Method","type":"string"},"solvent_settings":{"anyOf":[{"additionalProperties":true,"type":"object"},{"type":"null"}],"default":null,"title":"Solvent Settings"},"name":{"default":"Fukui Workflow","title":"Name","type":"string"},"folder_uuid":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"title":"Folder Uuid"},"max_credits":{"anyOf":[{"type":"integer"},{"type":"null"}],"default":null,"title":"Max Credits"}},"required":["initial_molecule"],"type":"object"}},{"name":"submit_tautomer_search_workflow","description":"Submit a tautomer search workflow using Rowan v2 API.\\n\\nSearches for different tautomeric forms of a molecule and evaluates their\\nrelative stabilities. Tautomers are structural isomers that readily interconvert.\\n\\nArgs:\\n    initial_molecule: SMILES string or molecule object\\n    mode: Search mode (default: \\"careful\\")\\n        Options: \\"rapid\\", \\"careful\\", \\"meticulous\\"\\n    name: Workflow name for tracking\\n    folder_uuid: Optional folder UUID for organization\\n    max_credits: Optional credit limit for the calculation\\n    \\nReturns:\\n    Workflow object representing the submitted workflow\\n    \\nExample:\\n    # Basic tautomer search\\n    result = submit_tautomer_search_workflow(\\n        initial_molecule=\\"CC(=O)CC(=O)C\\"\\n    )\\n    \\n    # Meticulous search for complex molecule\\n    result = submit_tautomer_search_workflow(\\n        initial_molecule=\\"c1ccc2c(c1)ncc(=O)[nH]2\\",\\n        mode=\\"meticulous\\"\\n    )\\n","inputSchema":{"properties":{"initial_molecule":{"title":"Initial Molecule","type":"string"},"mode":{"default":"careful","title":"Mode","type":"string"},"name":{"default":"Tautomer Search Workflow","title":"Name","type":"string"},"folder_uuid":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"title":"Folder Uuid"},"max_credits":{"anyOf":[{"type":"integer"},{"type":"null"}],"default":null,"title":"Max Credits"}},"required":["initial_molecule"],"type":"object"}},{"name":"submit_descriptors_workflow","description":"Submit a molecular descriptors calculation workflow using Rowan v2 API.\\n\\nCalculates a comprehensive set of molecular descriptors including:\\n- Physical properties (MW, logP, TPSA, etc.)\\n- Electronic properties (HOMO/LUMO, dipole moment, etc.)\\n- Structural features (rotatable bonds, H-bond donors/acceptors, etc.)\\n- Topological indices\\n\\nArgs:\\n    initial_molecule: SMILES string or molecule object\\n    name: Workflow name for tracking\\n    folder_uuid: Optional folder UUID for organization\\n    max_credits: Optional credit limit for the calculation\\n    \\nReturns:\\n    Workflow object representing the submitted workflow\\n    \\nExample:\\n    # Basic descriptor calculation\\n    result = submit_descriptors_workflow(\\n        initial_molecule=\\"CC(=O)Nc1ccc(O)cc1\\"\\n    )\\n    \\n    # For complex molecule\\n    result = submit_descriptors_workflow(\\n        initial_molecule=\\"CN1C=NC2=C1C(=O)N(C(=O)N2C)C\\",\\n        name=\\"Caffeine Descriptors\\"\\n    )\\n","inputSchema":{"properties":{"initial_molecule":{"title":"Initial Molecule","type":"string"},"name":{"default":"Descriptors Workflow","title":"Name","type":"string"},"folder_uuid":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"title":"Folder Uuid"},"max_credits":{"anyOf":[{"type":"integer"},{"type":"null"}],"default":null,"title":"Max Credits"}},"required":["initial_molecule"],"type":"object"}},{"name":"submit_scan_workflow","description":"Submit a potential energy surface scan workflow using Rowan v2 API.\\n\\nPerforms systematic scans along specified molecular coordinates (bonds, angles,\\nor dihedrals) to map the potential energy surface.\\n\\nArgs:\\n    initial_molecule: SMILES string or molecule object\\n    scan_settings: Dictionary specifying scan parameters\\n        Example: {\\n            \\"type\\": \\"dihedral\\",  # or \\"bond\\", \\"angle\\"\\n            \\"atoms\\": [0, 1, 2, 3],  # atom indices\\n            \\"start\\": -180,\\n            \\"stop\\": 180,\\n            \\"step\\": 10\\n        }\\n    calculation_engine: Computational engine (default: \\"omol25\\")\\n        Options: \\"omol25\\", \\"xtb\\", \\"psi4\\"\\n    calculation_method: Method for calculations (default: \\"uma_m_omol\\")\\n        Options depend on engine\\n    wavefront_propagation: Use wavefront optimization (default: True)\\n        Speeds up scans by using previous geometries as starting points\\n    name: Workflow name for tracking\\n    folder_uuid: Optional folder UUID for organization\\n    max_credits: Optional credit limit for the calculation\\n    \\nReturns:\\n    Workflow object representing the submitted workflow\\n    \\nExample:\\n    # Dihedral scan\\n    result = submit_scan_workflow(\\n        initial_molecule=\\"CC(C)CC\\",\\n        scan_settings={\\n            \\"type\\": \\"dihedral\\",\\n            \\"atoms\\": [0, 1, 2, 3],\\n            \\"start\\": -180,\\n            \\"stop\\": 180,\\n            \\"step\\": 15\\n        }\\n    )\\n    \\n    # Bond scan with advanced method\\n    result = submit_scan_workflow(\\n        initial_molecule=\\"CC\\",\\n        scan_settings={\\n            \\"type\\": \\"bond\\",\\n            \\"atoms\\": [0, 1],\\n            \\"start\\": 1.0,\\n            \\"stop\\": 2.5,\\n            \\"step\\": 0.1\\n        },\\n        calculation_method=\\"r2scan_3c\\"\\n    )\\n","inputSchema":{"properties":{"initial_molecule":{"title":"Initial Molecule","type":"string"},"scan_settings":{"anyOf":[{"additionalProperties":true,"type":"object"},{"type":"null"}],"default":null,"title":"Scan Settings"},"calculation_engine":{"default":"omol25","title":"Calculation Engine","type":"string"},"calculation_method":{"default":"uma_m_omol","title":"Calculation Method","type":"string"},"wavefront_propagation":{"default":true,"title":"Wavefront Propagation","type":"boolean"},"name":{"default":"Scan Workflow","title":"Name","type":"string"},"folder_uuid":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"title":"Folder Uuid"},"max_credits":{"anyOf":[{"type":"integer"},{"type":"null"}],"default":null,"title":"Max Credits"}},"required":["initial_molecule"],"type":"object"}},{"name":"submit_irc_workflow","description":"Submits an Intrinsic Reaction Coordinate (IRC) workflow to the API.\\n\\nArgs:\\n    initial_molecule: The initial molecule to perform the IRC calculation on.\\n        Can be a dict, StJamesMolecule, or RdkitMol object\\n    method: The computational method to use for the IRC calculation (default: \\"uma_m_omol\\")\\n        See list of available methods for options\\n    engine: The computational engine to use for the calculation (default: \\"omol25\\")\\n        See list of available engines\\n    preopt: Whether to perform a pre-optimization of the molecule (default: True)\\n    step_size: The step size to use for the IRC calculation (default: 0.05)\\n    max_irc_steps: The maximum number of IRC steps to perform (default: 30)\\n    name: The name of the workflow\\n    folder_uuid: The UUID of the folder to place the workflow in\\n    max_credits: The maximum number of credits to use for the workflow\\n    \\nReturns:\\n    Workflow object representing the submitted IRC workflow\\n    \\nExample:\\n    # Basic IRC calculation\\n    result = submit_irc_workflow(\\n        initial_molecule={\\"smiles\\": \\"[CH3].[CH3]\\"},\\n        method=\\"gfn2_xtb\\",\\n        max_irc_steps=50\\n    )\\n    \\n    # IRC with specific method and engine\\n    result = submit_irc_workflow(\\n        initial_molecule={\\"smiles\\": \\"CC(O)=CC\\"},\\n        method=\\"r2scan_3c\\",\\n        engine=\\"psi4\\",\\n        step_size=0.03\\n    )\\n","inputSchema":{"properties":{"initial_molecule":{"anyOf":[{"additionalProperties":true,"type":"object"},{},{"type":"null"}],"default":null,"title":"Initial Molecule"},"method":{"default":"uma_m_omol","title":"Method","type":"string"},"engine":{"default":"omol25","title":"Engine","type":"string"},"preopt":{"default":true,"title":"Preopt","type":"boolean"},"step_size":{"default":0.05,"title":"Step Size","type":"number"},"max_irc_steps":{"default":30,"title":"Max Irc Steps","type":"integer"},"name":{"default":"IRC Workflow","title":"Name","type":"string"},"folder_uuid":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"title":"Folder Uuid"},"max_credits":{"anyOf":[{"type":"integer"},{"type":"null"}],"default":null,"title":"Max Credits"}},"type":"object"}},{"name":"submit_protein_cofolding_workflow","description":"Submits a protein cofolding workflow to the API.\\n\\nArgs:\\n    initial_protein_sequences: The sequences of the proteins to be cofolded\\n    initial_smiles_list: A list of SMILES strings for the ligands to be cofolded with\\n    ligand_binding_affinity_index: The index of the ligand for which to compute the binding affinity\\n    use_msa_server: Whether to use the MSA server for the computation\\n    use_potentials: Whether to use potentials for the computation\\n    name: The name of the workflow\\n    model: The model to use for the computation\\n    folder_uuid: The UUID of the folder to store the workflow in\\n    max_credits: The maximum number of credits to use for the workflow\\n    \\nReturns:\\n    Workflow object representing the submitted workflow\\n    \\nExample:\\n    # Protein dimer cofolding\\n    result = submit_protein_cofolding_workflow(\\n        initial_protein_sequences=[\\n            \\"MKTAYIAKQRQISFVKSHFSRQLEERLGLIEVQAPILSRVGDGTQDNLSGAEK\\",\\n            \\"MKQHKAMIVALIVICITAVVAALVTRKDLCEVHIRTGQTEVAVF\\"\\n        ]\\n    )\\n    \\n    # Protein-ligand complex\\n    result = submit_protein_cofolding_workflow(\\n        initial_protein_sequences=[\\"MGSSHHHHHHSSGLVPRGSH\\"],\\n        initial_smiles_list=[\\"CC(=O)O\\", \\"CCO\\"],\\n        ligand_binding_affinity_index=0,\\n        use_msa_server=True\\n    )\\n","inputSchema":{"properties":{"initial_protein_sequences":{"items":{"type":"string"},"title":"Initial Protein Sequences","type":"array"},"initial_smiles_list":{"anyOf":[{"items":{"type":"string"},"type":"array"},{"type":"null"}],"default":null,"title":"Initial Smiles List"},"ligand_binding_affinity_index":{"anyOf":[{"type":"integer"},{"type":"null"}],"default":null,"title":"Ligand Binding Affinity Index"},"use_msa_server":{"default":true,"title":"Use Msa Server","type":"boolean"},"use_potentials":{"default":false,"title":"Use Potentials","type":"boolean"},"name":{"default":"Cofolding Workflow","title":"Name","type":"string"},"model":{"default":"boltz_2","title":"Model","type":"string"},"folder_uuid":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"title":"Folder Uuid"},"max_credits":{"anyOf":[{"type":"integer"},{"type":"null"}],"default":null,"title":"Max Credits"}},"required":["initial_protein_sequences"],"type":"object"}},{"name":"submit_docking_workflow","description":"Submits a Docking workflow to the API.\\n\\nArgs:\\n    protein: The protein to dock. Can be fed as a uuid or a Protein object\\n    pocket: The pocket to dock into\\n    initial_molecule: The initial molecule to be docked.\\n        Can be a dict, StJamesMolecule, or RdkitMol object\\n    do_csearch: Whether to perform a conformational search on the ligand\\n    do_optimization: Whether to perform an optimization on the ligand\\n    name: The name of the workflow\\n    folder_uuid: The UUID of the folder to place the workflow in\\n    max_credits: The maximum number of credits to use for the workflow\\n    \\nReturns:\\n    Workflow object representing the submitted workflow\\n    \\nExample:\\n    # Basic docking with protein UUID\\n    result = submit_docking_workflow(\\n        protein=\\"protein-uuid-123\\",\\n        pocket=pocket_obj,\\n        initial_molecule={\\"smiles\\": \\"CC(=O)Oc1ccccc1C(=O)O\\"}\\n    )\\n    \\n    # Docking with optimization disabled\\n    result = submit_docking_workflow(\\n        protein=protein_obj,\\n        pocket=pocket_obj,\\n        initial_molecule={\\"smiles\\": \\"CCO\\"},\\n        do_csearch=False,\\n        do_optimization=False\\n    )\\n","inputSchema":{"properties":{"protein":{"anyOf":[{"type":"string"},{}],"title":"Protein"},"pocket":{"title":"Pocket"},"initial_molecule":{"anyOf":[{"additionalProperties":true,"type":"object"},{},{"type":"null"}],"default":null,"title":"Initial Molecule"},"do_csearch":{"default":true,"title":"Do Csearch","type":"boolean"},"do_optimization":{"default":true,"title":"Do Optimization","type":"boolean"},"name":{"default":"Docking Workflow","title":"Name","type":"string"},"folder_uuid":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"title":"Folder Uuid"},"max_credits":{"anyOf":[{"type":"integer"},{"type":"null"}],"default":null,"title":"Max Credits"}},"required":["protein","pocket"],"type":"object"}},{"name":"workflow_fetch_latest","description":"Fetch the latest workflow data from the database.\\n\\nUpdates the workflow object with the most recent status and results.\\n\\nArgs:\\n    workflow_uuid: The UUID of the workflow to fetch\\n    in_place: Whether to update the workflow object in place (default: False)\\n    \\nReturns:\\n    Dictionary containing the updated workflow data including status and results\\n","inputSchema":{"properties":{"workflow_uuid":{"title":"Workflow Uuid","type":"string"},"in_place":{"default":false,"title":"In Place","type":"boolean"}},"required":["workflow_uuid"],"type":"object"}},{"name":"workflow_wait_for_result","description":"Wait for a workflow to complete and return the result.\\n\\nBlocks until the workflow completes, polling at specified intervals.\\n\\nArgs:\\n    workflow_uuid: The UUID of the workflow to wait for\\n    poll_interval: Time in seconds between status checks (default: 5)\\n    \\nReturns:\\n    Dictionary containing the completed workflow data including results\\n","inputSchema":{"properties":{"workflow_uuid":{"title":"Workflow Uuid","type":"string"},"poll_interval":{"default":5,"title":"Poll Interval","type":"integer"}},"required":["workflow_uuid"],"type":"object"}},{"name":"workflow_get_status","description":"Get the current status of a workflow.\\n\\nArgs:\\n    workflow_uuid: The UUID of the workflow\\n    \\nReturns:\\n    Dictionary with status information\\n","inputSchema":{"properties":{"workflow_uuid":{"title":"Workflow Uuid","type":"string"}},"required":["workflow_uuid"],"type":"object"}},{"name":"workflow_stop","description":"Stop a running workflow.\\n\\nArgs:\\n    workflow_uuid: The UUID of the workflow to stop\\n    \\nReturns:\\n    Dictionary with confirmation message\\n","inputSchema":{"properties":{"workflow_uuid":{"title":"Workflow Uuid","type":"string"}},"required":["workflow_uuid"],"type":"object"}},{"name":"workflow_delete","description":"Delete a workflow.\\n\\nThis permanently removes the workflow and its results from the database.\\n\\nArgs:\\n    workflow_uuid: The UUID of the workflow to delete\\n    \\nReturns:\\n    Dictionary with confirmation message\\n","inputSchema":{"properties":{"workflow_uuid":{"title":"Workflow Uuid","type":"string"}},"required":["workflow_uuid"],"type":"object"}},{"name":"retrieve_workflow","description":"Retrieve a workflow from the API.\\n\\nArgs:\\n    uuid: The UUID of the workflow to retrieve\\n    \\nReturns:\\n    Dictionary containing the complete workflow data\\n    \\nRaises:\\n    HTTPError: If the API request fails\\n","inputSchema":{"properties":{"uuid":{"title":"Uuid","type":"string"}},"required":["uuid"],"type":"object"}},{"name":"retrieve_calculation_molecules","description":"Retrieve a list of molecules from a calculation.\\n\\nArgs:\\n    uuid: The UUID of the calculation to retrieve molecules from\\n    \\nReturns:\\n    List of dictionaries representing the molecules in the calculation\\n    \\nRaises:\\n    HTTPError: If the API request fails\\n","inputSchema":{"properties":{"uuid":{"title":"Uuid","type":"string"}},"required":["uuid"],"type":"object"}},{"name":"list_workflows","description":"List workflows subject to the specified criteria.\\n\\nArgs:\\n    parent_uuid: The UUID of the parent folder\\n    name_contains: Substring to search for in workflow names\\n    public: Filter workflows by their public status\\n    starred: Filter workflows by their starred status\\n    status: Filter workflows by their status\\n    workflow_type: Filter workflows by their type\\n    page: The page number to retrieve (default: 0)\\n    size: The number of items per page (default: 10)\\n    \\nReturns:\\n    List of workflow dictionaries that match the search criteria\\n    \\nRaises:\\n    HTTPError: If the request to the API fails\\n","inputSchema":{"properties":{"parent_uuid":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"title":"Parent Uuid"},"name_contains":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"title":"Name Contains"},"public":{"anyOf":[{"type":"boolean"},{"type":"null"}],"default":null,"title":"Public"},"starred":{"anyOf":[{"type":"boolean"},{"type":"null"}],"default":null,"title":"Starred"},"status":{"anyOf":[{"type":"integer"},{"type":"null"}],"default":null,"title":"Status"},"workflow_type":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"title":"Workflow Type"},"page":{"default":0,"title":"Page","type":"integer"},"size":{"default":10,"title":"Size","type":"integer"}},"type":"object"}},{"name":"workflow_update","description":"Update workflow details.\\n\\nArgs:\\n    workflow_uuid: The UUID of the workflow to update\\n    name: New name for the workflow (optional)\\n    notes: New notes for the workflow (optional)\\n    starred: Whether to star/unstar the workflow (optional)\\n    public: Whether to make the workflow public/private (optional)\\n    \\nReturns:\\n    Dictionary with updated workflow information\\n","inputSchema":{"properties":{"workflow_uuid":{"title":"Workflow Uuid","type":"string"},"name":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"title":"Name"},"notes":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"title":"Notes"},"starred":{"anyOf":[{"type":"boolean"},{"type":"null"}],"default":null,"title":"Starred"},"public":{"anyOf":[{"type":"boolean"},{"type":"null"}],"default":null,"title":"Public"}},"required":["workflow_uuid"],"type":"object"}},{"name":"workflow_is_finished","description":"Check if a workflow is finished.\\n\\nArgs:\\n    workflow_uuid: The UUID of the workflow to check\\n    \\nReturns:\\n    Dictionary with workflow completion status\\n","inputSchema":{"properties":{"workflow_uuid":{"title":"Workflow Uuid","type":"string"}},"required":["workflow_uuid"],"type":"object"}},{"name":"workflow_delete_data","description":"Delete workflow data while keeping the workflow record.\\n\\nArgs:\\n    workflow_uuid: The UUID of the workflow\\n    \\nReturns:\\n    Dictionary with confirmation message\\n","inputSchema":{"properties":{"workflow_uuid":{"title":"Workflow Uuid","type":"string"}},"required":["workflow_uuid"],"type":"object"}}]}}\r\n\r\n'
2025-08-02 13:57:37,257 - mcp.server.sse - DEBUG - Handling POST message
2025-08-02 13:57:37,258 - mcp.server.sse - DEBUG - Parsed session ID: de7fcb53-49c7-4e5c-ad94-9d0b2fe064ed
2025-08-02 13:57:37,258 - mcp.server.sse - DEBUG - Received JSON: b'{"method":"prompts/list","jsonrpc":"2.0","id":3}'
2025-08-02 13:57:37,258 - mcp.server.sse - DEBUG - Validated client message: root=JSONRPCRequest(method='prompts/list', params=None, jsonrpc='2.0', id=3)
2025-08-02 13:57:37,258 - mcp.server.sse - DEBUG - Sending session message to writer: SessionMessage(message=JSONRPCMessage(root=JSONRPCRequest(method='prompts/list', params=None, jsonrpc='2.0', id=3)), metadata=ServerMessageMetadata(related_request_id=None, request_context=<starlette.requests.Request object at 0x109f92ba0>))
2025-08-02 13:57:37,258 - mcp.server.lowlevel.server - DEBUG - Received message: <mcp.shared.session.RequestResponder object at 0x109fa79d0>
2025-08-02 13:57:37,258 - mcp.server.lowlevel.server - INFO - Processing request of type ListPromptsRequest
2025-08-02 13:57:37,259 - mcp.server.lowlevel.server - DEBUG - Dispatching request of type ListPromptsRequest
2025-08-02 13:57:37,259 - mcp.server.lowlevel.server - DEBUG - Response sent
2025-08-02 13:57:37,259 - mcp.server.sse - DEBUG - Sending message via SSE: SessionMessage(message=JSONRPCMessage(root=JSONRPCResponse(jsonrpc='2.0', id=3, result={'prompts': []})), metadata=None)
2025-08-02 13:57:37,259 - sse_starlette.sse - DEBUG - chunk: b'event: message\r\ndata: {"jsonrpc":"2.0","id":3,"result":{"prompts":[]}}\r\n\r\n'
2025-08-02 13:57:37,957 - sse_starlette.sse - DEBUG - Got event: http.disconnect. Stop streaming.
2025-08-02 13:57:37,958 - root - DEBUG - Client session disconnected de7fcb53-49c7-4e5c-ad94-9d0b2fe064ed
2025-08-02 13:57:38,704 - mcp.server.sse - DEBUG - Setting up SSE connection
2025-08-02 13:57:38,704 - mcp.server.sse - DEBUG - Created new session with ID: 55686284-859c-4203-9d93-d3bdd3693f32
2025-08-02 13:57:38,704 - mcp.server.sse - DEBUG - Starting SSE response task
2025-08-02 13:57:38,704 - mcp.server.sse - DEBUG - Yielding read and write streams
2025-08-02 13:57:38,706 - mcp.server.sse - DEBUG - Starting SSE writer
2025-08-02 13:57:38,707 - mcp.server.sse - DEBUG - Sent endpoint event: /messages/?session_id=55686284859c42039d93d3bdd3693f32
2025-08-02 13:57:38,708 - sse_starlette.sse - DEBUG - chunk: b'event: endpoint\r\ndata: /messages/?session_id=55686284859c42039d93d3bdd3693f32\r\n\r\n'
2025-08-02 13:57:38,710 - mcp.server.sse - DEBUG - Handling POST message
2025-08-02 13:57:38,710 - mcp.server.sse - DEBUG - Parsed session ID: 55686284-859c-4203-9d93-d3bdd3693f32
2025-08-02 13:57:38,710 - mcp.server.sse - DEBUG - Received JSON: b'{"method":"initialize","params":{"protocolVersion":"2025-06-18","capabilities":{"tools":true,"prompts":true,"resources":false,"logging":false,"roots":{"listChanged":false}},"clientInfo":{"name":"cursor-vscode","version":"1.0.0"}},"jsonrpc":"2.0","id":1}'
2025-08-02 13:57:38,711 - mcp.server.sse - DEBUG - Validated client message: root=JSONRPCRequest(method='initialize', params={'protocolVersion': '2025-06-18', 'capabilities': {'tools': True, 'prompts': True, 'resources': False, 'logging': False, 'roots': {'listChanged': False}}, 'clientInfo': {'name': 'cursor-vscode', 'version': '1.0.0'}}, jsonrpc='2.0', id=1)
2025-08-02 13:57:38,711 - mcp.server.sse - DEBUG - Sending session message to writer: SessionMessage(message=JSONRPCMessage(root=JSONRPCRequest(method='initialize', params={'protocolVersion': '2025-06-18', 'capabilities': {'tools': True, 'prompts': True, 'resources': False, 'logging': False, 'roots': {'listChanged': False}}, 'clientInfo': {'name': 'cursor-vscode', 'version': '1.0.0'}}, jsonrpc='2.0', id=1)), metadata=ServerMessageMetadata(related_request_id=None, request_context=<starlette.requests.Request object at 0x109f92f90>))
2025-08-02 13:57:38,711 - mcp.server.sse - DEBUG - Sending message via SSE: SessionMessage(message=JSONRPCMessage(root=JSONRPCResponse(jsonrpc='2.0', id=1, result={'protocolVersion': '2025-03-26', 'capabilities': {'experimental': {}, 'prompts': {'listChanged': False}, 'resources': {'subscribe': False, 'listChanged': False}, 'tools': {'listChanged': False}}, 'serverInfo': {'name': 'Rowan MCP Server', 'version': '1.9.3'}})), metadata=None)
2025-08-02 13:57:38,711 - sse_starlette.sse - DEBUG - chunk: b'event: message\r\ndata: {"jsonrpc":"2.0","id":1,"result":{"protocolVersion":"2025-03-26","capabilities":{"experimental":{},"prompts":{"listChanged":false},"resources":{"subscribe":false,"listChanged":false},"tools":{"listChanged":false}},"serverInfo":{"name":"Rowan MCP Server","version":"1.9.3"}}}\r\n\r\n'
2025-08-02 13:57:38,714 - mcp.server.sse - DEBUG - Handling POST message
2025-08-02 13:57:38,714 - mcp.server.sse - DEBUG - Parsed session ID: 55686284-859c-4203-9d93-d3bdd3693f32
2025-08-02 13:57:38,714 - mcp.server.sse - DEBUG - Received JSON: b'{"method":"notifications/initialized","jsonrpc":"2.0"}'
2025-08-02 13:57:38,715 - mcp.server.sse - DEBUG - Validated client message: root=JSONRPCNotification(method='notifications/initialized', params=None, jsonrpc='2.0')
2025-08-02 13:57:38,715 - mcp.server.sse - DEBUG - Sending session message to writer: SessionMessage(message=JSONRPCMessage(root=JSONRPCNotification(method='notifications/initialized', params=None, jsonrpc='2.0')), metadata=ServerMessageMetadata(related_request_id=None, request_context=<starlette.requests.Request object at 0x109f930b0>))
2025-08-02 13:57:38,715 - mcp.server.lowlevel.server - DEBUG - Received message: root=InitializedNotification(method='notifications/initialized', params=None, jsonrpc='2.0')
2025-08-02 13:57:38,719 - mcp.server.sse - DEBUG - Handling POST message
2025-08-02 13:57:38,719 - mcp.server.sse - DEBUG - Parsed session ID: 55686284-859c-4203-9d93-d3bdd3693f32
2025-08-02 13:57:38,719 - mcp.server.sse - DEBUG - Received JSON: b'{"method":"tools/list","jsonrpc":"2.0","id":2}'
2025-08-02 13:57:38,719 - mcp.server.sse - DEBUG - Validated client message: root=JSONRPCRequest(method='tools/list', params=None, jsonrpc='2.0', id=2)
2025-08-02 13:57:38,719 - mcp.server.sse - DEBUG - Sending session message to writer: SessionMessage(message=JSONRPCMessage(root=JSONRPCRequest(method='tools/list', params=None, jsonrpc='2.0', id=2)), metadata=ServerMessageMetadata(related_request_id=None, request_context=<starlette.requests.Request object at 0x109f931d0>))
2025-08-02 13:57:38,720 - mcp.server.lowlevel.server - DEBUG - Received message: <mcp.shared.session.RequestResponder object at 0x10a007100>
2025-08-02 13:57:38,720 - mcp.server.lowlevel.server - INFO - Processing request of type ListToolsRequest
2025-08-02 13:57:38,720 - mcp.server.lowlevel.server - DEBUG - Dispatching request of type ListToolsRequest
2025-08-02 13:57:38,721 - mcp.server.lowlevel.server - DEBUG - Response sent
2025-08-02 13:57:38,722 - mcp.server.sse - DEBUG - Sending message via SSE: SessionMessage(message=JSONRPCMessage(root=JSONRPCResponse(jsonrpc='2.0', id=2, result={'tools': [{'name': 'submit_basic_calculation_workflow', 'description': 'Submit a basic calculation workflow using Rowan v2 API.\n\nPerforms fundamental quantum chemistry calculations with configurable methods\nand computational tasks. Returns a workflow object for tracking progress.\n', 'inputSchema': {'properties': {'initial_molecule': {'anyOf': [{'type': 'string'}, {'additionalProperties': True, 'type': 'object'}, {}], 'description': 'The molecule to perform the calculation on. Can be a SMILES string, dict, StJamesMolecule, or RdkitMol object', 'title': 'Initial Molecule'}, 'method': {'default': 'uma_m_omol', 'description': "The method to use for the calculation (e.g., 'uma_m_omol', 'gfn2-xtb', 'r2scan_3c')", 'title': 'Method', 'type': 'string'}, 'tasks': {'anyOf': [{'items': {'type': 'string'}, 'type': 'array'}, {'type': 'null'}], 'default': None, 'description': "List of computational tasks to perform. Optional[List[str]] (e.g. ['optimize']), Defaults to None", 'title': 'Tasks'}, 'mode': {'default': 'auto', 'description': "The mode to run the calculation in ('auto', 'rapid', 'careful', 'meticulous')", 'title': 'Mode', 'type': 'string'}, 'engine': {'default': 'omol25', 'description': "The computational engine to use ('omol25', 'xtb', 'psi4')", 'title': 'Engine', 'type': 'string'}, 'name': {'default': 'Basic Calculation Workflow', 'description': 'The name of the workflow for identification', 'title': 'Name', 'type': 'string'}, 'folder_uuid': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'UUID of the folder to place the workflow in (optional)', 'title': 'Folder Uuid'}, 'max_credits': {'anyOf': [{'type': 'integer'}, {'type': 'null'}], 'default': None, 'description': 'Maximum number of credits to use for the workflow (optional)', 'title': 'Max Credits'}}, 'required': ['initial_molecule'], 'type': 'object'}}, {'name': 'submit_conformer_search_workflow', 'description': 'Submit a conformer search workflow using Rowan v2 API.\n\nExplores the conformational space of a molecule to find low-energy structures.\n\nArgs:\n    initial_molecule: SMILES string or molecule object\n    conf_gen_mode: default to "rapid"\n        Options: "rapid", "careful", "meticulous"\n    final_method: default: "aimnet2_wb97md3"\n        Try other options, if user specifies\n    solvent: Optional solvent for implicit solvation (e.g., "water", "ethanol")\n    transition_state: Whether searching for transition state conformers (default: False)\n    name: Workflow name for tracking\n    folder_uuid: Optional folder UUID for organization\n    max_credits: Optional credit limit for the calculation\n    \nReturns:\n    Workflow object representing the submitted workflow\n    \nExample:\n    # Basic conformer search\n    result = submit_conformer_search_workflow(\n        initial_molecule="CCCC",\n        conf_gen_mode="rapid"\n    )\n    \n    # Careful search with solvent\n    result = submit_conformer_search_workflow(\n        initial_molecule="CC(C)CC(=O)O",\n        conf_gen_mode="careful",\n        solvent="water",\n        final_method="r2scan_3c"\n    )\n', 'inputSchema': {'properties': {'initial_molecule': {'title': 'Initial Molecule', 'type': 'string'}, 'conf_gen_mode': {'default': 'rapid', 'title': 'Conf Gen Mode', 'type': 'string'}, 'final_method': {'default': 'aimnet2_wb97md3', 'title': 'Final Method', 'type': 'string'}, 'solvent': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Solvent'}, 'transition_state': {'default': False, 'title': 'Transition State', 'type': 'boolean'}, 'name': {'default': 'Conformer Search Workflow', 'title': 'Name', 'type': 'string'}, 'folder_uuid': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Folder Uuid'}, 'max_credits': {'anyOf': [{'type': 'integer'}, {'type': 'null'}], 'default': None, 'title': 'Max Credits'}}, 'required': ['initial_molecule'], 'type': 'object'}}, {'name': 'submit_solubility_workflow', 'description': 'Submit a solubility prediction workflow using Rowan v2 API.\n\nPredicts solubility (log S) of a molecule in multiple solvents at various temperatures\nusing machine learning models.\n\nArgs:\n    initial_smiles: SMILES string of the molecule\n    solvents: List of solvents as SMILES or common names (e.g., ["water", "ethanol"])\n        If None, uses default solvents\n    temperatures: List of temperatures in Kelvin\n        If None, uses default temperature range\n    name: Workflow name for tracking\n    folder_uuid: Optional folder UUID for organization\n    max_credits: Optional credit limit for the calculation\n    \nReturns:\n    Workflow object representing the submitted workflow\n    \nExample:\n    # Basic solubility prediction\n    result = submit_solubility_workflow(\n        initial_smiles="CC(=O)Nc1ccc(O)cc1",\n        solvents=["water", "ethanol"],\n        temperatures=[298.15, 310.15]\n    )\n    \n    # With SMILES solvents\n    result = submit_solubility_workflow(\n        initial_smiles="CC(=O)O",\n        solvents=["O", "CCO", "CCCCCC"],\n        temperatures=[273.15, 298.15, 323.15]\n    )\n', 'inputSchema': {'properties': {'initial_smiles': {'title': 'Initial Smiles', 'type': 'string'}, 'solvents': {'anyOf': [{'items': {'type': 'string'}, 'type': 'array'}, {'type': 'null'}], 'default': None, 'title': 'Solvents'}, 'temperatures': {'anyOf': [{'items': {'type': 'number'}, 'type': 'array'}, {'type': 'null'}], 'default': None, 'title': 'Temperatures'}, 'name': {'default': 'Solubility Workflow', 'title': 'Name', 'type': 'string'}, 'folder_uuid': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Folder Uuid'}, 'max_credits': {'anyOf': [{'type': 'integer'}, {'type': 'null'}], 'default': None, 'title': 'Max Credits'}}, 'required': ['initial_smiles'], 'type': 'object'}}, {'name': 'submit_pka_workflow', 'description': 'Submit a pKa prediction workflow using Rowan v2 API.\n\nPredicts acid dissociation constants (pKa) for ionizable groups in a molecule\nusing quantum chemistry calculations.\n\nArgs:\n    initial_molecule: SMILES string or molecule object\n    pka_range: Tuple of (min, max) pKa values to search (default: (2, 12))\n    deprotonate_elements: List of elements to consider for deprotonation\n        (e.g., ["N", "O", "S"]). If None, uses defaults\n    protonate_elements: List of elements to consider for protonation\n        (e.g., ["N", "O"]). If None, uses defaults\n    mode: Calculation mode (default: "careful")\n        Options: "rapid", "careful", "meticulous"\n    name: Workflow name for tracking\n    folder_uuid: Optional folder UUID for organization\n    max_credits: Optional credit limit for the calculation\n    \nReturns:\n    Workflow object representing the submitted workflow\n    \nExample:\n    # Basic pKa prediction\n    result = submit_pka_workflow(\n        initial_molecule="CC(=O)O",\n        pka_range=(2, 8)\n    )\n    \n    # Specific elements with meticulous mode\n    result = submit_pka_workflow(\n        initial_molecule="NC(C)C(=O)O",\n        pka_range=(1, 14),\n        deprotonate_elements=["N", "O"],\n        mode="meticulous"\n    )\n', 'inputSchema': {'properties': {'initial_molecule': {'title': 'Initial Molecule', 'type': 'string'}, 'pka_range': {'default': [2, 12], 'maxItems': 2, 'minItems': 2, 'prefixItems': [{'type': 'number'}, {'type': 'number'}], 'title': 'Pka Range', 'type': 'array'}, 'deprotonate_elements': {'anyOf': [{'items': {'type': 'string'}, 'type': 'array'}, {'type': 'null'}], 'default': None, 'title': 'Deprotonate Elements'}, 'protonate_elements': {'anyOf': [{'items': {'type': 'string'}, 'type': 'array'}, {'type': 'null'}], 'default': None, 'title': 'Protonate Elements'}, 'mode': {'default': 'careful', 'title': 'Mode', 'type': 'string'}, 'name': {'default': 'pKa Workflow', 'title': 'Name', 'type': 'string'}, 'folder_uuid': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Folder Uuid'}, 'max_credits': {'anyOf': [{'type': 'integer'}, {'type': 'null'}], 'default': None, 'title': 'Max Credits'}}, 'required': ['initial_molecule'], 'type': 'object'}}, {'name': 'submit_redox_potential_workflow', 'description': 'Submit a redox potential calculation workflow using Rowan v2 API.\n\nCalculates reduction and/or oxidation potentials for a molecule using\nquantum chemistry methods.\n\nArgs:\n    initial_molecule: SMILES string or molecule object\n    reduction: Whether to calculate reduction potential (default: False)\n    oxidization: Whether to calculate oxidation potential (default: True)\n    mode: Calculation mode (default: "rapid")\n        Options: "rapid", "careful", "meticulous"\n    name: Workflow name for tracking\n    folder_uuid: Optional folder UUID for organization\n    max_credits: Optional credit limit for the calculation\n    \nReturns:\n    Workflow object representing the submitted workflow\n    \nExample:\n    # Basic oxidation potential\n    result = submit_redox_potential_workflow(\n        initial_molecule="CC1=CC=CC=C1",\n        oxidization=True\n    )\n    \n    # Both reduction and oxidation with careful mode\n    result = submit_redox_potential_workflow(\n        initial_molecule="c1ccccc1",\n        reduction=True,\n        oxidization=True,\n        mode="careful"\n    )\n', 'inputSchema': {'properties': {'initial_molecule': {'title': 'Initial Molecule', 'type': 'string'}, 'reduction': {'default': False, 'title': 'Reduction', 'type': 'boolean'}, 'oxidization': {'default': True, 'title': 'Oxidization', 'type': 'boolean'}, 'mode': {'default': 'rapid', 'title': 'Mode', 'type': 'string'}, 'name': {'default': 'Redox Potential Workflow', 'title': 'Name', 'type': 'string'}, 'folder_uuid': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Folder Uuid'}, 'max_credits': {'anyOf': [{'type': 'integer'}, {'type': 'null'}], 'default': None, 'title': 'Max Credits'}}, 'required': ['initial_molecule'], 'type': 'object'}}, {'name': 'submit_fukui_workflow', 'description': 'Submit a Fukui indices calculation workflow using Rowan v2 API.\n\nCalculates Fukui indices to predict molecular reactivity at different sites.\nFukui indices indicate susceptibility to nucleophilic/electrophilic attack.\n\nArgs:\n    initial_molecule: SMILES string or molecule object\n    optimization_method: Method for geometry optimization (default: "gfn2_xtb")\n        Common options: "gfn2_xtb", "r2scan_3c", "aimnet2_wb97md3"\n    fukui_method: Method for Fukui calculation (default: "gfn1_xtb")\n        Common options: "gfn1_xtb", "gfn2_xtb"\n    solvent_settings: Optional solvent configuration dictionary\n        Example: {"solvent": "water", "model": "alpb"}\n    name: Workflow name for tracking\n    folder_uuid: Optional folder UUID for organization\n    max_credits: Optional credit limit for the calculation\n    \nReturns:\n    Workflow object representing the submitted workflow\n    \nExample:\n    # Basic Fukui indices\n    result = submit_fukui_workflow(\n        initial_molecule="CC(=O)O"\n    )\n    \n    # With solvent and advanced methods\n    result = submit_fukui_workflow(\n        initial_molecule="c1ccccc1N",\n        optimization_method="r2scan_3c",\n        fukui_method="gfn2_xtb",\n        solvent_settings={"solvent": "water", "model": "alpb"}\n    )\n', 'inputSchema': {'properties': {'initial_molecule': {'title': 'Initial Molecule', 'type': 'string'}, 'optimization_method': {'default': 'gfn2_xtb', 'title': 'Optimization Method', 'type': 'string'}, 'fukui_method': {'default': 'gfn1_xtb', 'title': 'Fukui Method', 'type': 'string'}, 'solvent_settings': {'anyOf': [{'additionalProperties': True, 'type': 'object'}, {'type': 'null'}], 'default': None, 'title': 'Solvent Settings'}, 'name': {'default': 'Fukui Workflow', 'title': 'Name', 'type': 'string'}, 'folder_uuid': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Folder Uuid'}, 'max_credits': {'anyOf': [{'type': 'integer'}, {'type': 'null'}], 'default': None, 'title': 'Max Credits'}}, 'required': ['initial_molecule'], 'type': 'object'}}, {'name': 'submit_tautomer_search_workflow', 'description': 'Submit a tautomer search workflow using Rowan v2 API.\n\nSearches for different tautomeric forms of a molecule and evaluates their\nrelative stabilities. Tautomers are structural isomers that readily interconvert.\n\nArgs:\n    initial_molecule: SMILES string or molecule object\n    mode: Search mode (default: "careful")\n        Options: "rapid", "careful", "meticulous"\n    name: Workflow name for tracking\n    folder_uuid: Optional folder UUID for organization\n    max_credits: Optional credit limit for the calculation\n    \nReturns:\n    Workflow object representing the submitted workflow\n    \nExample:\n    # Basic tautomer search\n    result = submit_tautomer_search_workflow(\n        initial_molecule="CC(=O)CC(=O)C"\n    )\n    \n    # Meticulous search for complex molecule\n    result = submit_tautomer_search_workflow(\n        initial_molecule="c1ccc2c(c1)ncc(=O)[nH]2",\n        mode="meticulous"\n    )\n', 'inputSchema': {'properties': {'initial_molecule': {'title': 'Initial Molecule', 'type': 'string'}, 'mode': {'default': 'careful', 'title': 'Mode', 'type': 'string'}, 'name': {'default': 'Tautomer Search Workflow', 'title': 'Name', 'type': 'string'}, 'folder_uuid': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Folder Uuid'}, 'max_credits': {'anyOf': [{'type': 'integer'}, {'type': 'null'}], 'default': None, 'title': 'Max Credits'}}, 'required': ['initial_molecule'], 'type': 'object'}}, {'name': 'submit_descriptors_workflow', 'description': 'Submit a molecular descriptors calculation workflow using Rowan v2 API.\n\nCalculates a comprehensive set of molecular descriptors including:\n- Physical properties (MW, logP, TPSA, etc.)\n- Electronic properties (HOMO/LUMO, dipole moment, etc.)\n- Structural features (rotatable bonds, H-bond donors/acceptors, etc.)\n- Topological indices\n\nArgs:\n    initial_molecule: SMILES string or molecule object\n    name: Workflow name for tracking\n    folder_uuid: Optional folder UUID for organization\n    max_credits: Optional credit limit for the calculation\n    \nReturns:\n    Workflow object representing the submitted workflow\n    \nExample:\n    # Basic descriptor calculation\n    result = submit_descriptors_workflow(\n        initial_molecule="CC(=O)Nc1ccc(O)cc1"\n    )\n    \n    # For complex molecule\n    result = submit_descriptors_workflow(\n        initial_molecule="CN1C=NC2=C1C(=O)N(C(=O)N2C)C",\n        name="Caffeine Descriptors"\n    )\n', 'inputSchema': {'properties': {'initial_molecule': {'title': 'Initial Molecule', 'type': 'string'}, 'name': {'default': 'Descriptors Workflow', 'title': 'Name', 'type': 'string'}, 'folder_uuid': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Folder Uuid'}, 'max_credits': {'anyOf': [{'type': 'integer'}, {'type': 'null'}], 'default': None, 'title': 'Max Credits'}}, 'required': ['initial_molecule'], 'type': 'object'}}, {'name': 'submit_scan_workflow', 'description': 'Submit a potential energy surface scan workflow using Rowan v2 API.\n\nPerforms systematic scans along specified molecular coordinates (bonds, angles,\nor dihedrals) to map the potential energy surface.\n\nArgs:\n    initial_molecule: SMILES string or molecule object\n    scan_settings: Dictionary specifying scan parameters\n        Example: {\n            "type": "dihedral",  # or "bond", "angle"\n            "atoms": [0, 1, 2, 3],  # atom indices\n            "start": -180,\n            "stop": 180,\n            "step": 10\n        }\n    calculation_engine: Computational engine (default: "omol25")\n        Options: "omol25", "xtb", "psi4"\n    calculation_method: Method for calculations (default: "uma_m_omol")\n        Options depend on engine\n    wavefront_propagation: Use wavefront optimization (default: True)\n        Speeds up scans by using previous geometries as starting points\n    name: Workflow name for tracking\n    folder_uuid: Optional folder UUID for organization\n    max_credits: Optional credit limit for the calculation\n    \nReturns:\n    Workflow object representing the submitted workflow\n    \nExample:\n    # Dihedral scan\n    result = submit_scan_workflow(\n        initial_molecule="CC(C)CC",\n        scan_settings={\n            "type": "dihedral",\n            "atoms": [0, 1, 2, 3],\n            "start": -180,\n            "stop": 180,\n            "step": 15\n        }\n    )\n    \n    # Bond scan with advanced method\n    result = submit_scan_workflow(\n        initial_molecule="CC",\n        scan_settings={\n            "type": "bond",\n            "atoms": [0, 1],\n            "start": 1.0,\n            "stop": 2.5,\n            "step": 0.1\n        },\n        calculation_method="r2scan_3c"\n    )\n', 'inputSchema': {'properties': {'initial_molecule': {'title': 'Initial Molecule', 'type': 'string'}, 'scan_settings': {'anyOf': [{'additionalProperties': True, 'type': 'object'}, {'type': 'null'}], 'default': None, 'title': 'Scan Settings'}, 'calculation_engine': {'default': 'omol25', 'title': 'Calculation Engine', 'type': 'string'}, 'calculation_method': {'default': 'uma_m_omol', 'title': 'Calculation Method', 'type': 'string'}, 'wavefront_propagation': {'default': True, 'title': 'Wavefront Propagation', 'type': 'boolean'}, 'name': {'default': 'Scan Workflow', 'title': 'Name', 'type': 'string'}, 'folder_uuid': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Folder Uuid'}, 'max_credits': {'anyOf': [{'type': 'integer'}, {'type': 'null'}], 'default': None, 'title': 'Max Credits'}}, 'required': ['initial_molecule'], 'type': 'object'}}, {'name': 'submit_irc_workflow', 'description': 'Submits an Intrinsic Reaction Coordinate (IRC) workflow to the API.\n\nArgs:\n    initial_molecule: The initial molecule to perform the IRC calculation on.\n        Can be a dict, StJamesMolecule, or RdkitMol object\n    method: The computational method to use for the IRC calculation (default: "uma_m_omol")\n        See list of available methods for options\n    engine: The computational engine to use for the calculation (default: "omol25")\n        See list of available engines\n    preopt: Whether to perform a pre-optimization of the molecule (default: True)\n    step_size: The step size to use for the IRC calculation (default: 0.05)\n    max_irc_steps: The maximum number of IRC steps to perform (default: 30)\n    name: The name of the workflow\n    folder_uuid: The UUID of the folder to place the workflow in\n    max_credits: The maximum number of credits to use for the workflow\n    \nReturns:\n    Workflow object representing the submitted IRC workflow\n    \nExample:\n    # Basic IRC calculation\n    result = submit_irc_workflow(\n        initial_molecule={"smiles": "[CH3].[CH3]"},\n        method="gfn2_xtb",\n        max_irc_steps=50\n    )\n    \n    # IRC with specific method and engine\n    result = submit_irc_workflow(\n        initial_molecule={"smiles": "CC(O)=CC"},\n        method="r2scan_3c",\n        engine="psi4",\n        step_size=0.03\n    )\n', 'inputSchema': {'properties': {'initial_molecule': {'anyOf': [{'additionalProperties': True, 'type': 'object'}, {}, {'type': 'null'}], 'default': None, 'title': 'Initial Molecule'}, 'method': {'default': 'uma_m_omol', 'title': 'Method', 'type': 'string'}, 'engine': {'default': 'omol25', 'title': 'Engine', 'type': 'string'}, 'preopt': {'default': True, 'title': 'Preopt', 'type': 'boolean'}, 'step_size': {'default': 0.05, 'title': 'Step Size', 'type': 'number'}, 'max_irc_steps': {'default': 30, 'title': 'Max Irc Steps', 'type': 'integer'}, 'name': {'default': 'IRC Workflow', 'title': 'Name', 'type': 'string'}, 'folder_uuid': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Folder Uuid'}, 'max_credits': {'anyOf': [{'type': 'integer'}, {'type': 'null'}], 'default': None, 'title': 'Max Credits'}}, 'type': 'object'}}, {'name': 'submit_protein_cofolding_workflow', 'description': 'Submits a protein cofolding workflow to the API.\n\nArgs:\n    initial_protein_sequences: The sequences of the proteins to be cofolded\n    initial_smiles_list: A list of SMILES strings for the ligands to be cofolded with\n    ligand_binding_affinity_index: The index of the ligand for which to compute the binding affinity\n    use_msa_server: Whether to use the MSA server for the computation\n    use_potentials: Whether to use potentials for the computation\n    name: The name of the workflow\n    model: The model to use for the computation\n    folder_uuid: The UUID of the folder to store the workflow in\n    max_credits: The maximum number of credits to use for the workflow\n    \nReturns:\n    Workflow object representing the submitted workflow\n    \nExample:\n    # Protein dimer cofolding\n    result = submit_protein_cofolding_workflow(\n        initial_protein_sequences=[\n            "MKTAYIAKQRQISFVKSHFSRQLEERLGLIEVQAPILSRVGDGTQDNLSGAEK",\n            "MKQHKAMIVALIVICITAVVAALVTRKDLCEVHIRTGQTEVAVF"\n        ]\n    )\n    \n    # Protein-ligand complex\n    result = submit_protein_cofolding_workflow(\n        initial_protein_sequences=["MGSSHHHHHHSSGLVPRGSH"],\n        initial_smiles_list=["CC(=O)O", "CCO"],\n        ligand_binding_affinity_index=0,\n        use_msa_server=True\n    )\n', 'inputSchema': {'properties': {'initial_protein_sequences': {'items': {'type': 'string'}, 'title': 'Initial Protein Sequences', 'type': 'array'}, 'initial_smiles_list': {'anyOf': [{'items': {'type': 'string'}, 'type': 'array'}, {'type': 'null'}], 'default': None, 'title': 'Initial Smiles List'}, 'ligand_binding_affinity_index': {'anyOf': [{'type': 'integer'}, {'type': 'null'}], 'default': None, 'title': 'Ligand Binding Affinity Index'}, 'use_msa_server': {'default': True, 'title': 'Use Msa Server', 'type': 'boolean'}, 'use_potentials': {'default': False, 'title': 'Use Potentials', 'type': 'boolean'}, 'name': {'default': 'Cofolding Workflow', 'title': 'Name', 'type': 'string'}, 'model': {'default': 'boltz_2', 'title': 'Model', 'type': 'string'}, 'folder_uuid': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Folder Uuid'}, 'max_credits': {'anyOf': [{'type': 'integer'}, {'type': 'null'}], 'default': None, 'title': 'Max Credits'}}, 'required': ['initial_protein_sequences'], 'type': 'object'}}, {'name': 'submit_docking_workflow', 'description': 'Submits a Docking workflow to the API.\n\nArgs:\n    protein: The protein to dock. Can be fed as a uuid or a Protein object\n    pocket: The pocket to dock into\n    initial_molecule: The initial molecule to be docked.\n        Can be a dict, StJamesMolecule, or RdkitMol object\n    do_csearch: Whether to perform a conformational search on the ligand\n    do_optimization: Whether to perform an optimization on the ligand\n    name: The name of the workflow\n    folder_uuid: The UUID of the folder to place the workflow in\n    max_credits: The maximum number of credits to use for the workflow\n    \nReturns:\n    Workflow object representing the submitted workflow\n    \nExample:\n    # Basic docking with protein UUID\n    result = submit_docking_workflow(\n        protein="protein-uuid-123",\n        pocket=pocket_obj,\n        initial_molecule={"smiles": "CC(=O)Oc1ccccc1C(=O)O"}\n    )\n    \n    # Docking with optimization disabled\n    result = submit_docking_workflow(\n        protein=protein_obj,\n        pocket=pocket_obj,\n        initial_molecule={"smiles": "CCO"},\n        do_csearch=False,\n        do_optimization=False\n    )\n', 'inputSchema': {'properties': {'protein': {'anyOf': [{'type': 'string'}, {}], 'title': 'Protein'}, 'pocket': {'title': 'Pocket'}, 'initial_molecule': {'anyOf': [{'additionalProperties': True, 'type': 'object'}, {}, {'type': 'null'}], 'default': None, 'title': 'Initial Molecule'}, 'do_csearch': {'default': True, 'title': 'Do Csearch', 'type': 'boolean'}, 'do_optimization': {'default': True, 'title': 'Do Optimization', 'type': 'boolean'}, 'name': {'default': 'Docking Workflow', 'title': 'Name', 'type': 'string'}, 'folder_uuid': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Folder Uuid'}, 'max_credits': {'anyOf': [{'type': 'integer'}, {'type': 'null'}], 'default': None, 'title': 'Max Credits'}}, 'required': ['protein', 'pocket'], 'type': 'object'}}, {'name': 'workflow_fetch_latest', 'description': 'Fetch the latest workflow data from the database.\n\nUpdates the workflow object with the most recent status and results.\n\nArgs:\n    workflow_uuid: The UUID of the workflow to fetch\n    in_place: Whether to update the workflow object in place (default: False)\n    \nReturns:\n    Dictionary containing the updated workflow data including status and results\n', 'inputSchema': {'properties': {'workflow_uuid': {'title': 'Workflow Uuid', 'type': 'string'}, 'in_place': {'default': False, 'title': 'In Place', 'type': 'boolean'}}, 'required': ['workflow_uuid'], 'type': 'object'}}, {'name': 'workflow_wait_for_result', 'description': 'Wait for a workflow to complete and return the result.\n\nBlocks until the workflow completes, polling at specified intervals.\n\nArgs:\n    workflow_uuid: The UUID of the workflow to wait for\n    poll_interval: Time in seconds between status checks (default: 5)\n    \nReturns:\n    Dictionary containing the completed workflow data including results\n', 'inputSchema': {'properties': {'workflow_uuid': {'title': 'Workflow Uuid', 'type': 'string'}, 'poll_interval': {'default': 5, 'title': 'Poll Interval', 'type': 'integer'}}, 'required': ['workflow_uuid'], 'type': 'object'}}, {'name': 'workflow_get_status', 'description': 'Get the current status of a workflow.\n\nArgs:\n    workflow_uuid: The UUID of the workflow\n    \nReturns:\n    Dictionary with status information\n', 'inputSchema': {'properties': {'workflow_uuid': {'title': 'Workflow Uuid', 'type': 'string'}}, 'required': ['workflow_uuid'], 'type': 'object'}}, {'name': 'workflow_stop', 'description': 'Stop a running workflow.\n\nArgs:\n    workflow_uuid: The UUID of the workflow to stop\n    \nReturns:\n    Dictionary with confirmation message\n', 'inputSchema': {'properties': {'workflow_uuid': {'title': 'Workflow Uuid', 'type': 'string'}}, 'required': ['workflow_uuid'], 'type': 'object'}}, {'name': 'workflow_delete', 'description': 'Delete a workflow.\n\nThis permanently removes the workflow and its results from the database.\n\nArgs:\n    workflow_uuid: The UUID of the workflow to delete\n    \nReturns:\n    Dictionary with confirmation message\n', 'inputSchema': {'properties': {'workflow_uuid': {'title': 'Workflow Uuid', 'type': 'string'}}, 'required': ['workflow_uuid'], 'type': 'object'}}, {'name': 'retrieve_workflow', 'description': 'Retrieve a workflow from the API.\n\nArgs:\n    uuid: The UUID of the workflow to retrieve\n    \nReturns:\n    Dictionary containing the complete workflow data\n    \nRaises:\n    HTTPError: If the API request fails\n', 'inputSchema': {'properties': {'uuid': {'title': 'Uuid', 'type': 'string'}}, 'required': ['uuid'], 'type': 'object'}}, {'name': 'retrieve_calculation_molecules', 'description': 'Retrieve a list of molecules from a calculation.\n\nArgs:\n    uuid: The UUID of the calculation to retrieve molecules from\n    \nReturns:\n    List of dictionaries representing the molecules in the calculation\n    \nRaises:\n    HTTPError: If the API request fails\n', 'inputSchema': {'properties': {'uuid': {'title': 'Uuid', 'type': 'string'}}, 'required': ['uuid'], 'type': 'object'}}, {'name': 'list_workflows', 'description': 'List workflows subject to the specified criteria.\n\nArgs:\n    parent_uuid: The UUID of the parent folder\n    name_contains: Substring to search for in workflow names\n    public: Filter workflows by their public status\n    starred: Filter workflows by their starred status\n    status: Filter workflows by their status\n    workflow_type: Filter workflows by their type\n    page: The page number to retrieve (default: 0)\n    size: The number of items per page (default: 10)\n    \nReturns:\n    List of workflow dictionaries that match the search criteria\n    \nRaises:\n    HTTPError: If the request to the API fails\n', 'inputSchema': {'properties': {'parent_uuid': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Parent Uuid'}, 'name_contains': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Name Contains'}, 'public': {'anyOf': [{'type': 'boolean'}, {'type': 'null'}], 'default': None, 'title': 'Public'}, 'starred': {'anyOf': [{'type': 'boolean'}, {'type': 'null'}], 'default': None, 'title': 'Starred'}, 'status': {'anyOf': [{'type': 'integer'}, {'type': 'null'}], 'default': None, 'title': 'Status'}, 'workflow_type': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Workflow Type'}, 'page': {'default': 0, 'title': 'Page', 'type': 'integer'}, 'size': {'default': 10, 'title': 'Size', 'type': 'integer'}}, 'type': 'object'}}, {'name': 'workflow_update', 'description': 'Update workflow details.\n\nArgs:\n    workflow_uuid: The UUID of the workflow to update\n    name: New name for the workflow (optional)\n    notes: New notes for the workflow (optional)\n    starred: Whether to star/unstar the workflow (optional)\n    public: Whether to make the workflow public/private (optional)\n    \nReturns:\n    Dictionary with updated workflow information\n', 'inputSchema': {'properties': {'workflow_uuid': {'title': 'Workflow Uuid', 'type': 'string'}, 'name': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Name'}, 'notes': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Notes'}, 'starred': {'anyOf': [{'type': 'boolean'}, {'type': 'null'}], 'default': None, 'title': 'Starred'}, 'public': {'anyOf': [{'type': 'boolean'}, {'type': 'null'}], 'default': None, 'title': 'Public'}}, 'required': ['workflow_uuid'], 'type': 'object'}}, {'name': 'workflow_is_finished', 'description': 'Check if a workflow is finished.\n\nArgs:\n    workflow_uuid: The UUID of the workflow to check\n    \nReturns:\n    Dictionary with workflow completion status\n', 'inputSchema': {'properties': {'workflow_uuid': {'title': 'Workflow Uuid', 'type': 'string'}}, 'required': ['workflow_uuid'], 'type': 'object'}}, {'name': 'workflow_delete_data', 'description': 'Delete workflow data while keeping the workflow record.\n\nArgs:\n    workflow_uuid: The UUID of the workflow\n    \nReturns:\n    Dictionary with confirmation message\n', 'inputSchema': {'properties': {'workflow_uuid': {'title': 'Workflow Uuid', 'type': 'string'}}, 'required': ['workflow_uuid'], 'type': 'object'}}]})), metadata=None)
2025-08-02 13:57:38,725 - sse_starlette.sse - DEBUG - chunk: b'event: message\r\ndata: {"jsonrpc":"2.0","id":2,"result":{"tools":[{"name":"submit_basic_calculation_workflow","description":"Submit a basic calculation workflow using Rowan v2 API.\\n\\nPerforms fundamental quantum chemistry calculations with configurable methods\\nand computational tasks. Returns a workflow object for tracking progress.\\n","inputSchema":{"properties":{"initial_molecule":{"anyOf":[{"type":"string"},{"additionalProperties":true,"type":"object"},{}],"description":"The molecule to perform the calculation on. Can be a SMILES string, dict, StJamesMolecule, or RdkitMol object","title":"Initial Molecule"},"method":{"default":"uma_m_omol","description":"The method to use for the calculation (e.g., \'uma_m_omol\', \'gfn2-xtb\', \'r2scan_3c\')","title":"Method","type":"string"},"tasks":{"anyOf":[{"items":{"type":"string"},"type":"array"},{"type":"null"}],"default":null,"description":"List of computational tasks to perform. Optional[List[str]] (e.g. [\'optimize\']), Defaults to None","title":"Tasks"},"mode":{"default":"auto","description":"The mode to run the calculation in (\'auto\', \'rapid\', \'careful\', \'meticulous\')","title":"Mode","type":"string"},"engine":{"default":"omol25","description":"The computational engine to use (\'omol25\', \'xtb\', \'psi4\')","title":"Engine","type":"string"},"name":{"default":"Basic Calculation Workflow","description":"The name of the workflow for identification","title":"Name","type":"string"},"folder_uuid":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"description":"UUID of the folder to place the workflow in (optional)","title":"Folder Uuid"},"max_credits":{"anyOf":[{"type":"integer"},{"type":"null"}],"default":null,"description":"Maximum number of credits to use for the workflow (optional)","title":"Max Credits"}},"required":["initial_molecule"],"type":"object"}},{"name":"submit_conformer_search_workflow","description":"Submit a conformer search workflow using Rowan v2 API.\\n\\nExplores the conformational space of a molecule to find low-energy structures.\\n\\nArgs:\\n    initial_molecule: SMILES string or molecule object\\n    conf_gen_mode: default to \\"rapid\\"\\n        Options: \\"rapid\\", \\"careful\\", \\"meticulous\\"\\n    final_method: default: \\"aimnet2_wb97md3\\"\\n        Try other options, if user specifies\\n    solvent: Optional solvent for implicit solvation (e.g., \\"water\\", \\"ethanol\\")\\n    transition_state: Whether searching for transition state conformers (default: False)\\n    name: Workflow name for tracking\\n    folder_uuid: Optional folder UUID for organization\\n    max_credits: Optional credit limit for the calculation\\n    \\nReturns:\\n    Workflow object representing the submitted workflow\\n    \\nExample:\\n    # Basic conformer search\\n    result = submit_conformer_search_workflow(\\n        initial_molecule=\\"CCCC\\",\\n        conf_gen_mode=\\"rapid\\"\\n    )\\n    \\n    # Careful search with solvent\\n    result = submit_conformer_search_workflow(\\n        initial_molecule=\\"CC(C)CC(=O)O\\",\\n        conf_gen_mode=\\"careful\\",\\n        solvent=\\"water\\",\\n        final_method=\\"r2scan_3c\\"\\n    )\\n","inputSchema":{"properties":{"initial_molecule":{"title":"Initial Molecule","type":"string"},"conf_gen_mode":{"default":"rapid","title":"Conf Gen Mode","type":"string"},"final_method":{"default":"aimnet2_wb97md3","title":"Final Method","type":"string"},"solvent":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"title":"Solvent"},"transition_state":{"default":false,"title":"Transition State","type":"boolean"},"name":{"default":"Conformer Search Workflow","title":"Name","type":"string"},"folder_uuid":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"title":"Folder Uuid"},"max_credits":{"anyOf":[{"type":"integer"},{"type":"null"}],"default":null,"title":"Max Credits"}},"required":["initial_molecule"],"type":"object"}},{"name":"submit_solubility_workflow","description":"Submit a solubility prediction workflow using Rowan v2 API.\\n\\nPredicts solubility (log S) of a molecule in multiple solvents at various temperatures\\nusing machine learning models.\\n\\nArgs:\\n    initial_smiles: SMILES string of the molecule\\n    solvents: List of solvents as SMILES or common names (e.g., [\\"water\\", \\"ethanol\\"])\\n        If None, uses default solvents\\n    temperatures: List of temperatures in Kelvin\\n        If None, uses default temperature range\\n    name: Workflow name for tracking\\n    folder_uuid: Optional folder UUID for organization\\n    max_credits: Optional credit limit for the calculation\\n    \\nReturns:\\n    Workflow object representing the submitted workflow\\n    \\nExample:\\n    # Basic solubility prediction\\n    result = submit_solubility_workflow(\\n        initial_smiles=\\"CC(=O)Nc1ccc(O)cc1\\",\\n        solvents=[\\"water\\", \\"ethanol\\"],\\n        temperatures=[298.15, 310.15]\\n    )\\n    \\n    # With SMILES solvents\\n    result = submit_solubility_workflow(\\n        initial_smiles=\\"CC(=O)O\\",\\n        solvents=[\\"O\\", \\"CCO\\", \\"CCCCCC\\"],\\n        temperatures=[273.15, 298.15, 323.15]\\n    )\\n","inputSchema":{"properties":{"initial_smiles":{"title":"Initial Smiles","type":"string"},"solvents":{"anyOf":[{"items":{"type":"string"},"type":"array"},{"type":"null"}],"default":null,"title":"Solvents"},"temperatures":{"anyOf":[{"items":{"type":"number"},"type":"array"},{"type":"null"}],"default":null,"title":"Temperatures"},"name":{"default":"Solubility Workflow","title":"Name","type":"string"},"folder_uuid":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"title":"Folder Uuid"},"max_credits":{"anyOf":[{"type":"integer"},{"type":"null"}],"default":null,"title":"Max Credits"}},"required":["initial_smiles"],"type":"object"}},{"name":"submit_pka_workflow","description":"Submit a pKa prediction workflow using Rowan v2 API.\\n\\nPredicts acid dissociation constants (pKa) for ionizable groups in a molecule\\nusing quantum chemistry calculations.\\n\\nArgs:\\n    initial_molecule: SMILES string or molecule object\\n    pka_range: Tuple of (min, max) pKa values to search (default: (2, 12))\\n    deprotonate_elements: List of elements to consider for deprotonation\\n        (e.g., [\\"N\\", \\"O\\", \\"S\\"]). If None, uses defaults\\n    protonate_elements: List of elements to consider for protonation\\n        (e.g., [\\"N\\", \\"O\\"]). If None, uses defaults\\n    mode: Calculation mode (default: \\"careful\\")\\n        Options: \\"rapid\\", \\"careful\\", \\"meticulous\\"\\n    name: Workflow name for tracking\\n    folder_uuid: Optional folder UUID for organization\\n    max_credits: Optional credit limit for the calculation\\n    \\nReturns:\\n    Workflow object representing the submitted workflow\\n    \\nExample:\\n    # Basic pKa prediction\\n    result = submit_pka_workflow(\\n        initial_molecule=\\"CC(=O)O\\",\\n        pka_range=(2, 8)\\n    )\\n    \\n    # Specific elements with meticulous mode\\n    result = submit_pka_workflow(\\n        initial_molecule=\\"NC(C)C(=O)O\\",\\n        pka_range=(1, 14),\\n        deprotonate_elements=[\\"N\\", \\"O\\"],\\n        mode=\\"meticulous\\"\\n    )\\n","inputSchema":{"properties":{"initial_molecule":{"title":"Initial Molecule","type":"string"},"pka_range":{"default":[2,12],"maxItems":2,"minItems":2,"prefixItems":[{"type":"number"},{"type":"number"}],"title":"Pka Range","type":"array"},"deprotonate_elements":{"anyOf":[{"items":{"type":"string"},"type":"array"},{"type":"null"}],"default":null,"title":"Deprotonate Elements"},"protonate_elements":{"anyOf":[{"items":{"type":"string"},"type":"array"},{"type":"null"}],"default":null,"title":"Protonate Elements"},"mode":{"default":"careful","title":"Mode","type":"string"},"name":{"default":"pKa Workflow","title":"Name","type":"string"},"folder_uuid":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"title":"Folder Uuid"},"max_credits":{"anyOf":[{"type":"integer"},{"type":"null"}],"default":null,"title":"Max Credits"}},"required":["initial_molecule"],"type":"object"}},{"name":"submit_redox_potential_workflow","description":"Submit a redox potential calculation workflow using Rowan v2 API.\\n\\nCalculates reduction and/or oxidation potentials for a molecule using\\nquantum chemistry methods.\\n\\nArgs:\\n    initial_molecule: SMILES string or molecule object\\n    reduction: Whether to calculate reduction potential (default: False)\\n    oxidization: Whether to calculate oxidation potential (default: True)\\n    mode: Calculation mode (default: \\"rapid\\")\\n        Options: \\"rapid\\", \\"careful\\", \\"meticulous\\"\\n    name: Workflow name for tracking\\n    folder_uuid: Optional folder UUID for organization\\n    max_credits: Optional credit limit for the calculation\\n    \\nReturns:\\n    Workflow object representing the submitted workflow\\n    \\nExample:\\n    # Basic oxidation potential\\n    result = submit_redox_potential_workflow(\\n        initial_molecule=\\"CC1=CC=CC=C1\\",\\n        oxidization=True\\n    )\\n    \\n    # Both reduction and oxidation with careful mode\\n    result = submit_redox_potential_workflow(\\n        initial_molecule=\\"c1ccccc1\\",\\n        reduction=True,\\n        oxidization=True,\\n        mode=\\"careful\\"\\n    )\\n","inputSchema":{"properties":{"initial_molecule":{"title":"Initial Molecule","type":"string"},"reduction":{"default":false,"title":"Reduction","type":"boolean"},"oxidization":{"default":true,"title":"Oxidization","type":"boolean"},"mode":{"default":"rapid","title":"Mode","type":"string"},"name":{"default":"Redox Potential Workflow","title":"Name","type":"string"},"folder_uuid":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"title":"Folder Uuid"},"max_credits":{"anyOf":[{"type":"integer"},{"type":"null"}],"default":null,"title":"Max Credits"}},"required":["initial_molecule"],"type":"object"}},{"name":"submit_fukui_workflow","description":"Submit a Fukui indices calculation workflow using Rowan v2 API.\\n\\nCalculates Fukui indices to predict molecular reactivity at different sites.\\nFukui indices indicate susceptibility to nucleophilic/electrophilic attack.\\n\\nArgs:\\n    initial_molecule: SMILES string or molecule object\\n    optimization_method: Method for geometry optimization (default: \\"gfn2_xtb\\")\\n        Common options: \\"gfn2_xtb\\", \\"r2scan_3c\\", \\"aimnet2_wb97md3\\"\\n    fukui_method: Method for Fukui calculation (default: \\"gfn1_xtb\\")\\n        Common options: \\"gfn1_xtb\\", \\"gfn2_xtb\\"\\n    solvent_settings: Optional solvent configuration dictionary\\n        Example: {\\"solvent\\": \\"water\\", \\"model\\": \\"alpb\\"}\\n    name: Workflow name for tracking\\n    folder_uuid: Optional folder UUID for organization\\n    max_credits: Optional credit limit for the calculation\\n    \\nReturns:\\n    Workflow object representing the submitted workflow\\n    \\nExample:\\n    # Basic Fukui indices\\n    result = submit_fukui_workflow(\\n        initial_molecule=\\"CC(=O)O\\"\\n    )\\n    \\n    # With solvent and advanced methods\\n    result = submit_fukui_workflow(\\n        initial_molecule=\\"c1ccccc1N\\",\\n        optimization_method=\\"r2scan_3c\\",\\n        fukui_method=\\"gfn2_xtb\\",\\n        solvent_settings={\\"solvent\\": \\"water\\", \\"model\\": \\"alpb\\"}\\n    )\\n","inputSchema":{"properties":{"initial_molecule":{"title":"Initial Molecule","type":"string"},"optimization_method":{"default":"gfn2_xtb","title":"Optimization Method","type":"string"},"fukui_method":{"default":"gfn1_xtb","title":"Fukui Method","type":"string"},"solvent_settings":{"anyOf":[{"additionalProperties":true,"type":"object"},{"type":"null"}],"default":null,"title":"Solvent Settings"},"name":{"default":"Fukui Workflow","title":"Name","type":"string"},"folder_uuid":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"title":"Folder Uuid"},"max_credits":{"anyOf":[{"type":"integer"},{"type":"null"}],"default":null,"title":"Max Credits"}},"required":["initial_molecule"],"type":"object"}},{"name":"submit_tautomer_search_workflow","description":"Submit a tautomer search workflow using Rowan v2 API.\\n\\nSearches for different tautomeric forms of a molecule and evaluates their\\nrelative stabilities. Tautomers are structural isomers that readily interconvert.\\n\\nArgs:\\n    initial_molecule: SMILES string or molecule object\\n    mode: Search mode (default: \\"careful\\")\\n        Options: \\"rapid\\", \\"careful\\", \\"meticulous\\"\\n    name: Workflow name for tracking\\n    folder_uuid: Optional folder UUID for organization\\n    max_credits: Optional credit limit for the calculation\\n    \\nReturns:\\n    Workflow object representing the submitted workflow\\n    \\nExample:\\n    # Basic tautomer search\\n    result = submit_tautomer_search_workflow(\\n        initial_molecule=\\"CC(=O)CC(=O)C\\"\\n    )\\n    \\n    # Meticulous search for complex molecule\\n    result = submit_tautomer_search_workflow(\\n        initial_molecule=\\"c1ccc2c(c1)ncc(=O)[nH]2\\",\\n        mode=\\"meticulous\\"\\n    )\\n","inputSchema":{"properties":{"initial_molecule":{"title":"Initial Molecule","type":"string"},"mode":{"default":"careful","title":"Mode","type":"string"},"name":{"default":"Tautomer Search Workflow","title":"Name","type":"string"},"folder_uuid":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"title":"Folder Uuid"},"max_credits":{"anyOf":[{"type":"integer"},{"type":"null"}],"default":null,"title":"Max Credits"}},"required":["initial_molecule"],"type":"object"}},{"name":"submit_descriptors_workflow","description":"Submit a molecular descriptors calculation workflow using Rowan v2 API.\\n\\nCalculates a comprehensive set of molecular descriptors including:\\n- Physical properties (MW, logP, TPSA, etc.)\\n- Electronic properties (HOMO/LUMO, dipole moment, etc.)\\n- Structural features (rotatable bonds, H-bond donors/acceptors, etc.)\\n- Topological indices\\n\\nArgs:\\n    initial_molecule: SMILES string or molecule object\\n    name: Workflow name for tracking\\n    folder_uuid: Optional folder UUID for organization\\n    max_credits: Optional credit limit for the calculation\\n    \\nReturns:\\n    Workflow object representing the submitted workflow\\n    \\nExample:\\n    # Basic descriptor calculation\\n    result = submit_descriptors_workflow(\\n        initial_molecule=\\"CC(=O)Nc1ccc(O)cc1\\"\\n    )\\n    \\n    # For complex molecule\\n    result = submit_descriptors_workflow(\\n        initial_molecule=\\"CN1C=NC2=C1C(=O)N(C(=O)N2C)C\\",\\n        name=\\"Caffeine Descriptors\\"\\n    )\\n","inputSchema":{"properties":{"initial_molecule":{"title":"Initial Molecule","type":"string"},"name":{"default":"Descriptors Workflow","title":"Name","type":"string"},"folder_uuid":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"title":"Folder Uuid"},"max_credits":{"anyOf":[{"type":"integer"},{"type":"null"}],"default":null,"title":"Max Credits"}},"required":["initial_molecule"],"type":"object"}},{"name":"submit_scan_workflow","description":"Submit a potential energy surface scan workflow using Rowan v2 API.\\n\\nPerforms systematic scans along specified molecular coordinates (bonds, angles,\\nor dihedrals) to map the potential energy surface.\\n\\nArgs:\\n    initial_molecule: SMILES string or molecule object\\n    scan_settings: Dictionary specifying scan parameters\\n        Example: {\\n            \\"type\\": \\"dihedral\\",  # or \\"bond\\", \\"angle\\"\\n            \\"atoms\\": [0, 1, 2, 3],  # atom indices\\n            \\"start\\": -180,\\n            \\"stop\\": 180,\\n            \\"step\\": 10\\n        }\\n    calculation_engine: Computational engine (default: \\"omol25\\")\\n        Options: \\"omol25\\", \\"xtb\\", \\"psi4\\"\\n    calculation_method: Method for calculations (default: \\"uma_m_omol\\")\\n        Options depend on engine\\n    wavefront_propagation: Use wavefront optimization (default: True)\\n        Speeds up scans by using previous geometries as starting points\\n    name: Workflow name for tracking\\n    folder_uuid: Optional folder UUID for organization\\n    max_credits: Optional credit limit for the calculation\\n    \\nReturns:\\n    Workflow object representing the submitted workflow\\n    \\nExample:\\n    # Dihedral scan\\n    result = submit_scan_workflow(\\n        initial_molecule=\\"CC(C)CC\\",\\n        scan_settings={\\n            \\"type\\": \\"dihedral\\",\\n            \\"atoms\\": [0, 1, 2, 3],\\n            \\"start\\": -180,\\n            \\"stop\\": 180,\\n            \\"step\\": 15\\n        }\\n    )\\n    \\n    # Bond scan with advanced method\\n    result = submit_scan_workflow(\\n        initial_molecule=\\"CC\\",\\n        scan_settings={\\n            \\"type\\": \\"bond\\",\\n            \\"atoms\\": [0, 1],\\n            \\"start\\": 1.0,\\n            \\"stop\\": 2.5,\\n            \\"step\\": 0.1\\n        },\\n        calculation_method=\\"r2scan_3c\\"\\n    )\\n","inputSchema":{"properties":{"initial_molecule":{"title":"Initial Molecule","type":"string"},"scan_settings":{"anyOf":[{"additionalProperties":true,"type":"object"},{"type":"null"}],"default":null,"title":"Scan Settings"},"calculation_engine":{"default":"omol25","title":"Calculation Engine","type":"string"},"calculation_method":{"default":"uma_m_omol","title":"Calculation Method","type":"string"},"wavefront_propagation":{"default":true,"title":"Wavefront Propagation","type":"boolean"},"name":{"default":"Scan Workflow","title":"Name","type":"string"},"folder_uuid":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"title":"Folder Uuid"},"max_credits":{"anyOf":[{"type":"integer"},{"type":"null"}],"default":null,"title":"Max Credits"}},"required":["initial_molecule"],"type":"object"}},{"name":"submit_irc_workflow","description":"Submits an Intrinsic Reaction Coordinate (IRC) workflow to the API.\\n\\nArgs:\\n    initial_molecule: The initial molecule to perform the IRC calculation on.\\n        Can be a dict, StJamesMolecule, or RdkitMol object\\n    method: The computational method to use for the IRC calculation (default: \\"uma_m_omol\\")\\n        See list of available methods for options\\n    engine: The computational engine to use for the calculation (default: \\"omol25\\")\\n        See list of available engines\\n    preopt: Whether to perform a pre-optimization of the molecule (default: True)\\n    step_size: The step size to use for the IRC calculation (default: 0.05)\\n    max_irc_steps: The maximum number of IRC steps to perform (default: 30)\\n    name: The name of the workflow\\n    folder_uuid: The UUID of the folder to place the workflow in\\n    max_credits: The maximum number of credits to use for the workflow\\n    \\nReturns:\\n    Workflow object representing the submitted IRC workflow\\n    \\nExample:\\n    # Basic IRC calculation\\n    result = submit_irc_workflow(\\n        initial_molecule={\\"smiles\\": \\"[CH3].[CH3]\\"},\\n        method=\\"gfn2_xtb\\",\\n        max_irc_steps=50\\n    )\\n    \\n    # IRC with specific method and engine\\n    result = submit_irc_workflow(\\n        initial_molecule={\\"smiles\\": \\"CC(O)=CC\\"},\\n        method=\\"r2scan_3c\\",\\n        engine=\\"psi4\\",\\n        step_size=0.03\\n    )\\n","inputSchema":{"properties":{"initial_molecule":{"anyOf":[{"additionalProperties":true,"type":"object"},{},{"type":"null"}],"default":null,"title":"Initial Molecule"},"method":{"default":"uma_m_omol","title":"Method","type":"string"},"engine":{"default":"omol25","title":"Engine","type":"string"},"preopt":{"default":true,"title":"Preopt","type":"boolean"},"step_size":{"default":0.05,"title":"Step Size","type":"number"},"max_irc_steps":{"default":30,"title":"Max Irc Steps","type":"integer"},"name":{"default":"IRC Workflow","title":"Name","type":"string"},"folder_uuid":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"title":"Folder Uuid"},"max_credits":{"anyOf":[{"type":"integer"},{"type":"null"}],"default":null,"title":"Max Credits"}},"type":"object"}},{"name":"submit_protein_cofolding_workflow","description":"Submits a protein cofolding workflow to the API.\\n\\nArgs:\\n    initial_protein_sequences: The sequences of the proteins to be cofolded\\n    initial_smiles_list: A list of SMILES strings for the ligands to be cofolded with\\n    ligand_binding_affinity_index: The index of the ligand for which to compute the binding affinity\\n    use_msa_server: Whether to use the MSA server for the computation\\n    use_potentials: Whether to use potentials for the computation\\n    name: The name of the workflow\\n    model: The model to use for the computation\\n    folder_uuid: The UUID of the folder to store the workflow in\\n    max_credits: The maximum number of credits to use for the workflow\\n    \\nReturns:\\n    Workflow object representing the submitted workflow\\n    \\nExample:\\n    # Protein dimer cofolding\\n    result = submit_protein_cofolding_workflow(\\n        initial_protein_sequences=[\\n            \\"MKTAYIAKQRQISFVKSHFSRQLEERLGLIEVQAPILSRVGDGTQDNLSGAEK\\",\\n            \\"MKQHKAMIVALIVICITAVVAALVTRKDLCEVHIRTGQTEVAVF\\"\\n        ]\\n    )\\n    \\n    # Protein-ligand complex\\n    result = submit_protein_cofolding_workflow(\\n        initial_protein_sequences=[\\"MGSSHHHHHHSSGLVPRGSH\\"],\\n        initial_smiles_list=[\\"CC(=O)O\\", \\"CCO\\"],\\n        ligand_binding_affinity_index=0,\\n        use_msa_server=True\\n    )\\n","inputSchema":{"properties":{"initial_protein_sequences":{"items":{"type":"string"},"title":"Initial Protein Sequences","type":"array"},"initial_smiles_list":{"anyOf":[{"items":{"type":"string"},"type":"array"},{"type":"null"}],"default":null,"title":"Initial Smiles List"},"ligand_binding_affinity_index":{"anyOf":[{"type":"integer"},{"type":"null"}],"default":null,"title":"Ligand Binding Affinity Index"},"use_msa_server":{"default":true,"title":"Use Msa Server","type":"boolean"},"use_potentials":{"default":false,"title":"Use Potentials","type":"boolean"},"name":{"default":"Cofolding Workflow","title":"Name","type":"string"},"model":{"default":"boltz_2","title":"Model","type":"string"},"folder_uuid":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"title":"Folder Uuid"},"max_credits":{"anyOf":[{"type":"integer"},{"type":"null"}],"default":null,"title":"Max Credits"}},"required":["initial_protein_sequences"],"type":"object"}},{"name":"submit_docking_workflow","description":"Submits a Docking workflow to the API.\\n\\nArgs:\\n    protein: The protein to dock. Can be fed as a uuid or a Protein object\\n    pocket: The pocket to dock into\\n    initial_molecule: The initial molecule to be docked.\\n        Can be a dict, StJamesMolecule, or RdkitMol object\\n    do_csearch: Whether to perform a conformational search on the ligand\\n    do_optimization: Whether to perform an optimization on the ligand\\n    name: The name of the workflow\\n    folder_uuid: The UUID of the folder to place the workflow in\\n    max_credits: The maximum number of credits to use for the workflow\\n    \\nReturns:\\n    Workflow object representing the submitted workflow\\n    \\nExample:\\n    # Basic docking with protein UUID\\n    result = submit_docking_workflow(\\n        protein=\\"protein-uuid-123\\",\\n        pocket=pocket_obj,\\n        initial_molecule={\\"smiles\\": \\"CC(=O)Oc1ccccc1C(=O)O\\"}\\n    )\\n    \\n    # Docking with optimization disabled\\n    result = submit_docking_workflow(\\n        protein=protein_obj,\\n        pocket=pocket_obj,\\n        initial_molecule={\\"smiles\\": \\"CCO\\"},\\n        do_csearch=False,\\n        do_optimization=False\\n    )\\n","inputSchema":{"properties":{"protein":{"anyOf":[{"type":"string"},{}],"title":"Protein"},"pocket":{"title":"Pocket"},"initial_molecule":{"anyOf":[{"additionalProperties":true,"type":"object"},{},{"type":"null"}],"default":null,"title":"Initial Molecule"},"do_csearch":{"default":true,"title":"Do Csearch","type":"boolean"},"do_optimization":{"default":true,"title":"Do Optimization","type":"boolean"},"name":{"default":"Docking Workflow","title":"Name","type":"string"},"folder_uuid":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"title":"Folder Uuid"},"max_credits":{"anyOf":[{"type":"integer"},{"type":"null"}],"default":null,"title":"Max Credits"}},"required":["protein","pocket"],"type":"object"}},{"name":"workflow_fetch_latest","description":"Fetch the latest workflow data from the database.\\n\\nUpdates the workflow object with the most recent status and results.\\n\\nArgs:\\n    workflow_uuid: The UUID of the workflow to fetch\\n    in_place: Whether to update the workflow object in place (default: False)\\n    \\nReturns:\\n    Dictionary containing the updated workflow data including status and results\\n","inputSchema":{"properties":{"workflow_uuid":{"title":"Workflow Uuid","type":"string"},"in_place":{"default":false,"title":"In Place","type":"boolean"}},"required":["workflow_uuid"],"type":"object"}},{"name":"workflow_wait_for_result","description":"Wait for a workflow to complete and return the result.\\n\\nBlocks until the workflow completes, polling at specified intervals.\\n\\nArgs:\\n    workflow_uuid: The UUID of the workflow to wait for\\n    poll_interval: Time in seconds between status checks (default: 5)\\n    \\nReturns:\\n    Dictionary containing the completed workflow data including results\\n","inputSchema":{"properties":{"workflow_uuid":{"title":"Workflow Uuid","type":"string"},"poll_interval":{"default":5,"title":"Poll Interval","type":"integer"}},"required":["workflow_uuid"],"type":"object"}},{"name":"workflow_get_status","description":"Get the current status of a workflow.\\n\\nArgs:\\n    workflow_uuid: The UUID of the workflow\\n    \\nReturns:\\n    Dictionary with status information\\n","inputSchema":{"properties":{"workflow_uuid":{"title":"Workflow Uuid","type":"string"}},"required":["workflow_uuid"],"type":"object"}},{"name":"workflow_stop","description":"Stop a running workflow.\\n\\nArgs:\\n    workflow_uuid: The UUID of the workflow to stop\\n    \\nReturns:\\n    Dictionary with confirmation message\\n","inputSchema":{"properties":{"workflow_uuid":{"title":"Workflow Uuid","type":"string"}},"required":["workflow_uuid"],"type":"object"}},{"name":"workflow_delete","description":"Delete a workflow.\\n\\nThis permanently removes the workflow and its results from the database.\\n\\nArgs:\\n    workflow_uuid: The UUID of the workflow to delete\\n    \\nReturns:\\n    Dictionary with confirmation message\\n","inputSchema":{"properties":{"workflow_uuid":{"title":"Workflow Uuid","type":"string"}},"required":["workflow_uuid"],"type":"object"}},{"name":"retrieve_workflow","description":"Retrieve a workflow from the API.\\n\\nArgs:\\n    uuid: The UUID of the workflow to retrieve\\n    \\nReturns:\\n    Dictionary containing the complete workflow data\\n    \\nRaises:\\n    HTTPError: If the API request fails\\n","inputSchema":{"properties":{"uuid":{"title":"Uuid","type":"string"}},"required":["uuid"],"type":"object"}},{"name":"retrieve_calculation_molecules","description":"Retrieve a list of molecules from a calculation.\\n\\nArgs:\\n    uuid: The UUID of the calculation to retrieve molecules from\\n    \\nReturns:\\n    List of dictionaries representing the molecules in the calculation\\n    \\nRaises:\\n    HTTPError: If the API request fails\\n","inputSchema":{"properties":{"uuid":{"title":"Uuid","type":"string"}},"required":["uuid"],"type":"object"}},{"name":"list_workflows","description":"List workflows subject to the specified criteria.\\n\\nArgs:\\n    parent_uuid: The UUID of the parent folder\\n    name_contains: Substring to search for in workflow names\\n    public: Filter workflows by their public status\\n    starred: Filter workflows by their starred status\\n    status: Filter workflows by their status\\n    workflow_type: Filter workflows by their type\\n    page: The page number to retrieve (default: 0)\\n    size: The number of items per page (default: 10)\\n    \\nReturns:\\n    List of workflow dictionaries that match the search criteria\\n    \\nRaises:\\n    HTTPError: If the request to the API fails\\n","inputSchema":{"properties":{"parent_uuid":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"title":"Parent Uuid"},"name_contains":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"title":"Name Contains"},"public":{"anyOf":[{"type":"boolean"},{"type":"null"}],"default":null,"title":"Public"},"starred":{"anyOf":[{"type":"boolean"},{"type":"null"}],"default":null,"title":"Starred"},"status":{"anyOf":[{"type":"integer"},{"type":"null"}],"default":null,"title":"Status"},"workflow_type":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"title":"Workflow Type"},"page":{"default":0,"title":"Page","type":"integer"},"size":{"default":10,"title":"Size","type":"integer"}},"type":"object"}},{"name":"workflow_update","description":"Update workflow details.\\n\\nArgs:\\n    workflow_uuid: The UUID of the workflow to update\\n    name: New name for the workflow (optional)\\n    notes: New notes for the workflow (optional)\\n    starred: Whether to star/unstar the workflow (optional)\\n    public: Whether to make the workflow public/private (optional)\\n    \\nReturns:\\n    Dictionary with updated workflow information\\n","inputSchema":{"properties":{"workflow_uuid":{"title":"Workflow Uuid","type":"string"},"name":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"title":"Name"},"notes":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"title":"Notes"},"starred":{"anyOf":[{"type":"boolean"},{"type":"null"}],"default":null,"title":"Starred"},"public":{"anyOf":[{"type":"boolean"},{"type":"null"}],"default":null,"title":"Public"}},"required":["workflow_uuid"],"type":"object"}},{"name":"workflow_is_finished","description":"Check if a workflow is finished.\\n\\nArgs:\\n    workflow_uuid: The UUID of the workflow to check\\n    \\nReturns:\\n    Dictionary with workflow completion status\\n","inputSchema":{"properties":{"workflow_uuid":{"title":"Workflow Uuid","type":"string"}},"required":["workflow_uuid"],"type":"object"}},{"name":"workflow_delete_data","description":"Delete workflow data while keeping the workflow record.\\n\\nArgs:\\n    workflow_uuid: The UUID of the workflow\\n    \\nReturns:\\n    Dictionary with confirmation message\\n","inputSchema":{"properties":{"workflow_uuid":{"title":"Workflow Uuid","type":"string"}},"required":["workflow_uuid"],"type":"object"}}]}}\r\n\r\n'
2025-08-02 13:57:38,730 - mcp.server.sse - DEBUG - Handling POST message
2025-08-02 13:57:38,730 - mcp.server.sse - DEBUG - Parsed session ID: 55686284-859c-4203-9d93-d3bdd3693f32
2025-08-02 13:57:38,730 - mcp.server.sse - DEBUG - Received JSON: b'{"method":"prompts/list","jsonrpc":"2.0","id":3}'
2025-08-02 13:57:38,730 - mcp.server.sse - DEBUG - Validated client message: root=JSONRPCRequest(method='prompts/list', params=None, jsonrpc='2.0', id=3)
2025-08-02 13:57:38,730 - mcp.server.sse - DEBUG - Sending session message to writer: SessionMessage(message=JSONRPCMessage(root=JSONRPCRequest(method='prompts/list', params=None, jsonrpc='2.0', id=3)), metadata=ServerMessageMetadata(related_request_id=None, request_context=<starlette.requests.Request object at 0x109f93140>))
2025-08-02 13:57:38,731 - mcp.server.lowlevel.server - DEBUG - Received message: <mcp.shared.session.RequestResponder object at 0x10a058b90>
2025-08-02 13:57:38,731 - mcp.server.lowlevel.server - INFO - Processing request of type ListPromptsRequest
2025-08-02 13:57:38,731 - mcp.server.lowlevel.server - DEBUG - Dispatching request of type ListPromptsRequest
2025-08-02 13:57:38,731 - mcp.server.lowlevel.server - DEBUG - Response sent
2025-08-02 13:57:38,731 - mcp.server.sse - DEBUG - Sending message via SSE: SessionMessage(message=JSONRPCMessage(root=JSONRPCResponse(jsonrpc='2.0', id=3, result={'prompts': []})), metadata=None)
2025-08-02 13:57:38,731 - sse_starlette.sse - DEBUG - chunk: b'event: message\r\ndata: {"jsonrpc":"2.0","id":3,"result":{"prompts":[]}}\r\n\r\n'
2025-08-02 13:57:52,230 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 20:57:52.230712+00:00\r\n\r\n'
2025-08-02 13:57:52,233 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 20:57:52.233713+00:00\r\n\r\n'
2025-08-02 13:57:53,707 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 20:57:53.707635+00:00\r\n\r\n'
2025-08-02 13:58:07,234 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 20:58:07.234216+00:00\r\n\r\n'
2025-08-02 13:58:07,235 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 20:58:07.235192+00:00\r\n\r\n'
2025-08-02 13:58:08,710 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 20:58:08.710367+00:00\r\n\r\n'
2025-08-02 13:58:22,237 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 20:58:22.236819+00:00\r\n\r\n'
2025-08-02 13:58:22,238 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 20:58:22.238015+00:00\r\n\r\n'
2025-08-02 13:58:23,714 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 20:58:23.713833+00:00\r\n\r\n'
2025-08-02 13:58:37,239 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 20:58:37.238981+00:00\r\n\r\n'
2025-08-02 13:58:37,240 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 20:58:37.240363+00:00\r\n\r\n'
2025-08-02 13:58:38,716 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 20:58:38.716552+00:00\r\n\r\n'
2025-08-02 13:58:38,778 - mcp.server.sse - DEBUG - Handling POST message
2025-08-02 13:58:38,778 - mcp.server.sse - DEBUG - Parsed session ID: 55686284-859c-4203-9d93-d3bdd3693f32
2025-08-02 13:58:38,778 - mcp.server.sse - DEBUG - Received JSON: b'{"method":"tools/call","params":{"name":"submit_basic_calculation_workflow","arguments":{"initial_molecule":"{\\n  \\"cell\\": null,\\n  \\"atoms\\": [\\n    {\\n      \\"position\\": [-1.57731622, 0.46259034, 0.02288227],\\n      \\"atomic_number\\": 6\\n    },\\n    {\\n      \\"position\\": [-0.55246934, -0.31349805, -0.78986664],\\n      \\"atomic_number\\": 6\\n    },\\n    {\\n      \\"position\\": [0.65178196, -0.77563238, 0.03104792],\\n      \\"atomic_number\\": 6\\n    },\\n    {\\n      \\"position\\": [1.5013315, 0.37070813, 0.55769072],\\n      \\"atomic_number\\": 6\\n    },\\n    {\\n      \\"position\\": [-1.17009891, 1.41344062, 0.37886292],\\n      \\"atomic_number\\": 1\\n    },\\n    {\\n      \\"position\\": [-1.91277475, -0.11690438, 0.88874548],\\n      \\"atomic_number\\": 1\\n    },\\n    {\\n      \\"position\\": [-2.45332233, 0.68757176, -0.59399069],\\n      \\"atomic_number\\": 1\\n    },\\n    {\\n      \\"position\\": [-0.21575239, 0.30052639, -1.63326648],\\n      \\"atomic_number\\": 1\\n    },\\n    {\\n      \\"position\\": [-1.04230601, -1.19688302, -1.21658189],\\n      \\"atomic_number\\": 1\\n    },\\n    {\\n      \\"position\\": [0.31558706, -1.39539838, 0.87044712],\\n      \\"atomic_number\\": 1\\n    },\\n    {\\n      \\"position\\": [1.28031633, -1.41330121, -0.60197473],\\n      \\"atomic_number\\": 1\\n    },\\n    {\\n      \\"position\\": [2.39258685, -0.02154188, 1.05803044],\\n      \\"atomic_number\\": 1\\n    },\\n    {\\n      \\"position\\": [0.95227634, 0.97534316, 1.28543953],\\n      \\"atomic_number\\": 1\\n    },\\n    {\\n      \\"position\\": [1.83015992, 1.0229789, -0.25746596],\\n      \\"atomic_number\\": 1\\n    }\\n  ],\\n  \\"charge\\": 0,\\n  \\"dipole\\": null,\\n  \\"energy\\": null,\\n  \\"smiles\\": \\"CCCC\\",\\n  \\"stress\\": null,\\n  \\"elapsed\\": null,\\n  \\"gradient\\": null,\\n  \\"velocities\\": null,\\n  \\"multiplicity\\": 1,\\n  \\"homo_lumo_gap\\": null,\\n  \\"scf_completed\\": null,\\n  \\"scf_iterations\\": null,\\n  \\"mulliken_charges\\": null,\\n  \\"calculation_index\\": null,\\n  \\"vibrational_modes\\": null,\\n  \\"zero_point_energy\\": null,\\n  \\"thermal_energy_corr\\": null,\\n  \\"thermal_enthalpy_corr\\": null,\\n  \\"mulliken_spin_densities\\": null,\\n  \\"thermal_free_energy_corr\\": null\\n}","engine":"xtb","method":"gfn2_xtb","mode":"rapid","name":"Basic Calculation Workflow - Butane"},"_meta":{"progressToken":4}},"jsonrpc":"2.0","id":4}'
2025-08-02 13:58:38,779 - mcp.server.sse - DEBUG - Validated client message: root=JSONRPCRequest(method='tools/call', params={'name': 'submit_basic_calculation_workflow', 'arguments': {'initial_molecule': '{\n  "cell": null,\n  "atoms": [\n    {\n      "position": [-1.57731622, 0.46259034, 0.02288227],\n      "atomic_number": 6\n    },\n    {\n      "position": [-0.55246934, -0.31349805, -0.78986664],\n      "atomic_number": 6\n    },\n    {\n      "position": [0.65178196, -0.77563238, 0.03104792],\n      "atomic_number": 6\n    },\n    {\n      "position": [1.5013315, 0.37070813, 0.55769072],\n      "atomic_number": 6\n    },\n    {\n      "position": [-1.17009891, 1.41344062, 0.37886292],\n      "atomic_number": 1\n    },\n    {\n      "position": [-1.91277475, -0.11690438, 0.88874548],\n      "atomic_number": 1\n    },\n    {\n      "position": [-2.45332233, 0.68757176, -0.59399069],\n      "atomic_number": 1\n    },\n    {\n      "position": [-0.21575239, 0.30052639, -1.63326648],\n      "atomic_number": 1\n    },\n    {\n      "position": [-1.04230601, -1.19688302, -1.21658189],\n      "atomic_number": 1\n    },\n    {\n      "position": [0.31558706, -1.39539838, 0.87044712],\n      "atomic_number": 1\n    },\n    {\n      "position": [1.28031633, -1.41330121, -0.60197473],\n      "atomic_number": 1\n    },\n    {\n      "position": [2.39258685, -0.02154188, 1.05803044],\n      "atomic_number": 1\n    },\n    {\n      "position": [0.95227634, 0.97534316, 1.28543953],\n      "atomic_number": 1\n    },\n    {\n      "position": [1.83015992, 1.0229789, -0.25746596],\n      "atomic_number": 1\n    }\n  ],\n  "charge": 0,\n  "dipole": null,\n  "energy": null,\n  "smiles": "CCCC",\n  "stress": null,\n  "elapsed": null,\n  "gradient": null,\n  "velocities": null,\n  "multiplicity": 1,\n  "homo_lumo_gap": null,\n  "scf_completed": null,\n  "scf_iterations": null,\n  "mulliken_charges": null,\n  "calculation_index": null,\n  "vibrational_modes": null,\n  "zero_point_energy": null,\n  "thermal_energy_corr": null,\n  "thermal_enthalpy_corr": null,\n  "mulliken_spin_densities": null,\n  "thermal_free_energy_corr": null\n}', 'engine': 'xtb', 'method': 'gfn2_xtb', 'mode': 'rapid', 'name': 'Basic Calculation Workflow - Butane'}, '_meta': {'progressToken': 4}}, jsonrpc='2.0', id=4)
2025-08-02 13:58:38,779 - mcp.server.sse - DEBUG - Sending session message to writer: SessionMessage(message=JSONRPCMessage(root=JSONRPCRequest(method='tools/call', params={'name': 'submit_basic_calculation_workflow', 'arguments': {'initial_molecule': '{\n  "cell": null,\n  "atoms": [\n    {\n      "position": [-1.57731622, 0.46259034, 0.02288227],\n      "atomic_number": 6\n    },\n    {\n      "position": [-0.55246934, -0.31349805, -0.78986664],\n      "atomic_number": 6\n    },\n    {\n      "position": [0.65178196, -0.77563238, 0.03104792],\n      "atomic_number": 6\n    },\n    {\n      "position": [1.5013315, 0.37070813, 0.55769072],\n      "atomic_number": 6\n    },\n    {\n      "position": [-1.17009891, 1.41344062, 0.37886292],\n      "atomic_number": 1\n    },\n    {\n      "position": [-1.91277475, -0.11690438, 0.88874548],\n      "atomic_number": 1\n    },\n    {\n      "position": [-2.45332233, 0.68757176, -0.59399069],\n      "atomic_number": 1\n    },\n    {\n      "position": [-0.21575239, 0.30052639, -1.63326648],\n      "atomic_number": 1\n    },\n    {\n      "position": [-1.04230601, -1.19688302, -1.21658189],\n      "atomic_number": 1\n    },\n    {\n      "position": [0.31558706, -1.39539838, 0.87044712],\n      "atomic_number": 1\n    },\n    {\n      "position": [1.28031633, -1.41330121, -0.60197473],\n      "atomic_number": 1\n    },\n    {\n      "position": [2.39258685, -0.02154188, 1.05803044],\n      "atomic_number": 1\n    },\n    {\n      "position": [0.95227634, 0.97534316, 1.28543953],\n      "atomic_number": 1\n    },\n    {\n      "position": [1.83015992, 1.0229789, -0.25746596],\n      "atomic_number": 1\n    }\n  ],\n  "charge": 0,\n  "dipole": null,\n  "energy": null,\n  "smiles": "CCCC",\n  "stress": null,\n  "elapsed": null,\n  "gradient": null,\n  "velocities": null,\n  "multiplicity": 1,\n  "homo_lumo_gap": null,\n  "scf_completed": null,\n  "scf_iterations": null,\n  "mulliken_charges": null,\n  "calculation_index": null,\n  "vibrational_modes": null,\n  "zero_point_energy": null,\n  "thermal_energy_corr": null,\n  "thermal_enthalpy_corr": null,\n  "mulliken_spin_densities": null,\n  "thermal_free_energy_corr": null\n}', 'engine': 'xtb', 'method': 'gfn2_xtb', 'mode': 'rapid', 'name': 'Basic Calculation Workflow - Butane'}, '_meta': {'progressToken': 4}}, jsonrpc='2.0', id=4)), metadata=ServerMessageMetadata(related_request_id=None, request_context=<starlette.requests.Request object at 0x109f92de0>))
2025-08-02 13:58:38,780 - mcp.server.lowlevel.server - DEBUG - Received message: <mcp.shared.session.RequestResponder object at 0x109f82ad0>
2025-08-02 13:58:38,780 - mcp.server.lowlevel.server - INFO - Processing request of type CallToolRequest
2025-08-02 13:58:38,780 - mcp.server.lowlevel.server - DEBUG - Dispatching request of type CallToolRequest
2025-08-02 13:58:38,782 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - INFO - ============================================================
2025-08-02 13:58:38,782 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - INFO - submit_basic_calculation_workflow called with:
2025-08-02 13:58:38,782 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - INFO -   method: gfn2_xtb (type: <class 'str'>)
2025-08-02 13:58:38,782 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - INFO -   tasks: None (type: <class 'NoneType'>)
2025-08-02 13:58:38,782 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - INFO -   mode: rapid
2025-08-02 13:58:38,782 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - INFO -   engine: xtb
2025-08-02 13:58:38,782 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - INFO -   name: Basic Calculation Workflow - Butane
2025-08-02 13:58:38,782 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - INFO -   initial_molecule: '{
  "cell": null,
  "atoms": [
    {
      "position": [-1.57731622, 0.46259034, 0.02288227],
      "atomic_number": 6
    },
    {
      "position": [-0.55246934, -0.31349805, -0.78986664],
      "atomic_number": 6
    },
    {
      "position": [0.65178196, -0.77563238, 0.03104792],
      "atomic_number": 6
    },
    {
      "position": [1.5013315, 0.37070813, 0.55769072],
      "atomic_number": 6
    },
    {
      "position": [-1.17009891, 1.41344062, 0.37886292],
      "atomic_number": 1
    },
    {
      "position": [-1.91277475, -0.11690438, 0.88874548],
      "atomic_number": 1
    },
    {
      "position": [-2.45332233, 0.68757176, -0.59399069],
      "atomic_number": 1
    },
    {
      "position": [-0.21575239, 0.30052639, -1.63326648],
      "atomic_number": 1
    },
    {
      "position": [-1.04230601, -1.19688302, -1.21658189],
      "atomic_number": 1
    },
    {
      "position": [0.31558706, -1.39539838, 0.87044712],
      "atomic_number": 1
    },
    {
      "position": [1.28031633, -1.41330121, -0.60197473],
      "atomic_number": 1
    },
    {
      "position": [2.39258685, -0.02154188, 1.05803044],
      "atomic_number": 1
    },
    {
      "position": [0.95227634, 0.97534316, 1.28543953],
      "atomic_number": 1
    },
    {
      "position": [1.83015992, 1.0229789, -0.25746596],
      "atomic_number": 1
    }
  ],
  "charge": 0,
  "dipole": null,
  "energy": null,
  "smiles": "CCCC",
  "stress": null,
  "elapsed": null,
  "gradient": null,
  "velocities": null,
  "multiplicity": 1,
  "homo_lumo_gap": null,
  "scf_completed": null,
  "scf_iterations": null,
  "mulliken_charges": null,
  "calculation_index": null,
  "vibrational_modes": null,
  "zero_point_energy": null,
  "thermal_energy_corr": null,
  "thermal_enthalpy_corr": null,
  "mulliken_spin_densities": null,
  "thermal_free_energy_corr": null
}' (SMILES string)
2025-08-02 13:58:38,782 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - DEBUG - Converting SMILES string to StJamesMolecule
2025-08-02 13:58:38,783 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - DEBUG - Could not convert to StJamesMolecule: , passing string directly
2025-08-02 13:58:38,783 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - INFO - Calling rowan.submit_basic_calculation_workflow...
2025-08-02 13:58:38,815 - httpcore.connection - DEBUG - connect_tcp.started host='api.rowansci.com' port=443 local_address=None timeout=5.0 socket_options=None
2025-08-02 13:58:38,913 - httpcore.connection - DEBUG - connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x10a0cd160>
2025-08-02 13:58:38,913 - httpcore.connection - DEBUG - start_tls.started ssl_context=<ssl.SSLContext object at 0x10a081be0> server_hostname='api.rowansci.com' timeout=5.0
2025-08-02 13:58:39,038 - httpcore.connection - DEBUG - start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x10a09c910>
2025-08-02 13:58:39,039 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-08-02 13:58:39,039 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-08-02 13:58:39,039 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-08-02 13:58:39,040 - httpcore.http11 - DEBUG - send_request_body.complete
2025-08-02 13:58:39,040 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-08-02 13:58:39,461 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 500, b'Internal Server Error', [(b'Date', b'Sat, 02 Aug 2025 20:58:39 GMT'), (b'Content-Type', b'application/json'), (b'Content-Length', b'57'), (b'Connection', b'keep-alive'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains')])
2025-08-02 13:58:39,462 - httpx - INFO - HTTP Request: POST https://api.rowansci.com/workflow "HTTP/1.1 500 Internal Server Error"
2025-08-02 13:58:39,462 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-08-02 13:58:39,462 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-08-02 13:58:39,462 - httpcore.http11 - DEBUG - response_closed.started
2025-08-02 13:58:39,462 - httpcore.http11 - DEBUG - response_closed.complete
2025-08-02 13:58:39,463 - httpcore.connection - DEBUG - close.started
2025-08-02 13:58:39,463 - httpcore.connection - DEBUG - close.complete
2025-08-02 13:58:39,463 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - ERROR - ERROR in submit_basic_calculation_workflow: Server error '500 Internal Server Error' for url 'https://api.rowansci.com/workflow'
For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/500
2025-08-02 13:58:39,463 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - ERROR - Error type: HTTPStatusError
2025-08-02 13:58:39,467 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - ERROR - Traceback:
Traceback (most recent call last):
  File "/Users/katherineyenko/Desktop/sandbox/rowan-mcp/rowan_mcp/functions_v2/submit_basic_calculation_workflow.py", line 136, in submit_basic_calculation_workflow
    result = rowan.submit_basic_calculation_workflow(
        initial_molecule=initial_molecule,
    ...<6 lines>...
        max_credits=max_credits
    )
  File "/Users/katherineyenko/Desktop/sandbox/rowan-mcp/.venv/lib/python3.13/site-packages/rowan/workflow.py", line 410, in submit_basic_calculation_workflow
    response.raise_for_status()
    ~~~~~~~~~~~~~~~~~~~~~~~~~^^
  File "/Users/katherineyenko/Desktop/sandbox/rowan-mcp/.venv/lib/python3.13/site-packages/httpx/_models.py", line 829, in raise_for_status
    raise HTTPStatusError(message, request=request, response=self)
httpx.HTTPStatusError: Server error '500 Internal Server Error' for url 'https://api.rowansci.com/workflow'
For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/500

2025-08-02 13:58:39,467 - FastMCP.fastmcp.tools.tool_manager - ERROR - Error calling tool 'submit_basic_calculation_workflow': Server error '500 Internal Server Error' for url 'https://api.rowansci.com/workflow'
For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/500
Traceback (most recent call last):
  File "/Users/katherineyenko/Desktop/sandbox/rowan-mcp/.venv/lib/python3.13/site-packages/fastmcp/tools/tool_manager.py", line 131, in call_tool
    return await tool.run(arguments)
           ^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/katherineyenko/Desktop/sandbox/rowan-mcp/.venv/lib/python3.13/site-packages/fastmcp/tools/tool.py", line 187, in run
    result = type_adapter.validate_python(arguments)
  File "/Users/katherineyenko/Desktop/sandbox/rowan-mcp/.venv/lib/python3.13/site-packages/pydantic/type_adapter.py", line 421, in validate_python
    return self.validator.validate_python(
           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^
        object,
        ^^^^^^^
    ...<5 lines>...
        by_name=by_name,
        ^^^^^^^^^^^^^^^^
    )
    ^
  File "/Users/katherineyenko/Desktop/sandbox/rowan-mcp/rowan_mcp/functions_v2/submit_basic_calculation_workflow.py", line 136, in submit_basic_calculation_workflow
    result = rowan.submit_basic_calculation_workflow(
        initial_molecule=initial_molecule,
    ...<6 lines>...
        max_credits=max_credits
    )
  File "/Users/katherineyenko/Desktop/sandbox/rowan-mcp/.venv/lib/python3.13/site-packages/rowan/workflow.py", line 410, in submit_basic_calculation_workflow
    response.raise_for_status()
    ~~~~~~~~~~~~~~~~~~~~~~~~~^^
  File "/Users/katherineyenko/Desktop/sandbox/rowan-mcp/.venv/lib/python3.13/site-packages/httpx/_models.py", line 829, in raise_for_status
    raise HTTPStatusError(message, request=request, response=self)
httpx.HTTPStatusError: Server error '500 Internal Server Error' for url 'https://api.rowansci.com/workflow'
For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/500
2025-08-02 13:58:39,580 - mcp.server.lowlevel.server - DEBUG - Response sent
2025-08-02 13:58:39,581 - mcp.server.sse - DEBUG - Sending message via SSE: SessionMessage(message=JSONRPCMessage(root=JSONRPCResponse(jsonrpc='2.0', id=4, result={'content': [{'type': 'text', 'text': "Error calling tool 'submit_basic_calculation_workflow': Server error '500 Internal Server Error' for url 'https://api.rowansci.com/workflow'\nFor more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/500"}], 'isError': True})), metadata=None)
2025-08-02 13:58:39,581 - sse_starlette.sse - DEBUG - chunk: b'event: message\r\ndata: {"jsonrpc":"2.0","id":4,"result":{"content":[{"type":"text","text":"Error calling tool \'submit_basic_calculation_workflow\': Server error \'500 Internal Server Error\' for url \'https://api.rowansci.com/workflow\'\\nFor more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/500"}],"isError":true}}\r\n\r\n'
2025-08-02 13:58:52,241 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 20:58:52.240956+00:00\r\n\r\n'
2025-08-02 13:58:52,241 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 20:58:52.241275+00:00\r\n\r\n'
2025-08-02 13:58:53,718 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 20:58:53.718477+00:00\r\n\r\n'
2025-08-02 13:59:07,242 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 20:59:07.242662+00:00\r\n\r\n'
2025-08-02 13:59:07,243 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 20:59:07.243791+00:00\r\n\r\n'
2025-08-02 13:59:08,720 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 20:59:08.719990+00:00\r\n\r\n'
2025-08-02 13:59:12,245 - mcp.server.sse - DEBUG - Handling POST message
2025-08-02 13:59:12,245 - mcp.server.sse - DEBUG - Parsed session ID: 55686284-859c-4203-9d93-d3bdd3693f32
2025-08-02 13:59:12,245 - mcp.server.sse - DEBUG - Received JSON: b'{"method":"tools/call","params":{"name":"submit_basic_calculation_workflow","arguments":{"initial_molecule":"CCCC","engine":"xtb","method":"gfn2_xtb","mode":"auto","name":"Basic Calculation Workflow from data.json"},"_meta":{"progressToken":5}},"jsonrpc":"2.0","id":5}'
2025-08-02 13:59:12,246 - mcp.server.sse - DEBUG - Validated client message: root=JSONRPCRequest(method='tools/call', params={'name': 'submit_basic_calculation_workflow', 'arguments': {'initial_molecule': 'CCCC', 'engine': 'xtb', 'method': 'gfn2_xtb', 'mode': 'auto', 'name': 'Basic Calculation Workflow from data.json'}, '_meta': {'progressToken': 5}}, jsonrpc='2.0', id=5)
2025-08-02 13:59:12,246 - mcp.server.sse - DEBUG - Sending session message to writer: SessionMessage(message=JSONRPCMessage(root=JSONRPCRequest(method='tools/call', params={'name': 'submit_basic_calculation_workflow', 'arguments': {'initial_molecule': 'CCCC', 'engine': 'xtb', 'method': 'gfn2_xtb', 'mode': 'auto', 'name': 'Basic Calculation Workflow from data.json'}, '_meta': {'progressToken': 5}}, jsonrpc='2.0', id=5)), metadata=ServerMessageMetadata(related_request_id=None, request_context=<starlette.requests.Request object at 0x10a1055b0>))
2025-08-02 13:59:12,246 - mcp.server.lowlevel.server - DEBUG - Received message: <mcp.shared.session.RequestResponder object at 0x109f83ce0>
2025-08-02 13:59:12,246 - mcp.server.lowlevel.server - INFO - Processing request of type CallToolRequest
2025-08-02 13:59:12,247 - mcp.server.lowlevel.server - DEBUG - Dispatching request of type CallToolRequest
2025-08-02 13:59:12,247 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - INFO - ============================================================
2025-08-02 13:59:12,247 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - INFO - submit_basic_calculation_workflow called with:
2025-08-02 13:59:12,247 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - INFO -   method: gfn2_xtb (type: <class 'str'>)
2025-08-02 13:59:12,247 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - INFO -   tasks: None (type: <class 'NoneType'>)
2025-08-02 13:59:12,247 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - INFO -   mode: auto
2025-08-02 13:59:12,247 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - INFO -   engine: xtb
2025-08-02 13:59:12,247 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - INFO -   name: Basic Calculation Workflow from data.json
2025-08-02 13:59:12,247 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - INFO -   initial_molecule: 'CCCC' (SMILES string)
2025-08-02 13:59:12,247 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - DEBUG - Converting SMILES string to StJamesMolecule
2025-08-02 13:59:12,274 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - DEBUG - Successfully converted to StJamesMolecule
2025-08-02 13:59:12,274 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - INFO - Calling rowan.submit_basic_calculation_workflow...
2025-08-02 13:59:12,281 - httpcore.connection - DEBUG - connect_tcp.started host='api.rowansci.com' port=443 local_address=None timeout=5.0 socket_options=None
2025-08-02 13:59:12,390 - httpcore.connection - DEBUG - connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x10a09ee90>
2025-08-02 13:59:12,391 - httpcore.connection - DEBUG - start_tls.started ssl_context=<ssl.SSLContext object at 0x109f931d0> server_hostname='api.rowansci.com' timeout=5.0
2025-08-02 13:59:12,512 - httpcore.connection - DEBUG - start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x10a007490>
2025-08-02 13:59:12,512 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-08-02 13:59:12,512 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-08-02 13:59:12,512 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-08-02 13:59:12,512 - httpcore.http11 - DEBUG - send_request_body.complete
2025-08-02 13:59:12,512 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-08-02 13:59:13,092 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sat, 02 Aug 2025 20:59:13 GMT'), (b'Content-Type', b'application/json'), (b'Content-Length', b'2093'), (b'Connection', b'keep-alive'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains')])
2025-08-02 13:59:13,092 - httpx - INFO - HTTP Request: POST https://api.rowansci.com/workflow "HTTP/1.1 200 OK"
2025-08-02 13:59:13,092 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-08-02 13:59:13,092 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-08-02 13:59:13,092 - httpcore.http11 - DEBUG - response_closed.started
2025-08-02 13:59:13,092 - httpcore.http11 - DEBUG - response_closed.complete
2025-08-02 13:59:13,092 - httpcore.connection - DEBUG - close.started
2025-08-02 13:59:13,093 - httpcore.connection - DEBUG - close.complete
2025-08-02 13:59:13,094 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - INFO - SUCCESS: Workflow submitted with UUID: 5382d684-0e7f-4994-b613-6198c96bb592
2025-08-02 13:59:13,094 - mcp.server.lowlevel.server - DEBUG - Response sent
2025-08-02 13:59:13,094 - mcp.server.sse - DEBUG - Sending message via SSE: SessionMessage(message=JSONRPCMessage(root=JSONRPCResponse(jsonrpc='2.0', id=5, result={'content': [{'type': 'text', 'text': '{\n  "name": "Basic Calculation Workflow from data.json",\n  "uuid": "5382d684-0e7f-4994-b613-6198c96bb592",\n  "created_at": "2025-08-02T20:59:12.675017Z",\n  "updated_at": null,\n  "started_at": null,\n  "completed_at": null,\n  "object_status": 0,\n  "parent_uuid": "e5c3ce65-43df-4ab3-90e0-a56f42584cc0",\n  "notes": "",\n  "starred": false,\n  "public": false,\n  "object_type": "basic_calculation",\n  "object_data": {\n    "settings": {\n      "method": "GFN2_XTB",\n      "tasks": [\n        "optimize"\n      ],\n      "mode": "auto"\n    },\n    "engine": "xtb",\n    "initial_molecule": {\n      "charge": 0,\n      "multiplicity": 1,\n      "atoms": [\n        {\n          "atomic_number": 6,\n          "position": [\n            -1.57731622,\n            0.46259034,\n            0.02288227\n          ]\n        },\n        {\n          "atomic_number": 6,\n          "position": [\n            -0.55246934,\n            -0.31349805,\n            -0.78986664\n          ]\n        },\n        {\n          "atomic_number": 6,\n          "position": [\n            0.65178196,\n            -0.77563238,\n            0.03104792\n          ]\n        },\n        {\n          "atomic_number": 6,\n          "position": [\n            1.5013315,\n            0.37070813,\n            0.55769072\n          ]\n        },\n        {\n          "atomic_number": 1,\n          "position": [\n            -1.17009891,\n            1.41344062,\n            0.37886292\n          ]\n        },\n        {\n          "atomic_number": 1,\n          "position": [\n            -1.91277475,\n            -0.11690438,\n            0.88874548\n          ]\n        },\n        {\n          "atomic_number": 1,\n          "position": [\n            -2.45332233,\n            0.68757176,\n            -0.59399069\n          ]\n        },\n        {\n          "atomic_number": 1,\n          "position": [\n            -0.21575239,\n            0.30052639,\n            -1.63326648\n          ]\n        },\n        {\n          "atomic_number": 1,\n          "position": [\n            -1.04230601,\n            -1.19688302,\n            -1.21658189\n          ]\n        },\n        {\n          "atomic_number": 1,\n          "position": [\n            0.31558706,\n            -1.39539838,\n            0.87044712\n          ]\n        },\n        {\n          "atomic_number": 1,\n          "position": [\n            1.28031633,\n            -1.41330121,\n            -0.60197473\n          ]\n        },\n        {\n          "atomic_number": 1,\n          "position": [\n            2.39258685,\n            -0.02154188,\n            1.05803044\n          ]\n        },\n        {\n          "atomic_number": 1,\n          "position": [\n            0.95227634,\n            0.97534316,\n            1.28543953\n          ]\n        },\n        {\n          "atomic_number": 1,\n          "position": [\n            1.83015992,\n            1.0229789,\n            -0.25746596\n          ]\n        }\n      ],\n      "cell": null,\n      "energy": null,\n      "scf_iterations": null,\n      "scf_completed": null,\n      "elapsed": null,\n      "homo_lumo_gap": null,\n      "gradient": null,\n      "stress": null,\n      "velocities": null,\n      "mulliken_charges": null,\n      "mulliken_spin_densities": null,\n      "dipole": null,\n      "vibrational_modes": null,\n      "zero_point_energy": null,\n      "thermal_energy_corr": null,\n      "thermal_enthalpy_corr": null,\n      "thermal_free_energy_corr": null,\n      "smiles": "CCCC",\n      "calculation_index": null\n    }\n  },\n  "email_when_complete": false,\n  "max_credits": null,\n  "elapsed": 0.0,\n  "credits_charged": 0.0\n}'}], 'isError': False})), metadata=None)
2025-08-02 13:59:13,094 - sse_starlette.sse - DEBUG - chunk: b'event: message\r\ndata: {"jsonrpc":"2.0","id":5,"result":{"content":[{"type":"text","text":"{\\n  \\"name\\": \\"Basic Calculation Workflow from data.json\\",\\n  \\"uuid\\": \\"5382d684-0e7f-4994-b613-6198c96bb592\\",\\n  \\"created_at\\": \\"2025-08-02T20:59:12.675017Z\\",\\n  \\"updated_at\\": null,\\n  \\"started_at\\": null,\\n  \\"completed_at\\": null,\\n  \\"object_status\\": 0,\\n  \\"parent_uuid\\": \\"e5c3ce65-43df-4ab3-90e0-a56f42584cc0\\",\\n  \\"notes\\": \\"\\",\\n  \\"starred\\": false,\\n  \\"public\\": false,\\n  \\"object_type\\": \\"basic_calculation\\",\\n  \\"object_data\\": {\\n    \\"settings\\": {\\n      \\"method\\": \\"GFN2_XTB\\",\\n      \\"tasks\\": [\\n        \\"optimize\\"\\n      ],\\n      \\"mode\\": \\"auto\\"\\n    },\\n    \\"engine\\": \\"xtb\\",\\n    \\"initial_molecule\\": {\\n      \\"charge\\": 0,\\n      \\"multiplicity\\": 1,\\n      \\"atoms\\": [\\n        {\\n          \\"atomic_number\\": 6,\\n          \\"position\\": [\\n            -1.57731622,\\n            0.46259034,\\n            0.02288227\\n          ]\\n        },\\n        {\\n          \\"atomic_number\\": 6,\\n          \\"position\\": [\\n            -0.55246934,\\n            -0.31349805,\\n            -0.78986664\\n          ]\\n        },\\n        {\\n          \\"atomic_number\\": 6,\\n          \\"position\\": [\\n            0.65178196,\\n            -0.77563238,\\n            0.03104792\\n          ]\\n        },\\n        {\\n          \\"atomic_number\\": 6,\\n          \\"position\\": [\\n            1.5013315,\\n            0.37070813,\\n            0.55769072\\n          ]\\n        },\\n        {\\n          \\"atomic_number\\": 1,\\n          \\"position\\": [\\n            -1.17009891,\\n            1.41344062,\\n            0.37886292\\n          ]\\n        },\\n        {\\n          \\"atomic_number\\": 1,\\n          \\"position\\": [\\n            -1.91277475,\\n            -0.11690438,\\n            0.88874548\\n          ]\\n        },\\n        {\\n          \\"atomic_number\\": 1,\\n          \\"position\\": [\\n            -2.45332233,\\n            0.68757176,\\n            -0.59399069\\n          ]\\n        },\\n        {\\n          \\"atomic_number\\": 1,\\n          \\"position\\": [\\n            -0.21575239,\\n            0.30052639,\\n            -1.63326648\\n          ]\\n        },\\n        {\\n          \\"atomic_number\\": 1,\\n          \\"position\\": [\\n            -1.04230601,\\n            -1.19688302,\\n            -1.21658189\\n          ]\\n        },\\n        {\\n          \\"atomic_number\\": 1,\\n          \\"position\\": [\\n            0.31558706,\\n            -1.39539838,\\n            0.87044712\\n          ]\\n        },\\n        {\\n          \\"atomic_number\\": 1,\\n          \\"position\\": [\\n            1.28031633,\\n            -1.41330121,\\n            -0.60197473\\n          ]\\n        },\\n        {\\n          \\"atomic_number\\": 1,\\n          \\"position\\": [\\n            2.39258685,\\n            -0.02154188,\\n            1.05803044\\n          ]\\n        },\\n        {\\n          \\"atomic_number\\": 1,\\n          \\"position\\": [\\n            0.95227634,\\n            0.97534316,\\n            1.28543953\\n          ]\\n        },\\n        {\\n          \\"atomic_number\\": 1,\\n          \\"position\\": [\\n            1.83015992,\\n            1.0229789,\\n            -0.25746596\\n          ]\\n        }\\n      ],\\n      \\"cell\\": null,\\n      \\"energy\\": null,\\n      \\"scf_iterations\\": null,\\n      \\"scf_completed\\": null,\\n      \\"elapsed\\": null,\\n      \\"homo_lumo_gap\\": null,\\n      \\"gradient\\": null,\\n      \\"stress\\": null,\\n      \\"velocities\\": null,\\n      \\"mulliken_charges\\": null,\\n      \\"mulliken_spin_densities\\": null,\\n      \\"dipole\\": null,\\n      \\"vibrational_modes\\": null,\\n      \\"zero_point_energy\\": null,\\n      \\"thermal_energy_corr\\": null,\\n      \\"thermal_enthalpy_corr\\": null,\\n      \\"thermal_free_energy_corr\\": null,\\n      \\"smiles\\": \\"CCCC\\",\\n      \\"calculation_index\\": null\\n    }\\n  },\\n  \\"email_when_complete\\": false,\\n  \\"max_credits\\": null,\\n  \\"elapsed\\": 0.0,\\n  \\"credits_charged\\": 0.0\\n}"}],"isError":false}}\r\n\r\n'
2025-08-02 13:59:22,245 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 20:59:22.245231+00:00\r\n\r\n'
2025-08-02 13:59:22,245 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 20:59:22.245868+00:00\r\n\r\n'
2025-08-02 13:59:23,726 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 20:59:23.726383+00:00\r\n\r\n'
2025-08-02 13:59:37,251 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 20:59:37.251273+00:00\r\n\r\n'
2025-08-02 13:59:37,252 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 20:59:37.252825+00:00\r\n\r\n'
2025-08-02 13:59:38,732 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 20:59:38.732050+00:00\r\n\r\n'
2025-08-02 13:59:52,254 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 20:59:52.254572+00:00\r\n\r\n'
2025-08-02 13:59:52,255 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 20:59:52.255007+00:00\r\n\r\n'
2025-08-02 13:59:53,734 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 20:59:53.734876+00:00\r\n\r\n'
2025-08-02 14:00:07,258 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 21:00:07.258451+00:00\r\n\r\n'
2025-08-02 14:00:07,260 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 21:00:07.260050+00:00\r\n\r\n'
2025-08-02 14:00:08,736 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 21:00:08.736533+00:00\r\n\r\n'
2025-08-02 14:00:22,261 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 21:00:22.261113+00:00\r\n\r\n'
2025-08-02 14:00:22,263 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 21:00:22.263694+00:00\r\n\r\n'
2025-08-02 14:00:23,738 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 21:00:23.738282+00:00\r\n\r\n'
2025-08-02 14:00:37,270 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 21:00:37.270473+00:00\r\n\r\n'
2025-08-02 14:00:37,271 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 21:00:37.271782+00:00\r\n\r\n'
2025-08-02 14:00:38,740 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 21:00:38.740025+00:00\r\n\r\n'
2025-08-02 14:00:52,272 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 21:00:52.272539+00:00\r\n\r\n'
2025-08-02 14:00:52,273 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 21:00:52.273616+00:00\r\n\r\n'
2025-08-02 14:00:53,744 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 21:00:53.743986+00:00\r\n\r\n'
2025-08-02 14:01:07,275 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 21:01:07.275235+00:00\r\n\r\n'
2025-08-02 14:01:07,275 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 21:01:07.275569+00:00\r\n\r\n'
2025-08-02 14:01:08,746 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 21:01:08.746712+00:00\r\n\r\n'
2025-08-02 14:01:22,277 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 21:01:22.277076+00:00\r\n\r\n'
2025-08-02 14:01:22,278 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 21:01:22.278187+00:00\r\n\r\n'
2025-08-02 14:01:23,748 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 21:01:23.748552+00:00\r\n\r\n'
2025-08-02 14:01:37,280 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 21:01:37.280262+00:00\r\n\r\n'
2025-08-02 14:01:37,283 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 21:01:37.283214+00:00\r\n\r\n'
2025-08-02 14:01:38,750 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 21:01:38.750534+00:00\r\n\r\n'
2025-08-02 14:01:52,284 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 21:01:52.284389+00:00\r\n\r\n'
2025-08-02 14:01:52,286 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 21:01:52.286112+00:00\r\n\r\n'
2025-08-02 14:01:53,753 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 21:01:53.753323+00:00\r\n\r\n'
2025-08-02 14:02:03,941 - sse_starlette.sse - DEBUG - Got event: http.disconnect. Stop streaming.
2025-08-02 14:02:03,948 - root - DEBUG - Client session disconnected 55686284-859c-4203-9d93-d3bdd3693f32
2025-08-02 14:02:07,287 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 21:02:07.287649+00:00\r\n\r\n'
2025-08-02 14:02:07,287 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 21:02:07.287880+00:00\r\n\r\n'
2025-08-02 14:02:08,326 - mcp.server.sse - DEBUG - Setting up SSE connection
2025-08-02 14:02:08,326 - mcp.server.sse - DEBUG - Created new session with ID: 37b07b7d-1d3f-456c-ab05-64fa6e6fba6d
2025-08-02 14:02:08,326 - mcp.server.sse - DEBUG - Starting SSE response task
2025-08-02 14:02:08,326 - mcp.server.sse - DEBUG - Yielding read and write streams
2025-08-02 14:02:08,328 - mcp.server.sse - DEBUG - Starting SSE writer
2025-08-02 14:02:08,328 - mcp.server.sse - DEBUG - Sent endpoint event: /messages/?session_id=37b07b7d1d3f456cab0564fa6e6fba6d
2025-08-02 14:02:08,328 - sse_starlette.sse - DEBUG - chunk: b'event: endpoint\r\ndata: /messages/?session_id=37b07b7d1d3f456cab0564fa6e6fba6d\r\n\r\n'
2025-08-02 14:02:08,332 - mcp.server.sse - DEBUG - Handling POST message
2025-08-02 14:02:08,332 - mcp.server.sse - DEBUG - Parsed session ID: 37b07b7d-1d3f-456c-ab05-64fa6e6fba6d
2025-08-02 14:02:08,332 - mcp.server.sse - DEBUG - Received JSON: b'{"method":"initialize","params":{"protocolVersion":"2025-06-18","capabilities":{"tools":true,"prompts":true,"resources":false,"logging":false,"roots":{"listChanged":false}},"clientInfo":{"name":"cursor-vscode","version":"1.0.0"}},"jsonrpc":"2.0","id":1}'
2025-08-02 14:02:08,332 - mcp.server.sse - DEBUG - Validated client message: root=JSONRPCRequest(method='initialize', params={'protocolVersion': '2025-06-18', 'capabilities': {'tools': True, 'prompts': True, 'resources': False, 'logging': False, 'roots': {'listChanged': False}}, 'clientInfo': {'name': 'cursor-vscode', 'version': '1.0.0'}}, jsonrpc='2.0', id=1)
2025-08-02 14:02:08,332 - mcp.server.sse - DEBUG - Sending session message to writer: SessionMessage(message=JSONRPCMessage(root=JSONRPCRequest(method='initialize', params={'protocolVersion': '2025-06-18', 'capabilities': {'tools': True, 'prompts': True, 'resources': False, 'logging': False, 'roots': {'listChanged': False}}, 'clientInfo': {'name': 'cursor-vscode', 'version': '1.0.0'}}, jsonrpc='2.0', id=1)), metadata=ServerMessageMetadata(related_request_id=None, request_context=<starlette.requests.Request object at 0x10a105ac0>))
2025-08-02 14:02:08,332 - mcp.server.sse - DEBUG - Sending message via SSE: SessionMessage(message=JSONRPCMessage(root=JSONRPCResponse(jsonrpc='2.0', id=1, result={'protocolVersion': '2025-03-26', 'capabilities': {'experimental': {}, 'prompts': {'listChanged': False}, 'resources': {'subscribe': False, 'listChanged': False}, 'tools': {'listChanged': False}}, 'serverInfo': {'name': 'Rowan MCP Server', 'version': '1.9.3'}})), metadata=None)
2025-08-02 14:02:08,333 - sse_starlette.sse - DEBUG - chunk: b'event: message\r\ndata: {"jsonrpc":"2.0","id":1,"result":{"protocolVersion":"2025-03-26","capabilities":{"experimental":{},"prompts":{"listChanged":false},"resources":{"subscribe":false,"listChanged":false},"tools":{"listChanged":false}},"serverInfo":{"name":"Rowan MCP Server","version":"1.9.3"}}}\r\n\r\n'
2025-08-02 14:02:08,336 - mcp.server.sse - DEBUG - Handling POST message
2025-08-02 14:02:08,336 - mcp.server.sse - DEBUG - Parsed session ID: 37b07b7d-1d3f-456c-ab05-64fa6e6fba6d
2025-08-02 14:02:08,336 - mcp.server.sse - DEBUG - Received JSON: b'{"method":"notifications/initialized","jsonrpc":"2.0"}'
2025-08-02 14:02:08,336 - mcp.server.sse - DEBUG - Validated client message: root=JSONRPCNotification(method='notifications/initialized', params=None, jsonrpc='2.0')
2025-08-02 14:02:08,337 - mcp.server.sse - DEBUG - Sending session message to writer: SessionMessage(message=JSONRPCMessage(root=JSONRPCNotification(method='notifications/initialized', params=None, jsonrpc='2.0')), metadata=ServerMessageMetadata(related_request_id=None, request_context=<starlette.requests.Request object at 0x10a105d00>))
2025-08-02 14:02:08,337 - mcp.server.lowlevel.server - DEBUG - Received message: root=InitializedNotification(method='notifications/initialized', params=None, jsonrpc='2.0')
2025-08-02 14:02:08,340 - mcp.server.sse - DEBUG - Handling POST message
2025-08-02 14:02:08,340 - mcp.server.sse - DEBUG - Parsed session ID: 37b07b7d-1d3f-456c-ab05-64fa6e6fba6d
2025-08-02 14:02:08,340 - mcp.server.sse - DEBUG - Received JSON: b'{"method":"tools/list","jsonrpc":"2.0","id":2}'
2025-08-02 14:02:08,340 - mcp.server.sse - DEBUG - Validated client message: root=JSONRPCRequest(method='tools/list', params=None, jsonrpc='2.0', id=2)
2025-08-02 14:02:08,340 - mcp.server.sse - DEBUG - Sending session message to writer: SessionMessage(message=JSONRPCMessage(root=JSONRPCRequest(method='tools/list', params=None, jsonrpc='2.0', id=2)), metadata=ServerMessageMetadata(related_request_id=None, request_context=<starlette.requests.Request object at 0x10a105eb0>))
2025-08-02 14:02:08,341 - mcp.server.sse - DEBUG - Handling POST message
2025-08-02 14:02:08,341 - mcp.server.sse - DEBUG - Parsed session ID: 37b07b7d-1d3f-456c-ab05-64fa6e6fba6d
2025-08-02 14:02:08,341 - mcp.server.sse - DEBUG - Received JSON: b'{"method":"tools/list","jsonrpc":"2.0","id":3}'
2025-08-02 14:02:08,341 - mcp.server.sse - DEBUG - Validated client message: root=JSONRPCRequest(method='tools/list', params=None, jsonrpc='2.0', id=3)
2025-08-02 14:02:08,341 - mcp.server.sse - DEBUG - Sending session message to writer: SessionMessage(message=JSONRPCMessage(root=JSONRPCRequest(method='tools/list', params=None, jsonrpc='2.0', id=3)), metadata=ServerMessageMetadata(related_request_id=None, request_context=<starlette.requests.Request object at 0x10a105d00>))
2025-08-02 14:02:08,341 - mcp.server.lowlevel.server - DEBUG - Received message: <mcp.shared.session.RequestResponder object at 0x10a0a6f50>
2025-08-02 14:02:08,342 - mcp.server.lowlevel.server - INFO - Processing request of type ListToolsRequest
2025-08-02 14:02:08,342 - mcp.server.lowlevel.server - DEBUG - Dispatching request of type ListToolsRequest
2025-08-02 14:02:08,342 - mcp.server.lowlevel.server - DEBUG - Response sent
2025-08-02 14:02:08,342 - mcp.server.lowlevel.server - DEBUG - Received message: <mcp.shared.session.RequestResponder object at 0x10a0285f0>
2025-08-02 14:02:08,343 - mcp.server.sse - DEBUG - Sending message via SSE: SessionMessage(message=JSONRPCMessage(root=JSONRPCResponse(jsonrpc='2.0', id=2, result={'tools': [{'name': 'submit_basic_calculation_workflow', 'description': 'Submit a basic calculation workflow using Rowan v2 API.\n\nPerforms fundamental quantum chemistry calculations with configurable methods\nand computational tasks. Returns a workflow object for tracking progress.\n', 'inputSchema': {'properties': {'initial_molecule': {'anyOf': [{'type': 'string'}, {'additionalProperties': True, 'type': 'object'}, {}], 'description': 'The molecule to perform the calculation on. Can be a SMILES string, dict, StJamesMolecule, or RdkitMol object', 'title': 'Initial Molecule'}, 'method': {'default': 'uma_m_omol', 'description': "The method to use for the calculation (e.g., 'uma_m_omol', 'gfn2-xtb', 'r2scan_3c')", 'title': 'Method', 'type': 'string'}, 'tasks': {'anyOf': [{'items': {'type': 'string'}, 'type': 'array'}, {'type': 'null'}], 'default': None, 'description': "List of computational tasks to perform. Optional[List[str]] (e.g. ['optimize']), Defaults to None", 'title': 'Tasks'}, 'mode': {'default': 'auto', 'description': "The mode to run the calculation in ('auto', 'rapid', 'careful', 'meticulous')", 'title': 'Mode', 'type': 'string'}, 'engine': {'default': 'omol25', 'description': "The computational engine to use ('omol25', 'xtb', 'psi4')", 'title': 'Engine', 'type': 'string'}, 'name': {'default': 'Basic Calculation Workflow', 'description': 'The name of the workflow for identification', 'title': 'Name', 'type': 'string'}, 'folder_uuid': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'UUID of the folder to place the workflow in (optional)', 'title': 'Folder Uuid'}, 'max_credits': {'anyOf': [{'type': 'integer'}, {'type': 'null'}], 'default': None, 'description': 'Maximum number of credits to use for the workflow (optional)', 'title': 'Max Credits'}}, 'required': ['initial_molecule'], 'type': 'object'}}, {'name': 'submit_conformer_search_workflow', 'description': 'Submit a conformer search workflow using Rowan v2 API.\n\nExplores the conformational space of a molecule to find low-energy structures.\n\nArgs:\n    initial_molecule: SMILES string or molecule object\n    conf_gen_mode: default to "rapid"\n        Options: "rapid", "careful", "meticulous"\n    final_method: default: "aimnet2_wb97md3"\n        Try other options, if user specifies\n    solvent: Optional solvent for implicit solvation (e.g., "water", "ethanol")\n    transition_state: Whether searching for transition state conformers (default: False)\n    name: Workflow name for tracking\n    folder_uuid: Optional folder UUID for organization\n    max_credits: Optional credit limit for the calculation\n    \nReturns:\n    Workflow object representing the submitted workflow\n    \nExample:\n    # Basic conformer search\n    result = submit_conformer_search_workflow(\n        initial_molecule="CCCC",\n        conf_gen_mode="rapid"\n    )\n    \n    # Careful search with solvent\n    result = submit_conformer_search_workflow(\n        initial_molecule="CC(C)CC(=O)O",\n        conf_gen_mode="careful",\n        solvent="water",\n        final_method="r2scan_3c"\n    )\n', 'inputSchema': {'properties': {'initial_molecule': {'title': 'Initial Molecule', 'type': 'string'}, 'conf_gen_mode': {'default': 'rapid', 'title': 'Conf Gen Mode', 'type': 'string'}, 'final_method': {'default': 'aimnet2_wb97md3', 'title': 'Final Method', 'type': 'string'}, 'solvent': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Solvent'}, 'transition_state': {'default': False, 'title': 'Transition State', 'type': 'boolean'}, 'name': {'default': 'Conformer Search Workflow', 'title': 'Name', 'type': 'string'}, 'folder_uuid': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Folder Uuid'}, 'max_credits': {'anyOf': [{'type': 'integer'}, {'type': 'null'}], 'default': None, 'title': 'Max Credits'}}, 'required': ['initial_molecule'], 'type': 'object'}}, {'name': 'submit_solubility_workflow', 'description': 'Submit a solubility prediction workflow using Rowan v2 API.\n\nPredicts solubility (log S) of a molecule in multiple solvents at various temperatures\nusing machine learning models.\n\nArgs:\n    initial_smiles: SMILES string of the molecule\n    solvents: List of solvents as SMILES or common names (e.g., ["water", "ethanol"])\n        If None, uses default solvents\n    temperatures: List of temperatures in Kelvin\n        If None, uses default temperature range\n    name: Workflow name for tracking\n    folder_uuid: Optional folder UUID for organization\n    max_credits: Optional credit limit for the calculation\n    \nReturns:\n    Workflow object representing the submitted workflow\n    \nExample:\n    # Basic solubility prediction\n    result = submit_solubility_workflow(\n        initial_smiles="CC(=O)Nc1ccc(O)cc1",\n        solvents=["water", "ethanol"],\n        temperatures=[298.15, 310.15]\n    )\n    \n    # With SMILES solvents\n    result = submit_solubility_workflow(\n        initial_smiles="CC(=O)O",\n        solvents=["O", "CCO", "CCCCCC"],\n        temperatures=[273.15, 298.15, 323.15]\n    )\n', 'inputSchema': {'properties': {'initial_smiles': {'title': 'Initial Smiles', 'type': 'string'}, 'solvents': {'anyOf': [{'items': {'type': 'string'}, 'type': 'array'}, {'type': 'null'}], 'default': None, 'title': 'Solvents'}, 'temperatures': {'anyOf': [{'items': {'type': 'number'}, 'type': 'array'}, {'type': 'null'}], 'default': None, 'title': 'Temperatures'}, 'name': {'default': 'Solubility Workflow', 'title': 'Name', 'type': 'string'}, 'folder_uuid': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Folder Uuid'}, 'max_credits': {'anyOf': [{'type': 'integer'}, {'type': 'null'}], 'default': None, 'title': 'Max Credits'}}, 'required': ['initial_smiles'], 'type': 'object'}}, {'name': 'submit_pka_workflow', 'description': 'Submit a pKa prediction workflow using Rowan v2 API.\n\nPredicts acid dissociation constants (pKa) for ionizable groups in a molecule\nusing quantum chemistry calculations.\n\nArgs:\n    initial_molecule: SMILES string or molecule object\n    pka_range: Tuple of (min, max) pKa values to search (default: (2, 12))\n    deprotonate_elements: List of elements to consider for deprotonation\n        (e.g., ["N", "O", "S"]). If None, uses defaults\n    protonate_elements: List of elements to consider for protonation\n        (e.g., ["N", "O"]). If None, uses defaults\n    mode: Calculation mode (default: "careful")\n        Options: "rapid", "careful", "meticulous"\n    name: Workflow name for tracking\n    folder_uuid: Optional folder UUID for organization\n    max_credits: Optional credit limit for the calculation\n    \nReturns:\n    Workflow object representing the submitted workflow\n    \nExample:\n    # Basic pKa prediction\n    result = submit_pka_workflow(\n        initial_molecule="CC(=O)O",\n        pka_range=(2, 8)\n    )\n    \n    # Specific elements with meticulous mode\n    result = submit_pka_workflow(\n        initial_molecule="NC(C)C(=O)O",\n        pka_range=(1, 14),\n        deprotonate_elements=["N", "O"],\n        mode="meticulous"\n    )\n', 'inputSchema': {'properties': {'initial_molecule': {'title': 'Initial Molecule', 'type': 'string'}, 'pka_range': {'default': [2, 12], 'maxItems': 2, 'minItems': 2, 'prefixItems': [{'type': 'number'}, {'type': 'number'}], 'title': 'Pka Range', 'type': 'array'}, 'deprotonate_elements': {'anyOf': [{'items': {'type': 'string'}, 'type': 'array'}, {'type': 'null'}], 'default': None, 'title': 'Deprotonate Elements'}, 'protonate_elements': {'anyOf': [{'items': {'type': 'string'}, 'type': 'array'}, {'type': 'null'}], 'default': None, 'title': 'Protonate Elements'}, 'mode': {'default': 'careful', 'title': 'Mode', 'type': 'string'}, 'name': {'default': 'pKa Workflow', 'title': 'Name', 'type': 'string'}, 'folder_uuid': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Folder Uuid'}, 'max_credits': {'anyOf': [{'type': 'integer'}, {'type': 'null'}], 'default': None, 'title': 'Max Credits'}}, 'required': ['initial_molecule'], 'type': 'object'}}, {'name': 'submit_redox_potential_workflow', 'description': 'Submit a redox potential calculation workflow using Rowan v2 API.\n\nCalculates reduction and/or oxidation potentials for a molecule using\nquantum chemistry methods.\n\nArgs:\n    initial_molecule: SMILES string or molecule object\n    reduction: Whether to calculate reduction potential (default: False)\n    oxidization: Whether to calculate oxidation potential (default: True)\n    mode: Calculation mode (default: "rapid")\n        Options: "rapid", "careful", "meticulous"\n    name: Workflow name for tracking\n    folder_uuid: Optional folder UUID for organization\n    max_credits: Optional credit limit for the calculation\n    \nReturns:\n    Workflow object representing the submitted workflow\n    \nExample:\n    # Basic oxidation potential\n    result = submit_redox_potential_workflow(\n        initial_molecule="CC1=CC=CC=C1",\n        oxidization=True\n    )\n    \n    # Both reduction and oxidation with careful mode\n    result = submit_redox_potential_workflow(\n        initial_molecule="c1ccccc1",\n        reduction=True,\n        oxidization=True,\n        mode="careful"\n    )\n', 'inputSchema': {'properties': {'initial_molecule': {'title': 'Initial Molecule', 'type': 'string'}, 'reduction': {'default': False, 'title': 'Reduction', 'type': 'boolean'}, 'oxidization': {'default': True, 'title': 'Oxidization', 'type': 'boolean'}, 'mode': {'default': 'rapid', 'title': 'Mode', 'type': 'string'}, 'name': {'default': 'Redox Potential Workflow', 'title': 'Name', 'type': 'string'}, 'folder_uuid': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Folder Uuid'}, 'max_credits': {'anyOf': [{'type': 'integer'}, {'type': 'null'}], 'default': None, 'title': 'Max Credits'}}, 'required': ['initial_molecule'], 'type': 'object'}}, {'name': 'submit_fukui_workflow', 'description': 'Submit a Fukui indices calculation workflow using Rowan v2 API.\n\nCalculates Fukui indices to predict molecular reactivity at different sites.\nFukui indices indicate susceptibility to nucleophilic/electrophilic attack.\n\nArgs:\n    initial_molecule: SMILES string or molecule object\n    optimization_method: Method for geometry optimization (default: "gfn2_xtb")\n        Common options: "gfn2_xtb", "r2scan_3c", "aimnet2_wb97md3"\n    fukui_method: Method for Fukui calculation (default: "gfn1_xtb")\n        Common options: "gfn1_xtb", "gfn2_xtb"\n    solvent_settings: Optional solvent configuration dictionary\n        Example: {"solvent": "water", "model": "alpb"}\n    name: Workflow name for tracking\n    folder_uuid: Optional folder UUID for organization\n    max_credits: Optional credit limit for the calculation\n    \nReturns:\n    Workflow object representing the submitted workflow\n    \nExample:\n    # Basic Fukui indices\n    result = submit_fukui_workflow(\n        initial_molecule="CC(=O)O"\n    )\n    \n    # With solvent and advanced methods\n    result = submit_fukui_workflow(\n        initial_molecule="c1ccccc1N",\n        optimization_method="r2scan_3c",\n        fukui_method="gfn2_xtb",\n        solvent_settings={"solvent": "water", "model": "alpb"}\n    )\n', 'inputSchema': {'properties': {'initial_molecule': {'title': 'Initial Molecule', 'type': 'string'}, 'optimization_method': {'default': 'gfn2_xtb', 'title': 'Optimization Method', 'type': 'string'}, 'fukui_method': {'default': 'gfn1_xtb', 'title': 'Fukui Method', 'type': 'string'}, 'solvent_settings': {'anyOf': [{'additionalProperties': True, 'type': 'object'}, {'type': 'null'}], 'default': None, 'title': 'Solvent Settings'}, 'name': {'default': 'Fukui Workflow', 'title': 'Name', 'type': 'string'}, 'folder_uuid': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Folder Uuid'}, 'max_credits': {'anyOf': [{'type': 'integer'}, {'type': 'null'}], 'default': None, 'title': 'Max Credits'}}, 'required': ['initial_molecule'], 'type': 'object'}}, {'name': 'submit_tautomer_search_workflow', 'description': 'Submit a tautomer search workflow using Rowan v2 API.\n\nSearches for different tautomeric forms of a molecule and evaluates their\nrelative stabilities. Tautomers are structural isomers that readily interconvert.\n\nArgs:\n    initial_molecule: SMILES string or molecule object\n    mode: Search mode (default: "careful")\n        Options: "rapid", "careful", "meticulous"\n    name: Workflow name for tracking\n    folder_uuid: Optional folder UUID for organization\n    max_credits: Optional credit limit for the calculation\n    \nReturns:\n    Workflow object representing the submitted workflow\n    \nExample:\n    # Basic tautomer search\n    result = submit_tautomer_search_workflow(\n        initial_molecule="CC(=O)CC(=O)C"\n    )\n    \n    # Meticulous search for complex molecule\n    result = submit_tautomer_search_workflow(\n        initial_molecule="c1ccc2c(c1)ncc(=O)[nH]2",\n        mode="meticulous"\n    )\n', 'inputSchema': {'properties': {'initial_molecule': {'title': 'Initial Molecule', 'type': 'string'}, 'mode': {'default': 'careful', 'title': 'Mode', 'type': 'string'}, 'name': {'default': 'Tautomer Search Workflow', 'title': 'Name', 'type': 'string'}, 'folder_uuid': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Folder Uuid'}, 'max_credits': {'anyOf': [{'type': 'integer'}, {'type': 'null'}], 'default': None, 'title': 'Max Credits'}}, 'required': ['initial_molecule'], 'type': 'object'}}, {'name': 'submit_descriptors_workflow', 'description': 'Submit a molecular descriptors calculation workflow using Rowan v2 API.\n\nCalculates a comprehensive set of molecular descriptors including:\n- Physical properties (MW, logP, TPSA, etc.)\n- Electronic properties (HOMO/LUMO, dipole moment, etc.)\n- Structural features (rotatable bonds, H-bond donors/acceptors, etc.)\n- Topological indices\n\nArgs:\n    initial_molecule: SMILES string or molecule object\n    name: Workflow name for tracking\n    folder_uuid: Optional folder UUID for organization\n    max_credits: Optional credit limit for the calculation\n    \nReturns:\n    Workflow object representing the submitted workflow\n    \nExample:\n    # Basic descriptor calculation\n    result = submit_descriptors_workflow(\n        initial_molecule="CC(=O)Nc1ccc(O)cc1"\n    )\n    \n    # For complex molecule\n    result = submit_descriptors_workflow(\n        initial_molecule="CN1C=NC2=C1C(=O)N(C(=O)N2C)C",\n        name="Caffeine Descriptors"\n    )\n', 'inputSchema': {'properties': {'initial_molecule': {'title': 'Initial Molecule', 'type': 'string'}, 'name': {'default': 'Descriptors Workflow', 'title': 'Name', 'type': 'string'}, 'folder_uuid': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Folder Uuid'}, 'max_credits': {'anyOf': [{'type': 'integer'}, {'type': 'null'}], 'default': None, 'title': 'Max Credits'}}, 'required': ['initial_molecule'], 'type': 'object'}}, {'name': 'submit_scan_workflow', 'description': 'Submit a potential energy surface scan workflow using Rowan v2 API.\n\nPerforms systematic scans along specified molecular coordinates (bonds, angles,\nor dihedrals) to map the potential energy surface.\n\nArgs:\n    initial_molecule: SMILES string or molecule object\n    scan_settings: Dictionary specifying scan parameters\n        Example: {\n            "type": "dihedral",  # or "bond", "angle"\n            "atoms": [0, 1, 2, 3],  # atom indices\n            "start": -180,\n            "stop": 180,\n            "step": 10\n        }\n    calculation_engine: Computational engine (default: "omol25")\n        Options: "omol25", "xtb", "psi4"\n    calculation_method: Method for calculations (default: "uma_m_omol")\n        Options depend on engine\n    wavefront_propagation: Use wavefront optimization (default: True)\n        Speeds up scans by using previous geometries as starting points\n    name: Workflow name for tracking\n    folder_uuid: Optional folder UUID for organization\n    max_credits: Optional credit limit for the calculation\n    \nReturns:\n    Workflow object representing the submitted workflow\n    \nExample:\n    # Dihedral scan\n    result = submit_scan_workflow(\n        initial_molecule="CC(C)CC",\n        scan_settings={\n            "type": "dihedral",\n            "atoms": [0, 1, 2, 3],\n            "start": -180,\n            "stop": 180,\n            "step": 15\n        }\n    )\n    \n    # Bond scan with advanced method\n    result = submit_scan_workflow(\n        initial_molecule="CC",\n        scan_settings={\n            "type": "bond",\n            "atoms": [0, 1],\n            "start": 1.0,\n            "stop": 2.5,\n            "step": 0.1\n        },\n        calculation_method="r2scan_3c"\n    )\n', 'inputSchema': {'properties': {'initial_molecule': {'title': 'Initial Molecule', 'type': 'string'}, 'scan_settings': {'anyOf': [{'additionalProperties': True, 'type': 'object'}, {'type': 'null'}], 'default': None, 'title': 'Scan Settings'}, 'calculation_engine': {'default': 'omol25', 'title': 'Calculation Engine', 'type': 'string'}, 'calculation_method': {'default': 'uma_m_omol', 'title': 'Calculation Method', 'type': 'string'}, 'wavefront_propagation': {'default': True, 'title': 'Wavefront Propagation', 'type': 'boolean'}, 'name': {'default': 'Scan Workflow', 'title': 'Name', 'type': 'string'}, 'folder_uuid': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Folder Uuid'}, 'max_credits': {'anyOf': [{'type': 'integer'}, {'type': 'null'}], 'default': None, 'title': 'Max Credits'}}, 'required': ['initial_molecule'], 'type': 'object'}}, {'name': 'submit_irc_workflow', 'description': 'Submits an Intrinsic Reaction Coordinate (IRC) workflow to the API.\n\nArgs:\n    initial_molecule: The initial molecule to perform the IRC calculation on.\n        Can be a dict, StJamesMolecule, or RdkitMol object\n    method: The computational method to use for the IRC calculation (default: "uma_m_omol")\n        See list of available methods for options\n    engine: The computational engine to use for the calculation (default: "omol25")\n        See list of available engines\n    preopt: Whether to perform a pre-optimization of the molecule (default: True)\n    step_size: The step size to use for the IRC calculation (default: 0.05)\n    max_irc_steps: The maximum number of IRC steps to perform (default: 30)\n    name: The name of the workflow\n    folder_uuid: The UUID of the folder to place the workflow in\n    max_credits: The maximum number of credits to use for the workflow\n    \nReturns:\n    Workflow object representing the submitted IRC workflow\n    \nExample:\n    # Basic IRC calculation\n    result = submit_irc_workflow(\n        initial_molecule={"smiles": "[CH3].[CH3]"},\n        method="gfn2_xtb",\n        max_irc_steps=50\n    )\n    \n    # IRC with specific method and engine\n    result = submit_irc_workflow(\n        initial_molecule={"smiles": "CC(O)=CC"},\n        method="r2scan_3c",\n        engine="psi4",\n        step_size=0.03\n    )\n', 'inputSchema': {'properties': {'initial_molecule': {'anyOf': [{'additionalProperties': True, 'type': 'object'}, {}, {'type': 'null'}], 'default': None, 'title': 'Initial Molecule'}, 'method': {'default': 'uma_m_omol', 'title': 'Method', 'type': 'string'}, 'engine': {'default': 'omol25', 'title': 'Engine', 'type': 'string'}, 'preopt': {'default': True, 'title': 'Preopt', 'type': 'boolean'}, 'step_size': {'default': 0.05, 'title': 'Step Size', 'type': 'number'}, 'max_irc_steps': {'default': 30, 'title': 'Max Irc Steps', 'type': 'integer'}, 'name': {'default': 'IRC Workflow', 'title': 'Name', 'type': 'string'}, 'folder_uuid': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Folder Uuid'}, 'max_credits': {'anyOf': [{'type': 'integer'}, {'type': 'null'}], 'default': None, 'title': 'Max Credits'}}, 'type': 'object'}}, {'name': 'submit_protein_cofolding_workflow', 'description': 'Submits a protein cofolding workflow to the API.\n\nArgs:\n    initial_protein_sequences: The sequences of the proteins to be cofolded\n    initial_smiles_list: A list of SMILES strings for the ligands to be cofolded with\n    ligand_binding_affinity_index: The index of the ligand for which to compute the binding affinity\n    use_msa_server: Whether to use the MSA server for the computation\n    use_potentials: Whether to use potentials for the computation\n    name: The name of the workflow\n    model: The model to use for the computation\n    folder_uuid: The UUID of the folder to store the workflow in\n    max_credits: The maximum number of credits to use for the workflow\n    \nReturns:\n    Workflow object representing the submitted workflow\n    \nExample:\n    # Protein dimer cofolding\n    result = submit_protein_cofolding_workflow(\n        initial_protein_sequences=[\n            "MKTAYIAKQRQISFVKSHFSRQLEERLGLIEVQAPILSRVGDGTQDNLSGAEK",\n            "MKQHKAMIVALIVICITAVVAALVTRKDLCEVHIRTGQTEVAVF"\n        ]\n    )\n    \n    # Protein-ligand complex\n    result = submit_protein_cofolding_workflow(\n        initial_protein_sequences=["MGSSHHHHHHSSGLVPRGSH"],\n        initial_smiles_list=["CC(=O)O", "CCO"],\n        ligand_binding_affinity_index=0,\n        use_msa_server=True\n    )\n', 'inputSchema': {'properties': {'initial_protein_sequences': {'items': {'type': 'string'}, 'title': 'Initial Protein Sequences', 'type': 'array'}, 'initial_smiles_list': {'anyOf': [{'items': {'type': 'string'}, 'type': 'array'}, {'type': 'null'}], 'default': None, 'title': 'Initial Smiles List'}, 'ligand_binding_affinity_index': {'anyOf': [{'type': 'integer'}, {'type': 'null'}], 'default': None, 'title': 'Ligand Binding Affinity Index'}, 'use_msa_server': {'default': True, 'title': 'Use Msa Server', 'type': 'boolean'}, 'use_potentials': {'default': False, 'title': 'Use Potentials', 'type': 'boolean'}, 'name': {'default': 'Cofolding Workflow', 'title': 'Name', 'type': 'string'}, 'model': {'default': 'boltz_2', 'title': 'Model', 'type': 'string'}, 'folder_uuid': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Folder Uuid'}, 'max_credits': {'anyOf': [{'type': 'integer'}, {'type': 'null'}], 'default': None, 'title': 'Max Credits'}}, 'required': ['initial_protein_sequences'], 'type': 'object'}}, {'name': 'submit_docking_workflow', 'description': 'Submits a Docking workflow to the API.\n\nArgs:\n    protein: The protein to dock. Can be fed as a uuid or a Protein object\n    pocket: The pocket to dock into\n    initial_molecule: The initial molecule to be docked.\n        Can be a dict, StJamesMolecule, or RdkitMol object\n    do_csearch: Whether to perform a conformational search on the ligand\n    do_optimization: Whether to perform an optimization on the ligand\n    name: The name of the workflow\n    folder_uuid: The UUID of the folder to place the workflow in\n    max_credits: The maximum number of credits to use for the workflow\n    \nReturns:\n    Workflow object representing the submitted workflow\n    \nExample:\n    # Basic docking with protein UUID\n    result = submit_docking_workflow(\n        protein="protein-uuid-123",\n        pocket=pocket_obj,\n        initial_molecule={"smiles": "CC(=O)Oc1ccccc1C(=O)O"}\n    )\n    \n    # Docking with optimization disabled\n    result = submit_docking_workflow(\n        protein=protein_obj,\n        pocket=pocket_obj,\n        initial_molecule={"smiles": "CCO"},\n        do_csearch=False,\n        do_optimization=False\n    )\n', 'inputSchema': {'properties': {'protein': {'anyOf': [{'type': 'string'}, {}], 'title': 'Protein'}, 'pocket': {'title': 'Pocket'}, 'initial_molecule': {'anyOf': [{'additionalProperties': True, 'type': 'object'}, {}, {'type': 'null'}], 'default': None, 'title': 'Initial Molecule'}, 'do_csearch': {'default': True, 'title': 'Do Csearch', 'type': 'boolean'}, 'do_optimization': {'default': True, 'title': 'Do Optimization', 'type': 'boolean'}, 'name': {'default': 'Docking Workflow', 'title': 'Name', 'type': 'string'}, 'folder_uuid': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Folder Uuid'}, 'max_credits': {'anyOf': [{'type': 'integer'}, {'type': 'null'}], 'default': None, 'title': 'Max Credits'}}, 'required': ['protein', 'pocket'], 'type': 'object'}}, {'name': 'workflow_fetch_latest', 'description': 'Fetch the latest workflow data from the database.\n\nUpdates the workflow object with the most recent status and results.\n\nArgs:\n    workflow_uuid: The UUID of the workflow to fetch\n    in_place: Whether to update the workflow object in place (default: False)\n    \nReturns:\n    Dictionary containing the updated workflow data including status and results\n', 'inputSchema': {'properties': {'workflow_uuid': {'title': 'Workflow Uuid', 'type': 'string'}, 'in_place': {'default': False, 'title': 'In Place', 'type': 'boolean'}}, 'required': ['workflow_uuid'], 'type': 'object'}}, {'name': 'workflow_wait_for_result', 'description': 'Wait for a workflow to complete and return the result.\n\nBlocks until the workflow completes, polling at specified intervals.\n\nArgs:\n    workflow_uuid: The UUID of the workflow to wait for\n    poll_interval: Time in seconds between status checks (default: 5)\n    \nReturns:\n    Dictionary containing the completed workflow data including results\n', 'inputSchema': {'properties': {'workflow_uuid': {'title': 'Workflow Uuid', 'type': 'string'}, 'poll_interval': {'default': 5, 'title': 'Poll Interval', 'type': 'integer'}}, 'required': ['workflow_uuid'], 'type': 'object'}}, {'name': 'workflow_get_status', 'description': 'Get the current status of a workflow.\n\nArgs:\n    workflow_uuid: The UUID of the workflow\n    \nReturns:\n    Dictionary with status information\n', 'inputSchema': {'properties': {'workflow_uuid': {'title': 'Workflow Uuid', 'type': 'string'}}, 'required': ['workflow_uuid'], 'type': 'object'}}, {'name': 'workflow_stop', 'description': 'Stop a running workflow.\n\nArgs:\n    workflow_uuid: The UUID of the workflow to stop\n    \nReturns:\n    Dictionary with confirmation message\n', 'inputSchema': {'properties': {'workflow_uuid': {'title': 'Workflow Uuid', 'type': 'string'}}, 'required': ['workflow_uuid'], 'type': 'object'}}, {'name': 'workflow_delete', 'description': 'Delete a workflow.\n\nThis permanently removes the workflow and its results from the database.\n\nArgs:\n    workflow_uuid: The UUID of the workflow to delete\n    \nReturns:\n    Dictionary with confirmation message\n', 'inputSchema': {'properties': {'workflow_uuid': {'title': 'Workflow Uuid', 'type': 'string'}}, 'required': ['workflow_uuid'], 'type': 'object'}}, {'name': 'retrieve_workflow', 'description': 'Retrieve a workflow from the API.\n\nArgs:\n    uuid: The UUID of the workflow to retrieve\n    \nReturns:\n    Dictionary containing the complete workflow data\n    \nRaises:\n    HTTPError: If the API request fails\n', 'inputSchema': {'properties': {'uuid': {'title': 'Uuid', 'type': 'string'}}, 'required': ['uuid'], 'type': 'object'}}, {'name': 'retrieve_calculation_molecules', 'description': 'Retrieve a list of molecules from a calculation.\n\nArgs:\n    uuid: The UUID of the calculation to retrieve molecules from\n    \nReturns:\n    List of dictionaries representing the molecules in the calculation\n    \nRaises:\n    HTTPError: If the API request fails\n', 'inputSchema': {'properties': {'uuid': {'title': 'Uuid', 'type': 'string'}}, 'required': ['uuid'], 'type': 'object'}}, {'name': 'list_workflows', 'description': 'List workflows subject to the specified criteria.\n\nArgs:\n    parent_uuid: The UUID of the parent folder\n    name_contains: Substring to search for in workflow names\n    public: Filter workflows by their public status\n    starred: Filter workflows by their starred status\n    status: Filter workflows by their status\n    workflow_type: Filter workflows by their type\n    page: The page number to retrieve (default: 0)\n    size: The number of items per page (default: 10)\n    \nReturns:\n    List of workflow dictionaries that match the search criteria\n    \nRaises:\n    HTTPError: If the request to the API fails\n', 'inputSchema': {'properties': {'parent_uuid': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Parent Uuid'}, 'name_contains': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Name Contains'}, 'public': {'anyOf': [{'type': 'boolean'}, {'type': 'null'}], 'default': None, 'title': 'Public'}, 'starred': {'anyOf': [{'type': 'boolean'}, {'type': 'null'}], 'default': None, 'title': 'Starred'}, 'status': {'anyOf': [{'type': 'integer'}, {'type': 'null'}], 'default': None, 'title': 'Status'}, 'workflow_type': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Workflow Type'}, 'page': {'default': 0, 'title': 'Page', 'type': 'integer'}, 'size': {'default': 10, 'title': 'Size', 'type': 'integer'}}, 'type': 'object'}}, {'name': 'workflow_update', 'description': 'Update workflow details.\n\nArgs:\n    workflow_uuid: The UUID of the workflow to update\n    name: New name for the workflow (optional)\n    notes: New notes for the workflow (optional)\n    starred: Whether to star/unstar the workflow (optional)\n    public: Whether to make the workflow public/private (optional)\n    \nReturns:\n    Dictionary with updated workflow information\n', 'inputSchema': {'properties': {'workflow_uuid': {'title': 'Workflow Uuid', 'type': 'string'}, 'name': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Name'}, 'notes': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Notes'}, 'starred': {'anyOf': [{'type': 'boolean'}, {'type': 'null'}], 'default': None, 'title': 'Starred'}, 'public': {'anyOf': [{'type': 'boolean'}, {'type': 'null'}], 'default': None, 'title': 'Public'}}, 'required': ['workflow_uuid'], 'type': 'object'}}, {'name': 'workflow_is_finished', 'description': 'Check if a workflow is finished.\n\nArgs:\n    workflow_uuid: The UUID of the workflow to check\n    \nReturns:\n    Dictionary with workflow completion status\n', 'inputSchema': {'properties': {'workflow_uuid': {'title': 'Workflow Uuid', 'type': 'string'}}, 'required': ['workflow_uuid'], 'type': 'object'}}, {'name': 'workflow_delete_data', 'description': 'Delete workflow data while keeping the workflow record.\n\nArgs:\n    workflow_uuid: The UUID of the workflow\n    \nReturns:\n    Dictionary with confirmation message\n', 'inputSchema': {'properties': {'workflow_uuid': {'title': 'Workflow Uuid', 'type': 'string'}}, 'required': ['workflow_uuid'], 'type': 'object'}}]})), metadata=None)
2025-08-02 14:02:08,344 - mcp.server.lowlevel.server - INFO - Processing request of type ListToolsRequest
2025-08-02 14:02:08,344 - mcp.server.lowlevel.server - DEBUG - Dispatching request of type ListToolsRequest
2025-08-02 14:02:08,345 - sse_starlette.sse - DEBUG - chunk: b'event: message\r\ndata: {"jsonrpc":"2.0","id":2,"result":{"tools":[{"name":"submit_basic_calculation_workflow","description":"Submit a basic calculation workflow using Rowan v2 API.\\n\\nPerforms fundamental quantum chemistry calculations with configurable methods\\nand computational tasks. Returns a workflow object for tracking progress.\\n","inputSchema":{"properties":{"initial_molecule":{"anyOf":[{"type":"string"},{"additionalProperties":true,"type":"object"},{}],"description":"The molecule to perform the calculation on. Can be a SMILES string, dict, StJamesMolecule, or RdkitMol object","title":"Initial Molecule"},"method":{"default":"uma_m_omol","description":"The method to use for the calculation (e.g., \'uma_m_omol\', \'gfn2-xtb\', \'r2scan_3c\')","title":"Method","type":"string"},"tasks":{"anyOf":[{"items":{"type":"string"},"type":"array"},{"type":"null"}],"default":null,"description":"List of computational tasks to perform. Optional[List[str]] (e.g. [\'optimize\']), Defaults to None","title":"Tasks"},"mode":{"default":"auto","description":"The mode to run the calculation in (\'auto\', \'rapid\', \'careful\', \'meticulous\')","title":"Mode","type":"string"},"engine":{"default":"omol25","description":"The computational engine to use (\'omol25\', \'xtb\', \'psi4\')","title":"Engine","type":"string"},"name":{"default":"Basic Calculation Workflow","description":"The name of the workflow for identification","title":"Name","type":"string"},"folder_uuid":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"description":"UUID of the folder to place the workflow in (optional)","title":"Folder Uuid"},"max_credits":{"anyOf":[{"type":"integer"},{"type":"null"}],"default":null,"description":"Maximum number of credits to use for the workflow (optional)","title":"Max Credits"}},"required":["initial_molecule"],"type":"object"}},{"name":"submit_conformer_search_workflow","description":"Submit a conformer search workflow using Rowan v2 API.\\n\\nExplores the conformational space of a molecule to find low-energy structures.\\n\\nArgs:\\n    initial_molecule: SMILES string or molecule object\\n    conf_gen_mode: default to \\"rapid\\"\\n        Options: \\"rapid\\", \\"careful\\", \\"meticulous\\"\\n    final_method: default: \\"aimnet2_wb97md3\\"\\n        Try other options, if user specifies\\n    solvent: Optional solvent for implicit solvation (e.g., \\"water\\", \\"ethanol\\")\\n    transition_state: Whether searching for transition state conformers (default: False)\\n    name: Workflow name for tracking\\n    folder_uuid: Optional folder UUID for organization\\n    max_credits: Optional credit limit for the calculation\\n    \\nReturns:\\n    Workflow object representing the submitted workflow\\n    \\nExample:\\n    # Basic conformer search\\n    result = submit_conformer_search_workflow(\\n        initial_molecule=\\"CCCC\\",\\n        conf_gen_mode=\\"rapid\\"\\n    )\\n    \\n    # Careful search with solvent\\n    result = submit_conformer_search_workflow(\\n        initial_molecule=\\"CC(C)CC(=O)O\\",\\n        conf_gen_mode=\\"careful\\",\\n        solvent=\\"water\\",\\n        final_method=\\"r2scan_3c\\"\\n    )\\n","inputSchema":{"properties":{"initial_molecule":{"title":"Initial Molecule","type":"string"},"conf_gen_mode":{"default":"rapid","title":"Conf Gen Mode","type":"string"},"final_method":{"default":"aimnet2_wb97md3","title":"Final Method","type":"string"},"solvent":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"title":"Solvent"},"transition_state":{"default":false,"title":"Transition State","type":"boolean"},"name":{"default":"Conformer Search Workflow","title":"Name","type":"string"},"folder_uuid":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"title":"Folder Uuid"},"max_credits":{"anyOf":[{"type":"integer"},{"type":"null"}],"default":null,"title":"Max Credits"}},"required":["initial_molecule"],"type":"object"}},{"name":"submit_solubility_workflow","description":"Submit a solubility prediction workflow using Rowan v2 API.\\n\\nPredicts solubility (log S) of a molecule in multiple solvents at various temperatures\\nusing machine learning models.\\n\\nArgs:\\n    initial_smiles: SMILES string of the molecule\\n    solvents: List of solvents as SMILES or common names (e.g., [\\"water\\", \\"ethanol\\"])\\n        If None, uses default solvents\\n    temperatures: List of temperatures in Kelvin\\n        If None, uses default temperature range\\n    name: Workflow name for tracking\\n    folder_uuid: Optional folder UUID for organization\\n    max_credits: Optional credit limit for the calculation\\n    \\nReturns:\\n    Workflow object representing the submitted workflow\\n    \\nExample:\\n    # Basic solubility prediction\\n    result = submit_solubility_workflow(\\n        initial_smiles=\\"CC(=O)Nc1ccc(O)cc1\\",\\n        solvents=[\\"water\\", \\"ethanol\\"],\\n        temperatures=[298.15, 310.15]\\n    )\\n    \\n    # With SMILES solvents\\n    result = submit_solubility_workflow(\\n        initial_smiles=\\"CC(=O)O\\",\\n        solvents=[\\"O\\", \\"CCO\\", \\"CCCCCC\\"],\\n        temperatures=[273.15, 298.15, 323.15]\\n    )\\n","inputSchema":{"properties":{"initial_smiles":{"title":"Initial Smiles","type":"string"},"solvents":{"anyOf":[{"items":{"type":"string"},"type":"array"},{"type":"null"}],"default":null,"title":"Solvents"},"temperatures":{"anyOf":[{"items":{"type":"number"},"type":"array"},{"type":"null"}],"default":null,"title":"Temperatures"},"name":{"default":"Solubility Workflow","title":"Name","type":"string"},"folder_uuid":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"title":"Folder Uuid"},"max_credits":{"anyOf":[{"type":"integer"},{"type":"null"}],"default":null,"title":"Max Credits"}},"required":["initial_smiles"],"type":"object"}},{"name":"submit_pka_workflow","description":"Submit a pKa prediction workflow using Rowan v2 API.\\n\\nPredicts acid dissociation constants (pKa) for ionizable groups in a molecule\\nusing quantum chemistry calculations.\\n\\nArgs:\\n    initial_molecule: SMILES string or molecule object\\n    pka_range: Tuple of (min, max) pKa values to search (default: (2, 12))\\n    deprotonate_elements: List of elements to consider for deprotonation\\n        (e.g., [\\"N\\", \\"O\\", \\"S\\"]). If None, uses defaults\\n    protonate_elements: List of elements to consider for protonation\\n        (e.g., [\\"N\\", \\"O\\"]). If None, uses defaults\\n    mode: Calculation mode (default: \\"careful\\")\\n        Options: \\"rapid\\", \\"careful\\", \\"meticulous\\"\\n    name: Workflow name for tracking\\n    folder_uuid: Optional folder UUID for organization\\n    max_credits: Optional credit limit for the calculation\\n    \\nReturns:\\n    Workflow object representing the submitted workflow\\n    \\nExample:\\n    # Basic pKa prediction\\n    result = submit_pka_workflow(\\n        initial_molecule=\\"CC(=O)O\\",\\n        pka_range=(2, 8)\\n    )\\n    \\n    # Specific elements with meticulous mode\\n    result = submit_pka_workflow(\\n        initial_molecule=\\"NC(C)C(=O)O\\",\\n        pka_range=(1, 14),\\n        deprotonate_elements=[\\"N\\", \\"O\\"],\\n        mode=\\"meticulous\\"\\n    )\\n","inputSchema":{"properties":{"initial_molecule":{"title":"Initial Molecule","type":"string"},"pka_range":{"default":[2,12],"maxItems":2,"minItems":2,"prefixItems":[{"type":"number"},{"type":"number"}],"title":"Pka Range","type":"array"},"deprotonate_elements":{"anyOf":[{"items":{"type":"string"},"type":"array"},{"type":"null"}],"default":null,"title":"Deprotonate Elements"},"protonate_elements":{"anyOf":[{"items":{"type":"string"},"type":"array"},{"type":"null"}],"default":null,"title":"Protonate Elements"},"mode":{"default":"careful","title":"Mode","type":"string"},"name":{"default":"pKa Workflow","title":"Name","type":"string"},"folder_uuid":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"title":"Folder Uuid"},"max_credits":{"anyOf":[{"type":"integer"},{"type":"null"}],"default":null,"title":"Max Credits"}},"required":["initial_molecule"],"type":"object"}},{"name":"submit_redox_potential_workflow","description":"Submit a redox potential calculation workflow using Rowan v2 API.\\n\\nCalculates reduction and/or oxidation potentials for a molecule using\\nquantum chemistry methods.\\n\\nArgs:\\n    initial_molecule: SMILES string or molecule object\\n    reduction: Whether to calculate reduction potential (default: False)\\n    oxidization: Whether to calculate oxidation potential (default: True)\\n    mode: Calculation mode (default: \\"rapid\\")\\n        Options: \\"rapid\\", \\"careful\\", \\"meticulous\\"\\n    name: Workflow name for tracking\\n    folder_uuid: Optional folder UUID for organization\\n    max_credits: Optional credit limit for the calculation\\n    \\nReturns:\\n    Workflow object representing the submitted workflow\\n    \\nExample:\\n    # Basic oxidation potential\\n    result = submit_redox_potential_workflow(\\n        initial_molecule=\\"CC1=CC=CC=C1\\",\\n        oxidization=True\\n    )\\n    \\n    # Both reduction and oxidation with careful mode\\n    result = submit_redox_potential_workflow(\\n        initial_molecule=\\"c1ccccc1\\",\\n        reduction=True,\\n        oxidization=True,\\n        mode=\\"careful\\"\\n    )\\n","inputSchema":{"properties":{"initial_molecule":{"title":"Initial Molecule","type":"string"},"reduction":{"default":false,"title":"Reduction","type":"boolean"},"oxidization":{"default":true,"title":"Oxidization","type":"boolean"},"mode":{"default":"rapid","title":"Mode","type":"string"},"name":{"default":"Redox Potential Workflow","title":"Name","type":"string"},"folder_uuid":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"title":"Folder Uuid"},"max_credits":{"anyOf":[{"type":"integer"},{"type":"null"}],"default":null,"title":"Max Credits"}},"required":["initial_molecule"],"type":"object"}},{"name":"submit_fukui_workflow","description":"Submit a Fukui indices calculation workflow using Rowan v2 API.\\n\\nCalculates Fukui indices to predict molecular reactivity at different sites.\\nFukui indices indicate susceptibility to nucleophilic/electrophilic attack.\\n\\nArgs:\\n    initial_molecule: SMILES string or molecule object\\n    optimization_method: Method for geometry optimization (default: \\"gfn2_xtb\\")\\n        Common options: \\"gfn2_xtb\\", \\"r2scan_3c\\", \\"aimnet2_wb97md3\\"\\n    fukui_method: Method for Fukui calculation (default: \\"gfn1_xtb\\")\\n        Common options: \\"gfn1_xtb\\", \\"gfn2_xtb\\"\\n    solvent_settings: Optional solvent configuration dictionary\\n        Example: {\\"solvent\\": \\"water\\", \\"model\\": \\"alpb\\"}\\n    name: Workflow name for tracking\\n    folder_uuid: Optional folder UUID for organization\\n    max_credits: Optional credit limit for the calculation\\n    \\nReturns:\\n    Workflow object representing the submitted workflow\\n    \\nExample:\\n    # Basic Fukui indices\\n    result = submit_fukui_workflow(\\n        initial_molecule=\\"CC(=O)O\\"\\n    )\\n    \\n    # With solvent and advanced methods\\n    result = submit_fukui_workflow(\\n        initial_molecule=\\"c1ccccc1N\\",\\n        optimization_method=\\"r2scan_3c\\",\\n        fukui_method=\\"gfn2_xtb\\",\\n        solvent_settings={\\"solvent\\": \\"water\\", \\"model\\": \\"alpb\\"}\\n    )\\n","inputSchema":{"properties":{"initial_molecule":{"title":"Initial Molecule","type":"string"},"optimization_method":{"default":"gfn2_xtb","title":"Optimization Method","type":"string"},"fukui_method":{"default":"gfn1_xtb","title":"Fukui Method","type":"string"},"solvent_settings":{"anyOf":[{"additionalProperties":true,"type":"object"},{"type":"null"}],"default":null,"title":"Solvent Settings"},"name":{"default":"Fukui Workflow","title":"Name","type":"string"},"folder_uuid":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"title":"Folder Uuid"},"max_credits":{"anyOf":[{"type":"integer"},{"type":"null"}],"default":null,"title":"Max Credits"}},"required":["initial_molecule"],"type":"object"}},{"name":"submit_tautomer_search_workflow","description":"Submit a tautomer search workflow using Rowan v2 API.\\n\\nSearches for different tautomeric forms of a molecule and evaluates their\\nrelative stabilities. Tautomers are structural isomers that readily interconvert.\\n\\nArgs:\\n    initial_molecule: SMILES string or molecule object\\n    mode: Search mode (default: \\"careful\\")\\n        Options: \\"rapid\\", \\"careful\\", \\"meticulous\\"\\n    name: Workflow name for tracking\\n    folder_uuid: Optional folder UUID for organization\\n    max_credits: Optional credit limit for the calculation\\n    \\nReturns:\\n    Workflow object representing the submitted workflow\\n    \\nExample:\\n    # Basic tautomer search\\n    result = submit_tautomer_search_workflow(\\n        initial_molecule=\\"CC(=O)CC(=O)C\\"\\n    )\\n    \\n    # Meticulous search for complex molecule\\n    result = submit_tautomer_search_workflow(\\n        initial_molecule=\\"c1ccc2c(c1)ncc(=O)[nH]2\\",\\n        mode=\\"meticulous\\"\\n    )\\n","inputSchema":{"properties":{"initial_molecule":{"title":"Initial Molecule","type":"string"},"mode":{"default":"careful","title":"Mode","type":"string"},"name":{"default":"Tautomer Search Workflow","title":"Name","type":"string"},"folder_uuid":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"title":"Folder Uuid"},"max_credits":{"anyOf":[{"type":"integer"},{"type":"null"}],"default":null,"title":"Max Credits"}},"required":["initial_molecule"],"type":"object"}},{"name":"submit_descriptors_workflow","description":"Submit a molecular descriptors calculation workflow using Rowan v2 API.\\n\\nCalculates a comprehensive set of molecular descriptors including:\\n- Physical properties (MW, logP, TPSA, etc.)\\n- Electronic properties (HOMO/LUMO, dipole moment, etc.)\\n- Structural features (rotatable bonds, H-bond donors/acceptors, etc.)\\n- Topological indices\\n\\nArgs:\\n    initial_molecule: SMILES string or molecule object\\n    name: Workflow name for tracking\\n    folder_uuid: Optional folder UUID for organization\\n    max_credits: Optional credit limit for the calculation\\n    \\nReturns:\\n    Workflow object representing the submitted workflow\\n    \\nExample:\\n    # Basic descriptor calculation\\n    result = submit_descriptors_workflow(\\n        initial_molecule=\\"CC(=O)Nc1ccc(O)cc1\\"\\n    )\\n    \\n    # For complex molecule\\n    result = submit_descriptors_workflow(\\n        initial_molecule=\\"CN1C=NC2=C1C(=O)N(C(=O)N2C)C\\",\\n        name=\\"Caffeine Descriptors\\"\\n    )\\n","inputSchema":{"properties":{"initial_molecule":{"title":"Initial Molecule","type":"string"},"name":{"default":"Descriptors Workflow","title":"Name","type":"string"},"folder_uuid":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"title":"Folder Uuid"},"max_credits":{"anyOf":[{"type":"integer"},{"type":"null"}],"default":null,"title":"Max Credits"}},"required":["initial_molecule"],"type":"object"}},{"name":"submit_scan_workflow","description":"Submit a potential energy surface scan workflow using Rowan v2 API.\\n\\nPerforms systematic scans along specified molecular coordinates (bonds, angles,\\nor dihedrals) to map the potential energy surface.\\n\\nArgs:\\n    initial_molecule: SMILES string or molecule object\\n    scan_settings: Dictionary specifying scan parameters\\n        Example: {\\n            \\"type\\": \\"dihedral\\",  # or \\"bond\\", \\"angle\\"\\n            \\"atoms\\": [0, 1, 2, 3],  # atom indices\\n            \\"start\\": -180,\\n            \\"stop\\": 180,\\n            \\"step\\": 10\\n        }\\n    calculation_engine: Computational engine (default: \\"omol25\\")\\n        Options: \\"omol25\\", \\"xtb\\", \\"psi4\\"\\n    calculation_method: Method for calculations (default: \\"uma_m_omol\\")\\n        Options depend on engine\\n    wavefront_propagation: Use wavefront optimization (default: True)\\n        Speeds up scans by using previous geometries as starting points\\n    name: Workflow name for tracking\\n    folder_uuid: Optional folder UUID for organization\\n    max_credits: Optional credit limit for the calculation\\n    \\nReturns:\\n    Workflow object representing the submitted workflow\\n    \\nExample:\\n    # Dihedral scan\\n    result = submit_scan_workflow(\\n        initial_molecule=\\"CC(C)CC\\",\\n        scan_settings={\\n            \\"type\\": \\"dihedral\\",\\n            \\"atoms\\": [0, 1, 2, 3],\\n            \\"start\\": -180,\\n            \\"stop\\": 180,\\n            \\"step\\": 15\\n        }\\n    )\\n    \\n    # Bond scan with advanced method\\n    result = submit_scan_workflow(\\n        initial_molecule=\\"CC\\",\\n        scan_settings={\\n            \\"type\\": \\"bond\\",\\n            \\"atoms\\": [0, 1],\\n            \\"start\\": 1.0,\\n            \\"stop\\": 2.5,\\n            \\"step\\": 0.1\\n        },\\n        calculation_method=\\"r2scan_3c\\"\\n    )\\n","inputSchema":{"properties":{"initial_molecule":{"title":"Initial Molecule","type":"string"},"scan_settings":{"anyOf":[{"additionalProperties":true,"type":"object"},{"type":"null"}],"default":null,"title":"Scan Settings"},"calculation_engine":{"default":"omol25","title":"Calculation Engine","type":"string"},"calculation_method":{"default":"uma_m_omol","title":"Calculation Method","type":"string"},"wavefront_propagation":{"default":true,"title":"Wavefront Propagation","type":"boolean"},"name":{"default":"Scan Workflow","title":"Name","type":"string"},"folder_uuid":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"title":"Folder Uuid"},"max_credits":{"anyOf":[{"type":"integer"},{"type":"null"}],"default":null,"title":"Max Credits"}},"required":["initial_molecule"],"type":"object"}},{"name":"submit_irc_workflow","description":"Submits an Intrinsic Reaction Coordinate (IRC) workflow to the API.\\n\\nArgs:\\n    initial_molecule: The initial molecule to perform the IRC calculation on.\\n        Can be a dict, StJamesMolecule, or RdkitMol object\\n    method: The computational method to use for the IRC calculation (default: \\"uma_m_omol\\")\\n        See list of available methods for options\\n    engine: The computational engine to use for the calculation (default: \\"omol25\\")\\n        See list of available engines\\n    preopt: Whether to perform a pre-optimization of the molecule (default: True)\\n    step_size: The step size to use for the IRC calculation (default: 0.05)\\n    max_irc_steps: The maximum number of IRC steps to perform (default: 30)\\n    name: The name of the workflow\\n    folder_uuid: The UUID of the folder to place the workflow in\\n    max_credits: The maximum number of credits to use for the workflow\\n    \\nReturns:\\n    Workflow object representing the submitted IRC workflow\\n    \\nExample:\\n    # Basic IRC calculation\\n    result = submit_irc_workflow(\\n        initial_molecule={\\"smiles\\": \\"[CH3].[CH3]\\"},\\n        method=\\"gfn2_xtb\\",\\n        max_irc_steps=50\\n    )\\n    \\n    # IRC with specific method and engine\\n    result = submit_irc_workflow(\\n        initial_molecule={\\"smiles\\": \\"CC(O)=CC\\"},\\n        method=\\"r2scan_3c\\",\\n        engine=\\"psi4\\",\\n        step_size=0.03\\n    )\\n","inputSchema":{"properties":{"initial_molecule":{"anyOf":[{"additionalProperties":true,"type":"object"},{},{"type":"null"}],"default":null,"title":"Initial Molecule"},"method":{"default":"uma_m_omol","title":"Method","type":"string"},"engine":{"default":"omol25","title":"Engine","type":"string"},"preopt":{"default":true,"title":"Preopt","type":"boolean"},"step_size":{"default":0.05,"title":"Step Size","type":"number"},"max_irc_steps":{"default":30,"title":"Max Irc Steps","type":"integer"},"name":{"default":"IRC Workflow","title":"Name","type":"string"},"folder_uuid":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"title":"Folder Uuid"},"max_credits":{"anyOf":[{"type":"integer"},{"type":"null"}],"default":null,"title":"Max Credits"}},"type":"object"}},{"name":"submit_protein_cofolding_workflow","description":"Submits a protein cofolding workflow to the API.\\n\\nArgs:\\n    initial_protein_sequences: The sequences of the proteins to be cofolded\\n    initial_smiles_list: A list of SMILES strings for the ligands to be cofolded with\\n    ligand_binding_affinity_index: The index of the ligand for which to compute the binding affinity\\n    use_msa_server: Whether to use the MSA server for the computation\\n    use_potentials: Whether to use potentials for the computation\\n    name: The name of the workflow\\n    model: The model to use for the computation\\n    folder_uuid: The UUID of the folder to store the workflow in\\n    max_credits: The maximum number of credits to use for the workflow\\n    \\nReturns:\\n    Workflow object representing the submitted workflow\\n    \\nExample:\\n    # Protein dimer cofolding\\n    result = submit_protein_cofolding_workflow(\\n        initial_protein_sequences=[\\n            \\"MKTAYIAKQRQISFVKSHFSRQLEERLGLIEVQAPILSRVGDGTQDNLSGAEK\\",\\n            \\"MKQHKAMIVALIVICITAVVAALVTRKDLCEVHIRTGQTEVAVF\\"\\n        ]\\n    )\\n    \\n    # Protein-ligand complex\\n    result = submit_protein_cofolding_workflow(\\n        initial_protein_sequences=[\\"MGSSHHHHHHSSGLVPRGSH\\"],\\n        initial_smiles_list=[\\"CC(=O)O\\", \\"CCO\\"],\\n        ligand_binding_affinity_index=0,\\n        use_msa_server=True\\n    )\\n","inputSchema":{"properties":{"initial_protein_sequences":{"items":{"type":"string"},"title":"Initial Protein Sequences","type":"array"},"initial_smiles_list":{"anyOf":[{"items":{"type":"string"},"type":"array"},{"type":"null"}],"default":null,"title":"Initial Smiles List"},"ligand_binding_affinity_index":{"anyOf":[{"type":"integer"},{"type":"null"}],"default":null,"title":"Ligand Binding Affinity Index"},"use_msa_server":{"default":true,"title":"Use Msa Server","type":"boolean"},"use_potentials":{"default":false,"title":"Use Potentials","type":"boolean"},"name":{"default":"Cofolding Workflow","title":"Name","type":"string"},"model":{"default":"boltz_2","title":"Model","type":"string"},"folder_uuid":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"title":"Folder Uuid"},"max_credits":{"anyOf":[{"type":"integer"},{"type":"null"}],"default":null,"title":"Max Credits"}},"required":["initial_protein_sequences"],"type":"object"}},{"name":"submit_docking_workflow","description":"Submits a Docking workflow to the API.\\n\\nArgs:\\n    protein: The protein to dock. Can be fed as a uuid or a Protein object\\n    pocket: The pocket to dock into\\n    initial_molecule: The initial molecule to be docked.\\n        Can be a dict, StJamesMolecule, or RdkitMol object\\n    do_csearch: Whether to perform a conformational search on the ligand\\n    do_optimization: Whether to perform an optimization on the ligand\\n    name: The name of the workflow\\n    folder_uuid: The UUID of the folder to place the workflow in\\n    max_credits: The maximum number of credits to use for the workflow\\n    \\nReturns:\\n    Workflow object representing the submitted workflow\\n    \\nExample:\\n    # Basic docking with protein UUID\\n    result = submit_docking_workflow(\\n        protein=\\"protein-uuid-123\\",\\n        pocket=pocket_obj,\\n        initial_molecule={\\"smiles\\": \\"CC(=O)Oc1ccccc1C(=O)O\\"}\\n    )\\n    \\n    # Docking with optimization disabled\\n    result = submit_docking_workflow(\\n        protein=protein_obj,\\n        pocket=pocket_obj,\\n        initial_molecule={\\"smiles\\": \\"CCO\\"},\\n        do_csearch=False,\\n        do_optimization=False\\n    )\\n","inputSchema":{"properties":{"protein":{"anyOf":[{"type":"string"},{}],"title":"Protein"},"pocket":{"title":"Pocket"},"initial_molecule":{"anyOf":[{"additionalProperties":true,"type":"object"},{},{"type":"null"}],"default":null,"title":"Initial Molecule"},"do_csearch":{"default":true,"title":"Do Csearch","type":"boolean"},"do_optimization":{"default":true,"title":"Do Optimization","type":"boolean"},"name":{"default":"Docking Workflow","title":"Name","type":"string"},"folder_uuid":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"title":"Folder Uuid"},"max_credits":{"anyOf":[{"type":"integer"},{"type":"null"}],"default":null,"title":"Max Credits"}},"required":["protein","pocket"],"type":"object"}},{"name":"workflow_fetch_latest","description":"Fetch the latest workflow data from the database.\\n\\nUpdates the workflow object with the most recent status and results.\\n\\nArgs:\\n    workflow_uuid: The UUID of the workflow to fetch\\n    in_place: Whether to update the workflow object in place (default: False)\\n    \\nReturns:\\n    Dictionary containing the updated workflow data including status and results\\n","inputSchema":{"properties":{"workflow_uuid":{"title":"Workflow Uuid","type":"string"},"in_place":{"default":false,"title":"In Place","type":"boolean"}},"required":["workflow_uuid"],"type":"object"}},{"name":"workflow_wait_for_result","description":"Wait for a workflow to complete and return the result.\\n\\nBlocks until the workflow completes, polling at specified intervals.\\n\\nArgs:\\n    workflow_uuid: The UUID of the workflow to wait for\\n    poll_interval: Time in seconds between status checks (default: 5)\\n    \\nReturns:\\n    Dictionary containing the completed workflow data including results\\n","inputSchema":{"properties":{"workflow_uuid":{"title":"Workflow Uuid","type":"string"},"poll_interval":{"default":5,"title":"Poll Interval","type":"integer"}},"required":["workflow_uuid"],"type":"object"}},{"name":"workflow_get_status","description":"Get the current status of a workflow.\\n\\nArgs:\\n    workflow_uuid: The UUID of the workflow\\n    \\nReturns:\\n    Dictionary with status information\\n","inputSchema":{"properties":{"workflow_uuid":{"title":"Workflow Uuid","type":"string"}},"required":["workflow_uuid"],"type":"object"}},{"name":"workflow_stop","description":"Stop a running workflow.\\n\\nArgs:\\n    workflow_uuid: The UUID of the workflow to stop\\n    \\nReturns:\\n    Dictionary with confirmation message\\n","inputSchema":{"properties":{"workflow_uuid":{"title":"Workflow Uuid","type":"string"}},"required":["workflow_uuid"],"type":"object"}},{"name":"workflow_delete","description":"Delete a workflow.\\n\\nThis permanently removes the workflow and its results from the database.\\n\\nArgs:\\n    workflow_uuid: The UUID of the workflow to delete\\n    \\nReturns:\\n    Dictionary with confirmation message\\n","inputSchema":{"properties":{"workflow_uuid":{"title":"Workflow Uuid","type":"string"}},"required":["workflow_uuid"],"type":"object"}},{"name":"retrieve_workflow","description":"Retrieve a workflow from the API.\\n\\nArgs:\\n    uuid: The UUID of the workflow to retrieve\\n    \\nReturns:\\n    Dictionary containing the complete workflow data\\n    \\nRaises:\\n    HTTPError: If the API request fails\\n","inputSchema":{"properties":{"uuid":{"title":"Uuid","type":"string"}},"required":["uuid"],"type":"object"}},{"name":"retrieve_calculation_molecules","description":"Retrieve a list of molecules from a calculation.\\n\\nArgs:\\n    uuid: The UUID of the calculation to retrieve molecules from\\n    \\nReturns:\\n    List of dictionaries representing the molecules in the calculation\\n    \\nRaises:\\n    HTTPError: If the API request fails\\n","inputSchema":{"properties":{"uuid":{"title":"Uuid","type":"string"}},"required":["uuid"],"type":"object"}},{"name":"list_workflows","description":"List workflows subject to the specified criteria.\\n\\nArgs:\\n    parent_uuid: The UUID of the parent folder\\n    name_contains: Substring to search for in workflow names\\n    public: Filter workflows by their public status\\n    starred: Filter workflows by their starred status\\n    status: Filter workflows by their status\\n    workflow_type: Filter workflows by their type\\n    page: The page number to retrieve (default: 0)\\n    size: The number of items per page (default: 10)\\n    \\nReturns:\\n    List of workflow dictionaries that match the search criteria\\n    \\nRaises:\\n    HTTPError: If the request to the API fails\\n","inputSchema":{"properties":{"parent_uuid":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"title":"Parent Uuid"},"name_contains":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"title":"Name Contains"},"public":{"anyOf":[{"type":"boolean"},{"type":"null"}],"default":null,"title":"Public"},"starred":{"anyOf":[{"type":"boolean"},{"type":"null"}],"default":null,"title":"Starred"},"status":{"anyOf":[{"type":"integer"},{"type":"null"}],"default":null,"title":"Status"},"workflow_type":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"title":"Workflow Type"},"page":{"default":0,"title":"Page","type":"integer"},"size":{"default":10,"title":"Size","type":"integer"}},"type":"object"}},{"name":"workflow_update","description":"Update workflow details.\\n\\nArgs:\\n    workflow_uuid: The UUID of the workflow to update\\n    name: New name for the workflow (optional)\\n    notes: New notes for the workflow (optional)\\n    starred: Whether to star/unstar the workflow (optional)\\n    public: Whether to make the workflow public/private (optional)\\n    \\nReturns:\\n    Dictionary with updated workflow information\\n","inputSchema":{"properties":{"workflow_uuid":{"title":"Workflow Uuid","type":"string"},"name":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"title":"Name"},"notes":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"title":"Notes"},"starred":{"anyOf":[{"type":"boolean"},{"type":"null"}],"default":null,"title":"Starred"},"public":{"anyOf":[{"type":"boolean"},{"type":"null"}],"default":null,"title":"Public"}},"required":["workflow_uuid"],"type":"object"}},{"name":"workflow_is_finished","description":"Check if a workflow is finished.\\n\\nArgs:\\n    workflow_uuid: The UUID of the workflow to check\\n    \\nReturns:\\n    Dictionary with workflow completion status\\n","inputSchema":{"properties":{"workflow_uuid":{"title":"Workflow Uuid","type":"string"}},"required":["workflow_uuid"],"type":"object"}},{"name":"workflow_delete_data","description":"Delete workflow data while keeping the workflow record.\\n\\nArgs:\\n    workflow_uuid: The UUID of the workflow\\n    \\nReturns:\\n    Dictionary with confirmation message\\n","inputSchema":{"properties":{"workflow_uuid":{"title":"Workflow Uuid","type":"string"}},"required":["workflow_uuid"],"type":"object"}}]}}\r\n\r\n'
2025-08-02 14:02:08,346 - mcp.server.sse - DEBUG - Sending message via SSE: SessionMessage(message=JSONRPCMessage(root=JSONRPCResponse(jsonrpc='2.0', id=3, result={'tools': [{'name': 'submit_basic_calculation_workflow', 'description': 'Submit a basic calculation workflow using Rowan v2 API.\n\nPerforms fundamental quantum chemistry calculations with configurable methods\nand computational tasks. Returns a workflow object for tracking progress.\n', 'inputSchema': {'properties': {'initial_molecule': {'anyOf': [{'type': 'string'}, {'additionalProperties': True, 'type': 'object'}, {}], 'description': 'The molecule to perform the calculation on. Can be a SMILES string, dict, StJamesMolecule, or RdkitMol object', 'title': 'Initial Molecule'}, 'method': {'default': 'uma_m_omol', 'description': "The method to use for the calculation (e.g., 'uma_m_omol', 'gfn2-xtb', 'r2scan_3c')", 'title': 'Method', 'type': 'string'}, 'tasks': {'anyOf': [{'items': {'type': 'string'}, 'type': 'array'}, {'type': 'null'}], 'default': None, 'description': "List of computational tasks to perform. Optional[List[str]] (e.g. ['optimize']), Defaults to None", 'title': 'Tasks'}, 'mode': {'default': 'auto', 'description': "The mode to run the calculation in ('auto', 'rapid', 'careful', 'meticulous')", 'title': 'Mode', 'type': 'string'}, 'engine': {'default': 'omol25', 'description': "The computational engine to use ('omol25', 'xtb', 'psi4')", 'title': 'Engine', 'type': 'string'}, 'name': {'default': 'Basic Calculation Workflow', 'description': 'The name of the workflow for identification', 'title': 'Name', 'type': 'string'}, 'folder_uuid': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'UUID of the folder to place the workflow in (optional)', 'title': 'Folder Uuid'}, 'max_credits': {'anyOf': [{'type': 'integer'}, {'type': 'null'}], 'default': None, 'description': 'Maximum number of credits to use for the workflow (optional)', 'title': 'Max Credits'}}, 'required': ['initial_molecule'], 'type': 'object'}}, {'name': 'submit_conformer_search_workflow', 'description': 'Submit a conformer search workflow using Rowan v2 API.\n\nExplores the conformational space of a molecule to find low-energy structures.\n\nArgs:\n    initial_molecule: SMILES string or molecule object\n    conf_gen_mode: default to "rapid"\n        Options: "rapid", "careful", "meticulous"\n    final_method: default: "aimnet2_wb97md3"\n        Try other options, if user specifies\n    solvent: Optional solvent for implicit solvation (e.g., "water", "ethanol")\n    transition_state: Whether searching for transition state conformers (default: False)\n    name: Workflow name for tracking\n    folder_uuid: Optional folder UUID for organization\n    max_credits: Optional credit limit for the calculation\n    \nReturns:\n    Workflow object representing the submitted workflow\n    \nExample:\n    # Basic conformer search\n    result = submit_conformer_search_workflow(\n        initial_molecule="CCCC",\n        conf_gen_mode="rapid"\n    )\n    \n    # Careful search with solvent\n    result = submit_conformer_search_workflow(\n        initial_molecule="CC(C)CC(=O)O",\n        conf_gen_mode="careful",\n        solvent="water",\n        final_method="r2scan_3c"\n    )\n', 'inputSchema': {'properties': {'initial_molecule': {'title': 'Initial Molecule', 'type': 'string'}, 'conf_gen_mode': {'default': 'rapid', 'title': 'Conf Gen Mode', 'type': 'string'}, 'final_method': {'default': 'aimnet2_wb97md3', 'title': 'Final Method', 'type': 'string'}, 'solvent': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Solvent'}, 'transition_state': {'default': False, 'title': 'Transition State', 'type': 'boolean'}, 'name': {'default': 'Conformer Search Workflow', 'title': 'Name', 'type': 'string'}, 'folder_uuid': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Folder Uuid'}, 'max_credits': {'anyOf': [{'type': 'integer'}, {'type': 'null'}], 'default': None, 'title': 'Max Credits'}}, 'required': ['initial_molecule'], 'type': 'object'}}, {'name': 'submit_solubility_workflow', 'description': 'Submit a solubility prediction workflow using Rowan v2 API.\n\nPredicts solubility (log S) of a molecule in multiple solvents at various temperatures\nusing machine learning models.\n\nArgs:\n    initial_smiles: SMILES string of the molecule\n    solvents: List of solvents as SMILES or common names (e.g., ["water", "ethanol"])\n        If None, uses default solvents\n    temperatures: List of temperatures in Kelvin\n        If None, uses default temperature range\n    name: Workflow name for tracking\n    folder_uuid: Optional folder UUID for organization\n    max_credits: Optional credit limit for the calculation\n    \nReturns:\n    Workflow object representing the submitted workflow\n    \nExample:\n    # Basic solubility prediction\n    result = submit_solubility_workflow(\n        initial_smiles="CC(=O)Nc1ccc(O)cc1",\n        solvents=["water", "ethanol"],\n        temperatures=[298.15, 310.15]\n    )\n    \n    # With SMILES solvents\n    result = submit_solubility_workflow(\n        initial_smiles="CC(=O)O",\n        solvents=["O", "CCO", "CCCCCC"],\n        temperatures=[273.15, 298.15, 323.15]\n    )\n', 'inputSchema': {'properties': {'initial_smiles': {'title': 'Initial Smiles', 'type': 'string'}, 'solvents': {'anyOf': [{'items': {'type': 'string'}, 'type': 'array'}, {'type': 'null'}], 'default': None, 'title': 'Solvents'}, 'temperatures': {'anyOf': [{'items': {'type': 'number'}, 'type': 'array'}, {'type': 'null'}], 'default': None, 'title': 'Temperatures'}, 'name': {'default': 'Solubility Workflow', 'title': 'Name', 'type': 'string'}, 'folder_uuid': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Folder Uuid'}, 'max_credits': {'anyOf': [{'type': 'integer'}, {'type': 'null'}], 'default': None, 'title': 'Max Credits'}}, 'required': ['initial_smiles'], 'type': 'object'}}, {'name': 'submit_pka_workflow', 'description': 'Submit a pKa prediction workflow using Rowan v2 API.\n\nPredicts acid dissociation constants (pKa) for ionizable groups in a molecule\nusing quantum chemistry calculations.\n\nArgs:\n    initial_molecule: SMILES string or molecule object\n    pka_range: Tuple of (min, max) pKa values to search (default: (2, 12))\n    deprotonate_elements: List of elements to consider for deprotonation\n        (e.g., ["N", "O", "S"]). If None, uses defaults\n    protonate_elements: List of elements to consider for protonation\n        (e.g., ["N", "O"]). If None, uses defaults\n    mode: Calculation mode (default: "careful")\n        Options: "rapid", "careful", "meticulous"\n    name: Workflow name for tracking\n    folder_uuid: Optional folder UUID for organization\n    max_credits: Optional credit limit for the calculation\n    \nReturns:\n    Workflow object representing the submitted workflow\n    \nExample:\n    # Basic pKa prediction\n    result = submit_pka_workflow(\n        initial_molecule="CC(=O)O",\n        pka_range=(2, 8)\n    )\n    \n    # Specific elements with meticulous mode\n    result = submit_pka_workflow(\n        initial_molecule="NC(C)C(=O)O",\n        pka_range=(1, 14),\n        deprotonate_elements=["N", "O"],\n        mode="meticulous"\n    )\n', 'inputSchema': {'properties': {'initial_molecule': {'title': 'Initial Molecule', 'type': 'string'}, 'pka_range': {'default': [2, 12], 'maxItems': 2, 'minItems': 2, 'prefixItems': [{'type': 'number'}, {'type': 'number'}], 'title': 'Pka Range', 'type': 'array'}, 'deprotonate_elements': {'anyOf': [{'items': {'type': 'string'}, 'type': 'array'}, {'type': 'null'}], 'default': None, 'title': 'Deprotonate Elements'}, 'protonate_elements': {'anyOf': [{'items': {'type': 'string'}, 'type': 'array'}, {'type': 'null'}], 'default': None, 'title': 'Protonate Elements'}, 'mode': {'default': 'careful', 'title': 'Mode', 'type': 'string'}, 'name': {'default': 'pKa Workflow', 'title': 'Name', 'type': 'string'}, 'folder_uuid': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Folder Uuid'}, 'max_credits': {'anyOf': [{'type': 'integer'}, {'type': 'null'}], 'default': None, 'title': 'Max Credits'}}, 'required': ['initial_molecule'], 'type': 'object'}}, {'name': 'submit_redox_potential_workflow', 'description': 'Submit a redox potential calculation workflow using Rowan v2 API.\n\nCalculates reduction and/or oxidation potentials for a molecule using\nquantum chemistry methods.\n\nArgs:\n    initial_molecule: SMILES string or molecule object\n    reduction: Whether to calculate reduction potential (default: False)\n    oxidization: Whether to calculate oxidation potential (default: True)\n    mode: Calculation mode (default: "rapid")\n        Options: "rapid", "careful", "meticulous"\n    name: Workflow name for tracking\n    folder_uuid: Optional folder UUID for organization\n    max_credits: Optional credit limit for the calculation\n    \nReturns:\n    Workflow object representing the submitted workflow\n    \nExample:\n    # Basic oxidation potential\n    result = submit_redox_potential_workflow(\n        initial_molecule="CC1=CC=CC=C1",\n        oxidization=True\n    )\n    \n    # Both reduction and oxidation with careful mode\n    result = submit_redox_potential_workflow(\n        initial_molecule="c1ccccc1",\n        reduction=True,\n        oxidization=True,\n        mode="careful"\n    )\n', 'inputSchema': {'properties': {'initial_molecule': {'title': 'Initial Molecule', 'type': 'string'}, 'reduction': {'default': False, 'title': 'Reduction', 'type': 'boolean'}, 'oxidization': {'default': True, 'title': 'Oxidization', 'type': 'boolean'}, 'mode': {'default': 'rapid', 'title': 'Mode', 'type': 'string'}, 'name': {'default': 'Redox Potential Workflow', 'title': 'Name', 'type': 'string'}, 'folder_uuid': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Folder Uuid'}, 'max_credits': {'anyOf': [{'type': 'integer'}, {'type': 'null'}], 'default': None, 'title': 'Max Credits'}}, 'required': ['initial_molecule'], 'type': 'object'}}, {'name': 'submit_fukui_workflow', 'description': 'Submit a Fukui indices calculation workflow using Rowan v2 API.\n\nCalculates Fukui indices to predict molecular reactivity at different sites.\nFukui indices indicate susceptibility to nucleophilic/electrophilic attack.\n\nArgs:\n    initial_molecule: SMILES string or molecule object\n    optimization_method: Method for geometry optimization (default: "gfn2_xtb")\n        Common options: "gfn2_xtb", "r2scan_3c", "aimnet2_wb97md3"\n    fukui_method: Method for Fukui calculation (default: "gfn1_xtb")\n        Common options: "gfn1_xtb", "gfn2_xtb"\n    solvent_settings: Optional solvent configuration dictionary\n        Example: {"solvent": "water", "model": "alpb"}\n    name: Workflow name for tracking\n    folder_uuid: Optional folder UUID for organization\n    max_credits: Optional credit limit for the calculation\n    \nReturns:\n    Workflow object representing the submitted workflow\n    \nExample:\n    # Basic Fukui indices\n    result = submit_fukui_workflow(\n        initial_molecule="CC(=O)O"\n    )\n    \n    # With solvent and advanced methods\n    result = submit_fukui_workflow(\n        initial_molecule="c1ccccc1N",\n        optimization_method="r2scan_3c",\n        fukui_method="gfn2_xtb",\n        solvent_settings={"solvent": "water", "model": "alpb"}\n    )\n', 'inputSchema': {'properties': {'initial_molecule': {'title': 'Initial Molecule', 'type': 'string'}, 'optimization_method': {'default': 'gfn2_xtb', 'title': 'Optimization Method', 'type': 'string'}, 'fukui_method': {'default': 'gfn1_xtb', 'title': 'Fukui Method', 'type': 'string'}, 'solvent_settings': {'anyOf': [{'additionalProperties': True, 'type': 'object'}, {'type': 'null'}], 'default': None, 'title': 'Solvent Settings'}, 'name': {'default': 'Fukui Workflow', 'title': 'Name', 'type': 'string'}, 'folder_uuid': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Folder Uuid'}, 'max_credits': {'anyOf': [{'type': 'integer'}, {'type': 'null'}], 'default': None, 'title': 'Max Credits'}}, 'required': ['initial_molecule'], 'type': 'object'}}, {'name': 'submit_tautomer_search_workflow', 'description': 'Submit a tautomer search workflow using Rowan v2 API.\n\nSearches for different tautomeric forms of a molecule and evaluates their\nrelative stabilities. Tautomers are structural isomers that readily interconvert.\n\nArgs:\n    initial_molecule: SMILES string or molecule object\n    mode: Search mode (default: "careful")\n        Options: "rapid", "careful", "meticulous"\n    name: Workflow name for tracking\n    folder_uuid: Optional folder UUID for organization\n    max_credits: Optional credit limit for the calculation\n    \nReturns:\n    Workflow object representing the submitted workflow\n    \nExample:\n    # Basic tautomer search\n    result = submit_tautomer_search_workflow(\n        initial_molecule="CC(=O)CC(=O)C"\n    )\n    \n    # Meticulous search for complex molecule\n    result = submit_tautomer_search_workflow(\n        initial_molecule="c1ccc2c(c1)ncc(=O)[nH]2",\n        mode="meticulous"\n    )\n', 'inputSchema': {'properties': {'initial_molecule': {'title': 'Initial Molecule', 'type': 'string'}, 'mode': {'default': 'careful', 'title': 'Mode', 'type': 'string'}, 'name': {'default': 'Tautomer Search Workflow', 'title': 'Name', 'type': 'string'}, 'folder_uuid': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Folder Uuid'}, 'max_credits': {'anyOf': [{'type': 'integer'}, {'type': 'null'}], 'default': None, 'title': 'Max Credits'}}, 'required': ['initial_molecule'], 'type': 'object'}}, {'name': 'submit_descriptors_workflow', 'description': 'Submit a molecular descriptors calculation workflow using Rowan v2 API.\n\nCalculates a comprehensive set of molecular descriptors including:\n- Physical properties (MW, logP, TPSA, etc.)\n- Electronic properties (HOMO/LUMO, dipole moment, etc.)\n- Structural features (rotatable bonds, H-bond donors/acceptors, etc.)\n- Topological indices\n\nArgs:\n    initial_molecule: SMILES string or molecule object\n    name: Workflow name for tracking\n    folder_uuid: Optional folder UUID for organization\n    max_credits: Optional credit limit for the calculation\n    \nReturns:\n    Workflow object representing the submitted workflow\n    \nExample:\n    # Basic descriptor calculation\n    result = submit_descriptors_workflow(\n        initial_molecule="CC(=O)Nc1ccc(O)cc1"\n    )\n    \n    # For complex molecule\n    result = submit_descriptors_workflow(\n        initial_molecule="CN1C=NC2=C1C(=O)N(C(=O)N2C)C",\n        name="Caffeine Descriptors"\n    )\n', 'inputSchema': {'properties': {'initial_molecule': {'title': 'Initial Molecule', 'type': 'string'}, 'name': {'default': 'Descriptors Workflow', 'title': 'Name', 'type': 'string'}, 'folder_uuid': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Folder Uuid'}, 'max_credits': {'anyOf': [{'type': 'integer'}, {'type': 'null'}], 'default': None, 'title': 'Max Credits'}}, 'required': ['initial_molecule'], 'type': 'object'}}, {'name': 'submit_scan_workflow', 'description': 'Submit a potential energy surface scan workflow using Rowan v2 API.\n\nPerforms systematic scans along specified molecular coordinates (bonds, angles,\nor dihedrals) to map the potential energy surface.\n\nArgs:\n    initial_molecule: SMILES string or molecule object\n    scan_settings: Dictionary specifying scan parameters\n        Example: {\n            "type": "dihedral",  # or "bond", "angle"\n            "atoms": [0, 1, 2, 3],  # atom indices\n            "start": -180,\n            "stop": 180,\n            "step": 10\n        }\n    calculation_engine: Computational engine (default: "omol25")\n        Options: "omol25", "xtb", "psi4"\n    calculation_method: Method for calculations (default: "uma_m_omol")\n        Options depend on engine\n    wavefront_propagation: Use wavefront optimization (default: True)\n        Speeds up scans by using previous geometries as starting points\n    name: Workflow name for tracking\n    folder_uuid: Optional folder UUID for organization\n    max_credits: Optional credit limit for the calculation\n    \nReturns:\n    Workflow object representing the submitted workflow\n    \nExample:\n    # Dihedral scan\n    result = submit_scan_workflow(\n        initial_molecule="CC(C)CC",\n        scan_settings={\n            "type": "dihedral",\n            "atoms": [0, 1, 2, 3],\n            "start": -180,\n            "stop": 180,\n            "step": 15\n        }\n    )\n    \n    # Bond scan with advanced method\n    result = submit_scan_workflow(\n        initial_molecule="CC",\n        scan_settings={\n            "type": "bond",\n            "atoms": [0, 1],\n            "start": 1.0,\n            "stop": 2.5,\n            "step": 0.1\n        },\n        calculation_method="r2scan_3c"\n    )\n', 'inputSchema': {'properties': {'initial_molecule': {'title': 'Initial Molecule', 'type': 'string'}, 'scan_settings': {'anyOf': [{'additionalProperties': True, 'type': 'object'}, {'type': 'null'}], 'default': None, 'title': 'Scan Settings'}, 'calculation_engine': {'default': 'omol25', 'title': 'Calculation Engine', 'type': 'string'}, 'calculation_method': {'default': 'uma_m_omol', 'title': 'Calculation Method', 'type': 'string'}, 'wavefront_propagation': {'default': True, 'title': 'Wavefront Propagation', 'type': 'boolean'}, 'name': {'default': 'Scan Workflow', 'title': 'Name', 'type': 'string'}, 'folder_uuid': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Folder Uuid'}, 'max_credits': {'anyOf': [{'type': 'integer'}, {'type': 'null'}], 'default': None, 'title': 'Max Credits'}}, 'required': ['initial_molecule'], 'type': 'object'}}, {'name': 'submit_irc_workflow', 'description': 'Submits an Intrinsic Reaction Coordinate (IRC) workflow to the API.\n\nArgs:\n    initial_molecule: The initial molecule to perform the IRC calculation on.\n        Can be a dict, StJamesMolecule, or RdkitMol object\n    method: The computational method to use for the IRC calculation (default: "uma_m_omol")\n        See list of available methods for options\n    engine: The computational engine to use for the calculation (default: "omol25")\n        See list of available engines\n    preopt: Whether to perform a pre-optimization of the molecule (default: True)\n    step_size: The step size to use for the IRC calculation (default: 0.05)\n    max_irc_steps: The maximum number of IRC steps to perform (default: 30)\n    name: The name of the workflow\n    folder_uuid: The UUID of the folder to place the workflow in\n    max_credits: The maximum number of credits to use for the workflow\n    \nReturns:\n    Workflow object representing the submitted IRC workflow\n    \nExample:\n    # Basic IRC calculation\n    result = submit_irc_workflow(\n        initial_molecule={"smiles": "[CH3].[CH3]"},\n        method="gfn2_xtb",\n        max_irc_steps=50\n    )\n    \n    # IRC with specific method and engine\n    result = submit_irc_workflow(\n        initial_molecule={"smiles": "CC(O)=CC"},\n        method="r2scan_3c",\n        engine="psi4",\n        step_size=0.03\n    )\n', 'inputSchema': {'properties': {'initial_molecule': {'anyOf': [{'additionalProperties': True, 'type': 'object'}, {}, {'type': 'null'}], 'default': None, 'title': 'Initial Molecule'}, 'method': {'default': 'uma_m_omol', 'title': 'Method', 'type': 'string'}, 'engine': {'default': 'omol25', 'title': 'Engine', 'type': 'string'}, 'preopt': {'default': True, 'title': 'Preopt', 'type': 'boolean'}, 'step_size': {'default': 0.05, 'title': 'Step Size', 'type': 'number'}, 'max_irc_steps': {'default': 30, 'title': 'Max Irc Steps', 'type': 'integer'}, 'name': {'default': 'IRC Workflow', 'title': 'Name', 'type': 'string'}, 'folder_uuid': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Folder Uuid'}, 'max_credits': {'anyOf': [{'type': 'integer'}, {'type': 'null'}], 'default': None, 'title': 'Max Credits'}}, 'type': 'object'}}, {'name': 'submit_protein_cofolding_workflow', 'description': 'Submits a protein cofolding workflow to the API.\n\nArgs:\n    initial_protein_sequences: The sequences of the proteins to be cofolded\n    initial_smiles_list: A list of SMILES strings for the ligands to be cofolded with\n    ligand_binding_affinity_index: The index of the ligand for which to compute the binding affinity\n    use_msa_server: Whether to use the MSA server for the computation\n    use_potentials: Whether to use potentials for the computation\n    name: The name of the workflow\n    model: The model to use for the computation\n    folder_uuid: The UUID of the folder to store the workflow in\n    max_credits: The maximum number of credits to use for the workflow\n    \nReturns:\n    Workflow object representing the submitted workflow\n    \nExample:\n    # Protein dimer cofolding\n    result = submit_protein_cofolding_workflow(\n        initial_protein_sequences=[\n            "MKTAYIAKQRQISFVKSHFSRQLEERLGLIEVQAPILSRVGDGTQDNLSGAEK",\n            "MKQHKAMIVALIVICITAVVAALVTRKDLCEVHIRTGQTEVAVF"\n        ]\n    )\n    \n    # Protein-ligand complex\n    result = submit_protein_cofolding_workflow(\n        initial_protein_sequences=["MGSSHHHHHHSSGLVPRGSH"],\n        initial_smiles_list=["CC(=O)O", "CCO"],\n        ligand_binding_affinity_index=0,\n        use_msa_server=True\n    )\n', 'inputSchema': {'properties': {'initial_protein_sequences': {'items': {'type': 'string'}, 'title': 'Initial Protein Sequences', 'type': 'array'}, 'initial_smiles_list': {'anyOf': [{'items': {'type': 'string'}, 'type': 'array'}, {'type': 'null'}], 'default': None, 'title': 'Initial Smiles List'}, 'ligand_binding_affinity_index': {'anyOf': [{'type': 'integer'}, {'type': 'null'}], 'default': None, 'title': 'Ligand Binding Affinity Index'}, 'use_msa_server': {'default': True, 'title': 'Use Msa Server', 'type': 'boolean'}, 'use_potentials': {'default': False, 'title': 'Use Potentials', 'type': 'boolean'}, 'name': {'default': 'Cofolding Workflow', 'title': 'Name', 'type': 'string'}, 'model': {'default': 'boltz_2', 'title': 'Model', 'type': 'string'}, 'folder_uuid': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Folder Uuid'}, 'max_credits': {'anyOf': [{'type': 'integer'}, {'type': 'null'}], 'default': None, 'title': 'Max Credits'}}, 'required': ['initial_protein_sequences'], 'type': 'object'}}, {'name': 'submit_docking_workflow', 'description': 'Submits a Docking workflow to the API.\n\nArgs:\n    protein: The protein to dock. Can be fed as a uuid or a Protein object\n    pocket: The pocket to dock into\n    initial_molecule: The initial molecule to be docked.\n        Can be a dict, StJamesMolecule, or RdkitMol object\n    do_csearch: Whether to perform a conformational search on the ligand\n    do_optimization: Whether to perform an optimization on the ligand\n    name: The name of the workflow\n    folder_uuid: The UUID of the folder to place the workflow in\n    max_credits: The maximum number of credits to use for the workflow\n    \nReturns:\n    Workflow object representing the submitted workflow\n    \nExample:\n    # Basic docking with protein UUID\n    result = submit_docking_workflow(\n        protein="protein-uuid-123",\n        pocket=pocket_obj,\n        initial_molecule={"smiles": "CC(=O)Oc1ccccc1C(=O)O"}\n    )\n    \n    # Docking with optimization disabled\n    result = submit_docking_workflow(\n        protein=protein_obj,\n        pocket=pocket_obj,\n        initial_molecule={"smiles": "CCO"},\n        do_csearch=False,\n        do_optimization=False\n    )\n', 'inputSchema': {'properties': {'protein': {'anyOf': [{'type': 'string'}, {}], 'title': 'Protein'}, 'pocket': {'title': 'Pocket'}, 'initial_molecule': {'anyOf': [{'additionalProperties': True, 'type': 'object'}, {}, {'type': 'null'}], 'default': None, 'title': 'Initial Molecule'}, 'do_csearch': {'default': True, 'title': 'Do Csearch', 'type': 'boolean'}, 'do_optimization': {'default': True, 'title': 'Do Optimization', 'type': 'boolean'}, 'name': {'default': 'Docking Workflow', 'title': 'Name', 'type': 'string'}, 'folder_uuid': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Folder Uuid'}, 'max_credits': {'anyOf': [{'type': 'integer'}, {'type': 'null'}], 'default': None, 'title': 'Max Credits'}}, 'required': ['protein', 'pocket'], 'type': 'object'}}, {'name': 'workflow_fetch_latest', 'description': 'Fetch the latest workflow data from the database.\n\nUpdates the workflow object with the most recent status and results.\n\nArgs:\n    workflow_uuid: The UUID of the workflow to fetch\n    in_place: Whether to update the workflow object in place (default: False)\n    \nReturns:\n    Dictionary containing the updated workflow data including status and results\n', 'inputSchema': {'properties': {'workflow_uuid': {'title': 'Workflow Uuid', 'type': 'string'}, 'in_place': {'default': False, 'title': 'In Place', 'type': 'boolean'}}, 'required': ['workflow_uuid'], 'type': 'object'}}, {'name': 'workflow_wait_for_result', 'description': 'Wait for a workflow to complete and return the result.\n\nBlocks until the workflow completes, polling at specified intervals.\n\nArgs:\n    workflow_uuid: The UUID of the workflow to wait for\n    poll_interval: Time in seconds between status checks (default: 5)\n    \nReturns:\n    Dictionary containing the completed workflow data including results\n', 'inputSchema': {'properties': {'workflow_uuid': {'title': 'Workflow Uuid', 'type': 'string'}, 'poll_interval': {'default': 5, 'title': 'Poll Interval', 'type': 'integer'}}, 'required': ['workflow_uuid'], 'type': 'object'}}, {'name': 'workflow_get_status', 'description': 'Get the current status of a workflow.\n\nArgs:\n    workflow_uuid: The UUID of the workflow\n    \nReturns:\n    Dictionary with status information\n', 'inputSchema': {'properties': {'workflow_uuid': {'title': 'Workflow Uuid', 'type': 'string'}}, 'required': ['workflow_uuid'], 'type': 'object'}}, {'name': 'workflow_stop', 'description': 'Stop a running workflow.\n\nArgs:\n    workflow_uuid: The UUID of the workflow to stop\n    \nReturns:\n    Dictionary with confirmation message\n', 'inputSchema': {'properties': {'workflow_uuid': {'title': 'Workflow Uuid', 'type': 'string'}}, 'required': ['workflow_uuid'], 'type': 'object'}}, {'name': 'workflow_delete', 'description': 'Delete a workflow.\n\nThis permanently removes the workflow and its results from the database.\n\nArgs:\n    workflow_uuid: The UUID of the workflow to delete\n    \nReturns:\n    Dictionary with confirmation message\n', 'inputSchema': {'properties': {'workflow_uuid': {'title': 'Workflow Uuid', 'type': 'string'}}, 'required': ['workflow_uuid'], 'type': 'object'}}, {'name': 'retrieve_workflow', 'description': 'Retrieve a workflow from the API.\n\nArgs:\n    uuid: The UUID of the workflow to retrieve\n    \nReturns:\n    Dictionary containing the complete workflow data\n    \nRaises:\n    HTTPError: If the API request fails\n', 'inputSchema': {'properties': {'uuid': {'title': 'Uuid', 'type': 'string'}}, 'required': ['uuid'], 'type': 'object'}}, {'name': 'retrieve_calculation_molecules', 'description': 'Retrieve a list of molecules from a calculation.\n\nArgs:\n    uuid: The UUID of the calculation to retrieve molecules from\n    \nReturns:\n    List of dictionaries representing the molecules in the calculation\n    \nRaises:\n    HTTPError: If the API request fails\n', 'inputSchema': {'properties': {'uuid': {'title': 'Uuid', 'type': 'string'}}, 'required': ['uuid'], 'type': 'object'}}, {'name': 'list_workflows', 'description': 'List workflows subject to the specified criteria.\n\nArgs:\n    parent_uuid: The UUID of the parent folder\n    name_contains: Substring to search for in workflow names\n    public: Filter workflows by their public status\n    starred: Filter workflows by their starred status\n    status: Filter workflows by their status\n    workflow_type: Filter workflows by their type\n    page: The page number to retrieve (default: 0)\n    size: The number of items per page (default: 10)\n    \nReturns:\n    List of workflow dictionaries that match the search criteria\n    \nRaises:\n    HTTPError: If the request to the API fails\n', 'inputSchema': {'properties': {'parent_uuid': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Parent Uuid'}, 'name_contains': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Name Contains'}, 'public': {'anyOf': [{'type': 'boolean'}, {'type': 'null'}], 'default': None, 'title': 'Public'}, 'starred': {'anyOf': [{'type': 'boolean'}, {'type': 'null'}], 'default': None, 'title': 'Starred'}, 'status': {'anyOf': [{'type': 'integer'}, {'type': 'null'}], 'default': None, 'title': 'Status'}, 'workflow_type': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Workflow Type'}, 'page': {'default': 0, 'title': 'Page', 'type': 'integer'}, 'size': {'default': 10, 'title': 'Size', 'type': 'integer'}}, 'type': 'object'}}, {'name': 'workflow_update', 'description': 'Update workflow details.\n\nArgs:\n    workflow_uuid: The UUID of the workflow to update\n    name: New name for the workflow (optional)\n    notes: New notes for the workflow (optional)\n    starred: Whether to star/unstar the workflow (optional)\n    public: Whether to make the workflow public/private (optional)\n    \nReturns:\n    Dictionary with updated workflow information\n', 'inputSchema': {'properties': {'workflow_uuid': {'title': 'Workflow Uuid', 'type': 'string'}, 'name': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Name'}, 'notes': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Notes'}, 'starred': {'anyOf': [{'type': 'boolean'}, {'type': 'null'}], 'default': None, 'title': 'Starred'}, 'public': {'anyOf': [{'type': 'boolean'}, {'type': 'null'}], 'default': None, 'title': 'Public'}}, 'required': ['workflow_uuid'], 'type': 'object'}}, {'name': 'workflow_is_finished', 'description': 'Check if a workflow is finished.\n\nArgs:\n    workflow_uuid: The UUID of the workflow to check\n    \nReturns:\n    Dictionary with workflow completion status\n', 'inputSchema': {'properties': {'workflow_uuid': {'title': 'Workflow Uuid', 'type': 'string'}}, 'required': ['workflow_uuid'], 'type': 'object'}}, {'name': 'workflow_delete_data', 'description': 'Delete workflow data while keeping the workflow record.\n\nArgs:\n    workflow_uuid: The UUID of the workflow\n    \nReturns:\n    Dictionary with confirmation message\n', 'inputSchema': {'properties': {'workflow_uuid': {'title': 'Workflow Uuid', 'type': 'string'}}, 'required': ['workflow_uuid'], 'type': 'object'}}]})), metadata=None)
2025-08-02 14:02:08,349 - mcp.server.lowlevel.server - DEBUG - Response sent
2025-08-02 14:02:08,349 - sse_starlette.sse - DEBUG - chunk: b'event: message\r\ndata: {"jsonrpc":"2.0","id":3,"result":{"tools":[{"name":"submit_basic_calculation_workflow","description":"Submit a basic calculation workflow using Rowan v2 API.\\n\\nPerforms fundamental quantum chemistry calculations with configurable methods\\nand computational tasks. Returns a workflow object for tracking progress.\\n","inputSchema":{"properties":{"initial_molecule":{"anyOf":[{"type":"string"},{"additionalProperties":true,"type":"object"},{}],"description":"The molecule to perform the calculation on. Can be a SMILES string, dict, StJamesMolecule, or RdkitMol object","title":"Initial Molecule"},"method":{"default":"uma_m_omol","description":"The method to use for the calculation (e.g., \'uma_m_omol\', \'gfn2-xtb\', \'r2scan_3c\')","title":"Method","type":"string"},"tasks":{"anyOf":[{"items":{"type":"string"},"type":"array"},{"type":"null"}],"default":null,"description":"List of computational tasks to perform. Optional[List[str]] (e.g. [\'optimize\']), Defaults to None","title":"Tasks"},"mode":{"default":"auto","description":"The mode to run the calculation in (\'auto\', \'rapid\', \'careful\', \'meticulous\')","title":"Mode","type":"string"},"engine":{"default":"omol25","description":"The computational engine to use (\'omol25\', \'xtb\', \'psi4\')","title":"Engine","type":"string"},"name":{"default":"Basic Calculation Workflow","description":"The name of the workflow for identification","title":"Name","type":"string"},"folder_uuid":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"description":"UUID of the folder to place the workflow in (optional)","title":"Folder Uuid"},"max_credits":{"anyOf":[{"type":"integer"},{"type":"null"}],"default":null,"description":"Maximum number of credits to use for the workflow (optional)","title":"Max Credits"}},"required":["initial_molecule"],"type":"object"}},{"name":"submit_conformer_search_workflow","description":"Submit a conformer search workflow using Rowan v2 API.\\n\\nExplores the conformational space of a molecule to find low-energy structures.\\n\\nArgs:\\n    initial_molecule: SMILES string or molecule object\\n    conf_gen_mode: default to \\"rapid\\"\\n        Options: \\"rapid\\", \\"careful\\", \\"meticulous\\"\\n    final_method: default: \\"aimnet2_wb97md3\\"\\n        Try other options, if user specifies\\n    solvent: Optional solvent for implicit solvation (e.g., \\"water\\", \\"ethanol\\")\\n    transition_state: Whether searching for transition state conformers (default: False)\\n    name: Workflow name for tracking\\n    folder_uuid: Optional folder UUID for organization\\n    max_credits: Optional credit limit for the calculation\\n    \\nReturns:\\n    Workflow object representing the submitted workflow\\n    \\nExample:\\n    # Basic conformer search\\n    result = submit_conformer_search_workflow(\\n        initial_molecule=\\"CCCC\\",\\n        conf_gen_mode=\\"rapid\\"\\n    )\\n    \\n    # Careful search with solvent\\n    result = submit_conformer_search_workflow(\\n        initial_molecule=\\"CC(C)CC(=O)O\\",\\n        conf_gen_mode=\\"careful\\",\\n        solvent=\\"water\\",\\n        final_method=\\"r2scan_3c\\"\\n    )\\n","inputSchema":{"properties":{"initial_molecule":{"title":"Initial Molecule","type":"string"},"conf_gen_mode":{"default":"rapid","title":"Conf Gen Mode","type":"string"},"final_method":{"default":"aimnet2_wb97md3","title":"Final Method","type":"string"},"solvent":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"title":"Solvent"},"transition_state":{"default":false,"title":"Transition State","type":"boolean"},"name":{"default":"Conformer Search Workflow","title":"Name","type":"string"},"folder_uuid":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"title":"Folder Uuid"},"max_credits":{"anyOf":[{"type":"integer"},{"type":"null"}],"default":null,"title":"Max Credits"}},"required":["initial_molecule"],"type":"object"}},{"name":"submit_solubility_workflow","description":"Submit a solubility prediction workflow using Rowan v2 API.\\n\\nPredicts solubility (log S) of a molecule in multiple solvents at various temperatures\\nusing machine learning models.\\n\\nArgs:\\n    initial_smiles: SMILES string of the molecule\\n    solvents: List of solvents as SMILES or common names (e.g., [\\"water\\", \\"ethanol\\"])\\n        If None, uses default solvents\\n    temperatures: List of temperatures in Kelvin\\n        If None, uses default temperature range\\n    name: Workflow name for tracking\\n    folder_uuid: Optional folder UUID for organization\\n    max_credits: Optional credit limit for the calculation\\n    \\nReturns:\\n    Workflow object representing the submitted workflow\\n    \\nExample:\\n    # Basic solubility prediction\\n    result = submit_solubility_workflow(\\n        initial_smiles=\\"CC(=O)Nc1ccc(O)cc1\\",\\n        solvents=[\\"water\\", \\"ethanol\\"],\\n        temperatures=[298.15, 310.15]\\n    )\\n    \\n    # With SMILES solvents\\n    result = submit_solubility_workflow(\\n        initial_smiles=\\"CC(=O)O\\",\\n        solvents=[\\"O\\", \\"CCO\\", \\"CCCCCC\\"],\\n        temperatures=[273.15, 298.15, 323.15]\\n    )\\n","inputSchema":{"properties":{"initial_smiles":{"title":"Initial Smiles","type":"string"},"solvents":{"anyOf":[{"items":{"type":"string"},"type":"array"},{"type":"null"}],"default":null,"title":"Solvents"},"temperatures":{"anyOf":[{"items":{"type":"number"},"type":"array"},{"type":"null"}],"default":null,"title":"Temperatures"},"name":{"default":"Solubility Workflow","title":"Name","type":"string"},"folder_uuid":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"title":"Folder Uuid"},"max_credits":{"anyOf":[{"type":"integer"},{"type":"null"}],"default":null,"title":"Max Credits"}},"required":["initial_smiles"],"type":"object"}},{"name":"submit_pka_workflow","description":"Submit a pKa prediction workflow using Rowan v2 API.\\n\\nPredicts acid dissociation constants (pKa) for ionizable groups in a molecule\\nusing quantum chemistry calculations.\\n\\nArgs:\\n    initial_molecule: SMILES string or molecule object\\n    pka_range: Tuple of (min, max) pKa values to search (default: (2, 12))\\n    deprotonate_elements: List of elements to consider for deprotonation\\n        (e.g., [\\"N\\", \\"O\\", \\"S\\"]). If None, uses defaults\\n    protonate_elements: List of elements to consider for protonation\\n        (e.g., [\\"N\\", \\"O\\"]). If None, uses defaults\\n    mode: Calculation mode (default: \\"careful\\")\\n        Options: \\"rapid\\", \\"careful\\", \\"meticulous\\"\\n    name: Workflow name for tracking\\n    folder_uuid: Optional folder UUID for organization\\n    max_credits: Optional credit limit for the calculation\\n    \\nReturns:\\n    Workflow object representing the submitted workflow\\n    \\nExample:\\n    # Basic pKa prediction\\n    result = submit_pka_workflow(\\n        initial_molecule=\\"CC(=O)O\\",\\n        pka_range=(2, 8)\\n    )\\n    \\n    # Specific elements with meticulous mode\\n    result = submit_pka_workflow(\\n        initial_molecule=\\"NC(C)C(=O)O\\",\\n        pka_range=(1, 14),\\n        deprotonate_elements=[\\"N\\", \\"O\\"],\\n        mode=\\"meticulous\\"\\n    )\\n","inputSchema":{"properties":{"initial_molecule":{"title":"Initial Molecule","type":"string"},"pka_range":{"default":[2,12],"maxItems":2,"minItems":2,"prefixItems":[{"type":"number"},{"type":"number"}],"title":"Pka Range","type":"array"},"deprotonate_elements":{"anyOf":[{"items":{"type":"string"},"type":"array"},{"type":"null"}],"default":null,"title":"Deprotonate Elements"},"protonate_elements":{"anyOf":[{"items":{"type":"string"},"type":"array"},{"type":"null"}],"default":null,"title":"Protonate Elements"},"mode":{"default":"careful","title":"Mode","type":"string"},"name":{"default":"pKa Workflow","title":"Name","type":"string"},"folder_uuid":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"title":"Folder Uuid"},"max_credits":{"anyOf":[{"type":"integer"},{"type":"null"}],"default":null,"title":"Max Credits"}},"required":["initial_molecule"],"type":"object"}},{"name":"submit_redox_potential_workflow","description":"Submit a redox potential calculation workflow using Rowan v2 API.\\n\\nCalculates reduction and/or oxidation potentials for a molecule using\\nquantum chemistry methods.\\n\\nArgs:\\n    initial_molecule: SMILES string or molecule object\\n    reduction: Whether to calculate reduction potential (default: False)\\n    oxidization: Whether to calculate oxidation potential (default: True)\\n    mode: Calculation mode (default: \\"rapid\\")\\n        Options: \\"rapid\\", \\"careful\\", \\"meticulous\\"\\n    name: Workflow name for tracking\\n    folder_uuid: Optional folder UUID for organization\\n    max_credits: Optional credit limit for the calculation\\n    \\nReturns:\\n    Workflow object representing the submitted workflow\\n    \\nExample:\\n    # Basic oxidation potential\\n    result = submit_redox_potential_workflow(\\n        initial_molecule=\\"CC1=CC=CC=C1\\",\\n        oxidization=True\\n    )\\n    \\n    # Both reduction and oxidation with careful mode\\n    result = submit_redox_potential_workflow(\\n        initial_molecule=\\"c1ccccc1\\",\\n        reduction=True,\\n        oxidization=True,\\n        mode=\\"careful\\"\\n    )\\n","inputSchema":{"properties":{"initial_molecule":{"title":"Initial Molecule","type":"string"},"reduction":{"default":false,"title":"Reduction","type":"boolean"},"oxidization":{"default":true,"title":"Oxidization","type":"boolean"},"mode":{"default":"rapid","title":"Mode","type":"string"},"name":{"default":"Redox Potential Workflow","title":"Name","type":"string"},"folder_uuid":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"title":"Folder Uuid"},"max_credits":{"anyOf":[{"type":"integer"},{"type":"null"}],"default":null,"title":"Max Credits"}},"required":["initial_molecule"],"type":"object"}},{"name":"submit_fukui_workflow","description":"Submit a Fukui indices calculation workflow using Rowan v2 API.\\n\\nCalculates Fukui indices to predict molecular reactivity at different sites.\\nFukui indices indicate susceptibility to nucleophilic/electrophilic attack.\\n\\nArgs:\\n    initial_molecule: SMILES string or molecule object\\n    optimization_method: Method for geometry optimization (default: \\"gfn2_xtb\\")\\n        Common options: \\"gfn2_xtb\\", \\"r2scan_3c\\", \\"aimnet2_wb97md3\\"\\n    fukui_method: Method for Fukui calculation (default: \\"gfn1_xtb\\")\\n        Common options: \\"gfn1_xtb\\", \\"gfn2_xtb\\"\\n    solvent_settings: Optional solvent configuration dictionary\\n        Example: {\\"solvent\\": \\"water\\", \\"model\\": \\"alpb\\"}\\n    name: Workflow name for tracking\\n    folder_uuid: Optional folder UUID for organization\\n    max_credits: Optional credit limit for the calculation\\n    \\nReturns:\\n    Workflow object representing the submitted workflow\\n    \\nExample:\\n    # Basic Fukui indices\\n    result = submit_fukui_workflow(\\n        initial_molecule=\\"CC(=O)O\\"\\n    )\\n    \\n    # With solvent and advanced methods\\n    result = submit_fukui_workflow(\\n        initial_molecule=\\"c1ccccc1N\\",\\n        optimization_method=\\"r2scan_3c\\",\\n        fukui_method=\\"gfn2_xtb\\",\\n        solvent_settings={\\"solvent\\": \\"water\\", \\"model\\": \\"alpb\\"}\\n    )\\n","inputSchema":{"properties":{"initial_molecule":{"title":"Initial Molecule","type":"string"},"optimization_method":{"default":"gfn2_xtb","title":"Optimization Method","type":"string"},"fukui_method":{"default":"gfn1_xtb","title":"Fukui Method","type":"string"},"solvent_settings":{"anyOf":[{"additionalProperties":true,"type":"object"},{"type":"null"}],"default":null,"title":"Solvent Settings"},"name":{"default":"Fukui Workflow","title":"Name","type":"string"},"folder_uuid":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"title":"Folder Uuid"},"max_credits":{"anyOf":[{"type":"integer"},{"type":"null"}],"default":null,"title":"Max Credits"}},"required":["initial_molecule"],"type":"object"}},{"name":"submit_tautomer_search_workflow","description":"Submit a tautomer search workflow using Rowan v2 API.\\n\\nSearches for different tautomeric forms of a molecule and evaluates their\\nrelative stabilities. Tautomers are structural isomers that readily interconvert.\\n\\nArgs:\\n    initial_molecule: SMILES string or molecule object\\n    mode: Search mode (default: \\"careful\\")\\n        Options: \\"rapid\\", \\"careful\\", \\"meticulous\\"\\n    name: Workflow name for tracking\\n    folder_uuid: Optional folder UUID for organization\\n    max_credits: Optional credit limit for the calculation\\n    \\nReturns:\\n    Workflow object representing the submitted workflow\\n    \\nExample:\\n    # Basic tautomer search\\n    result = submit_tautomer_search_workflow(\\n        initial_molecule=\\"CC(=O)CC(=O)C\\"\\n    )\\n    \\n    # Meticulous search for complex molecule\\n    result = submit_tautomer_search_workflow(\\n        initial_molecule=\\"c1ccc2c(c1)ncc(=O)[nH]2\\",\\n        mode=\\"meticulous\\"\\n    )\\n","inputSchema":{"properties":{"initial_molecule":{"title":"Initial Molecule","type":"string"},"mode":{"default":"careful","title":"Mode","type":"string"},"name":{"default":"Tautomer Search Workflow","title":"Name","type":"string"},"folder_uuid":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"title":"Folder Uuid"},"max_credits":{"anyOf":[{"type":"integer"},{"type":"null"}],"default":null,"title":"Max Credits"}},"required":["initial_molecule"],"type":"object"}},{"name":"submit_descriptors_workflow","description":"Submit a molecular descriptors calculation workflow using Rowan v2 API.\\n\\nCalculates a comprehensive set of molecular descriptors including:\\n- Physical properties (MW, logP, TPSA, etc.)\\n- Electronic properties (HOMO/LUMO, dipole moment, etc.)\\n- Structural features (rotatable bonds, H-bond donors/acceptors, etc.)\\n- Topological indices\\n\\nArgs:\\n    initial_molecule: SMILES string or molecule object\\n    name: Workflow name for tracking\\n    folder_uuid: Optional folder UUID for organization\\n    max_credits: Optional credit limit for the calculation\\n    \\nReturns:\\n    Workflow object representing the submitted workflow\\n    \\nExample:\\n    # Basic descriptor calculation\\n    result = submit_descriptors_workflow(\\n        initial_molecule=\\"CC(=O)Nc1ccc(O)cc1\\"\\n    )\\n    \\n    # For complex molecule\\n    result = submit_descriptors_workflow(\\n        initial_molecule=\\"CN1C=NC2=C1C(=O)N(C(=O)N2C)C\\",\\n        name=\\"Caffeine Descriptors\\"\\n    )\\n","inputSchema":{"properties":{"initial_molecule":{"title":"Initial Molecule","type":"string"},"name":{"default":"Descriptors Workflow","title":"Name","type":"string"},"folder_uuid":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"title":"Folder Uuid"},"max_credits":{"anyOf":[{"type":"integer"},{"type":"null"}],"default":null,"title":"Max Credits"}},"required":["initial_molecule"],"type":"object"}},{"name":"submit_scan_workflow","description":"Submit a potential energy surface scan workflow using Rowan v2 API.\\n\\nPerforms systematic scans along specified molecular coordinates (bonds, angles,\\nor dihedrals) to map the potential energy surface.\\n\\nArgs:\\n    initial_molecule: SMILES string or molecule object\\n    scan_settings: Dictionary specifying scan parameters\\n        Example: {\\n            \\"type\\": \\"dihedral\\",  # or \\"bond\\", \\"angle\\"\\n            \\"atoms\\": [0, 1, 2, 3],  # atom indices\\n            \\"start\\": -180,\\n            \\"stop\\": 180,\\n            \\"step\\": 10\\n        }\\n    calculation_engine: Computational engine (default: \\"omol25\\")\\n        Options: \\"omol25\\", \\"xtb\\", \\"psi4\\"\\n    calculation_method: Method for calculations (default: \\"uma_m_omol\\")\\n        Options depend on engine\\n    wavefront_propagation: Use wavefront optimization (default: True)\\n        Speeds up scans by using previous geometries as starting points\\n    name: Workflow name for tracking\\n    folder_uuid: Optional folder UUID for organization\\n    max_credits: Optional credit limit for the calculation\\n    \\nReturns:\\n    Workflow object representing the submitted workflow\\n    \\nExample:\\n    # Dihedral scan\\n    result = submit_scan_workflow(\\n        initial_molecule=\\"CC(C)CC\\",\\n        scan_settings={\\n            \\"type\\": \\"dihedral\\",\\n            \\"atoms\\": [0, 1, 2, 3],\\n            \\"start\\": -180,\\n            \\"stop\\": 180,\\n            \\"step\\": 15\\n        }\\n    )\\n    \\n    # Bond scan with advanced method\\n    result = submit_scan_workflow(\\n        initial_molecule=\\"CC\\",\\n        scan_settings={\\n            \\"type\\": \\"bond\\",\\n            \\"atoms\\": [0, 1],\\n            \\"start\\": 1.0,\\n            \\"stop\\": 2.5,\\n            \\"step\\": 0.1\\n        },\\n        calculation_method=\\"r2scan_3c\\"\\n    )\\n","inputSchema":{"properties":{"initial_molecule":{"title":"Initial Molecule","type":"string"},"scan_settings":{"anyOf":[{"additionalProperties":true,"type":"object"},{"type":"null"}],"default":null,"title":"Scan Settings"},"calculation_engine":{"default":"omol25","title":"Calculation Engine","type":"string"},"calculation_method":{"default":"uma_m_omol","title":"Calculation Method","type":"string"},"wavefront_propagation":{"default":true,"title":"Wavefront Propagation","type":"boolean"},"name":{"default":"Scan Workflow","title":"Name","type":"string"},"folder_uuid":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"title":"Folder Uuid"},"max_credits":{"anyOf":[{"type":"integer"},{"type":"null"}],"default":null,"title":"Max Credits"}},"required":["initial_molecule"],"type":"object"}},{"name":"submit_irc_workflow","description":"Submits an Intrinsic Reaction Coordinate (IRC) workflow to the API.\\n\\nArgs:\\n    initial_molecule: The initial molecule to perform the IRC calculation on.\\n        Can be a dict, StJamesMolecule, or RdkitMol object\\n    method: The computational method to use for the IRC calculation (default: \\"uma_m_omol\\")\\n        See list of available methods for options\\n    engine: The computational engine to use for the calculation (default: \\"omol25\\")\\n        See list of available engines\\n    preopt: Whether to perform a pre-optimization of the molecule (default: True)\\n    step_size: The step size to use for the IRC calculation (default: 0.05)\\n    max_irc_steps: The maximum number of IRC steps to perform (default: 30)\\n    name: The name of the workflow\\n    folder_uuid: The UUID of the folder to place the workflow in\\n    max_credits: The maximum number of credits to use for the workflow\\n    \\nReturns:\\n    Workflow object representing the submitted IRC workflow\\n    \\nExample:\\n    # Basic IRC calculation\\n    result = submit_irc_workflow(\\n        initial_molecule={\\"smiles\\": \\"[CH3].[CH3]\\"},\\n        method=\\"gfn2_xtb\\",\\n        max_irc_steps=50\\n    )\\n    \\n    # IRC with specific method and engine\\n    result = submit_irc_workflow(\\n        initial_molecule={\\"smiles\\": \\"CC(O)=CC\\"},\\n        method=\\"r2scan_3c\\",\\n        engine=\\"psi4\\",\\n        step_size=0.03\\n    )\\n","inputSchema":{"properties":{"initial_molecule":{"anyOf":[{"additionalProperties":true,"type":"object"},{},{"type":"null"}],"default":null,"title":"Initial Molecule"},"method":{"default":"uma_m_omol","title":"Method","type":"string"},"engine":{"default":"omol25","title":"Engine","type":"string"},"preopt":{"default":true,"title":"Preopt","type":"boolean"},"step_size":{"default":0.05,"title":"Step Size","type":"number"},"max_irc_steps":{"default":30,"title":"Max Irc Steps","type":"integer"},"name":{"default":"IRC Workflow","title":"Name","type":"string"},"folder_uuid":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"title":"Folder Uuid"},"max_credits":{"anyOf":[{"type":"integer"},{"type":"null"}],"default":null,"title":"Max Credits"}},"type":"object"}},{"name":"submit_protein_cofolding_workflow","description":"Submits a protein cofolding workflow to the API.\\n\\nArgs:\\n    initial_protein_sequences: The sequences of the proteins to be cofolded\\n    initial_smiles_list: A list of SMILES strings for the ligands to be cofolded with\\n    ligand_binding_affinity_index: The index of the ligand for which to compute the binding affinity\\n    use_msa_server: Whether to use the MSA server for the computation\\n    use_potentials: Whether to use potentials for the computation\\n    name: The name of the workflow\\n    model: The model to use for the computation\\n    folder_uuid: The UUID of the folder to store the workflow in\\n    max_credits: The maximum number of credits to use for the workflow\\n    \\nReturns:\\n    Workflow object representing the submitted workflow\\n    \\nExample:\\n    # Protein dimer cofolding\\n    result = submit_protein_cofolding_workflow(\\n        initial_protein_sequences=[\\n            \\"MKTAYIAKQRQISFVKSHFSRQLEERLGLIEVQAPILSRVGDGTQDNLSGAEK\\",\\n            \\"MKQHKAMIVALIVICITAVVAALVTRKDLCEVHIRTGQTEVAVF\\"\\n        ]\\n    )\\n    \\n    # Protein-ligand complex\\n    result = submit_protein_cofolding_workflow(\\n        initial_protein_sequences=[\\"MGSSHHHHHHSSGLVPRGSH\\"],\\n        initial_smiles_list=[\\"CC(=O)O\\", \\"CCO\\"],\\n        ligand_binding_affinity_index=0,\\n        use_msa_server=True\\n    )\\n","inputSchema":{"properties":{"initial_protein_sequences":{"items":{"type":"string"},"title":"Initial Protein Sequences","type":"array"},"initial_smiles_list":{"anyOf":[{"items":{"type":"string"},"type":"array"},{"type":"null"}],"default":null,"title":"Initial Smiles List"},"ligand_binding_affinity_index":{"anyOf":[{"type":"integer"},{"type":"null"}],"default":null,"title":"Ligand Binding Affinity Index"},"use_msa_server":{"default":true,"title":"Use Msa Server","type":"boolean"},"use_potentials":{"default":false,"title":"Use Potentials","type":"boolean"},"name":{"default":"Cofolding Workflow","title":"Name","type":"string"},"model":{"default":"boltz_2","title":"Model","type":"string"},"folder_uuid":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"title":"Folder Uuid"},"max_credits":{"anyOf":[{"type":"integer"},{"type":"null"}],"default":null,"title":"Max Credits"}},"required":["initial_protein_sequences"],"type":"object"}},{"name":"submit_docking_workflow","description":"Submits a Docking workflow to the API.\\n\\nArgs:\\n    protein: The protein to dock. Can be fed as a uuid or a Protein object\\n    pocket: The pocket to dock into\\n    initial_molecule: The initial molecule to be docked.\\n        Can be a dict, StJamesMolecule, or RdkitMol object\\n    do_csearch: Whether to perform a conformational search on the ligand\\n    do_optimization: Whether to perform an optimization on the ligand\\n    name: The name of the workflow\\n    folder_uuid: The UUID of the folder to place the workflow in\\n    max_credits: The maximum number of credits to use for the workflow\\n    \\nReturns:\\n    Workflow object representing the submitted workflow\\n    \\nExample:\\n    # Basic docking with protein UUID\\n    result = submit_docking_workflow(\\n        protein=\\"protein-uuid-123\\",\\n        pocket=pocket_obj,\\n        initial_molecule={\\"smiles\\": \\"CC(=O)Oc1ccccc1C(=O)O\\"}\\n    )\\n    \\n    # Docking with optimization disabled\\n    result = submit_docking_workflow(\\n        protein=protein_obj,\\n        pocket=pocket_obj,\\n        initial_molecule={\\"smiles\\": \\"CCO\\"},\\n        do_csearch=False,\\n        do_optimization=False\\n    )\\n","inputSchema":{"properties":{"protein":{"anyOf":[{"type":"string"},{}],"title":"Protein"},"pocket":{"title":"Pocket"},"initial_molecule":{"anyOf":[{"additionalProperties":true,"type":"object"},{},{"type":"null"}],"default":null,"title":"Initial Molecule"},"do_csearch":{"default":true,"title":"Do Csearch","type":"boolean"},"do_optimization":{"default":true,"title":"Do Optimization","type":"boolean"},"name":{"default":"Docking Workflow","title":"Name","type":"string"},"folder_uuid":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"title":"Folder Uuid"},"max_credits":{"anyOf":[{"type":"integer"},{"type":"null"}],"default":null,"title":"Max Credits"}},"required":["protein","pocket"],"type":"object"}},{"name":"workflow_fetch_latest","description":"Fetch the latest workflow data from the database.\\n\\nUpdates the workflow object with the most recent status and results.\\n\\nArgs:\\n    workflow_uuid: The UUID of the workflow to fetch\\n    in_place: Whether to update the workflow object in place (default: False)\\n    \\nReturns:\\n    Dictionary containing the updated workflow data including status and results\\n","inputSchema":{"properties":{"workflow_uuid":{"title":"Workflow Uuid","type":"string"},"in_place":{"default":false,"title":"In Place","type":"boolean"}},"required":["workflow_uuid"],"type":"object"}},{"name":"workflow_wait_for_result","description":"Wait for a workflow to complete and return the result.\\n\\nBlocks until the workflow completes, polling at specified intervals.\\n\\nArgs:\\n    workflow_uuid: The UUID of the workflow to wait for\\n    poll_interval: Time in seconds between status checks (default: 5)\\n    \\nReturns:\\n    Dictionary containing the completed workflow data including results\\n","inputSchema":{"properties":{"workflow_uuid":{"title":"Workflow Uuid","type":"string"},"poll_interval":{"default":5,"title":"Poll Interval","type":"integer"}},"required":["workflow_uuid"],"type":"object"}},{"name":"workflow_get_status","description":"Get the current status of a workflow.\\n\\nArgs:\\n    workflow_uuid: The UUID of the workflow\\n    \\nReturns:\\n    Dictionary with status information\\n","inputSchema":{"properties":{"workflow_uuid":{"title":"Workflow Uuid","type":"string"}},"required":["workflow_uuid"],"type":"object"}},{"name":"workflow_stop","description":"Stop a running workflow.\\n\\nArgs:\\n    workflow_uuid: The UUID of the workflow to stop\\n    \\nReturns:\\n    Dictionary with confirmation message\\n","inputSchema":{"properties":{"workflow_uuid":{"title":"Workflow Uuid","type":"string"}},"required":["workflow_uuid"],"type":"object"}},{"name":"workflow_delete","description":"Delete a workflow.\\n\\nThis permanently removes the workflow and its results from the database.\\n\\nArgs:\\n    workflow_uuid: The UUID of the workflow to delete\\n    \\nReturns:\\n    Dictionary with confirmation message\\n","inputSchema":{"properties":{"workflow_uuid":{"title":"Workflow Uuid","type":"string"}},"required":["workflow_uuid"],"type":"object"}},{"name":"retrieve_workflow","description":"Retrieve a workflow from the API.\\n\\nArgs:\\n    uuid: The UUID of the workflow to retrieve\\n    \\nReturns:\\n    Dictionary containing the complete workflow data\\n    \\nRaises:\\n    HTTPError: If the API request fails\\n","inputSchema":{"properties":{"uuid":{"title":"Uuid","type":"string"}},"required":["uuid"],"type":"object"}},{"name":"retrieve_calculation_molecules","description":"Retrieve a list of molecules from a calculation.\\n\\nArgs:\\n    uuid: The UUID of the calculation to retrieve molecules from\\n    \\nReturns:\\n    List of dictionaries representing the molecules in the calculation\\n    \\nRaises:\\n    HTTPError: If the API request fails\\n","inputSchema":{"properties":{"uuid":{"title":"Uuid","type":"string"}},"required":["uuid"],"type":"object"}},{"name":"list_workflows","description":"List workflows subject to the specified criteria.\\n\\nArgs:\\n    parent_uuid: The UUID of the parent folder\\n    name_contains: Substring to search for in workflow names\\n    public: Filter workflows by their public status\\n    starred: Filter workflows by their starred status\\n    status: Filter workflows by their status\\n    workflow_type: Filter workflows by their type\\n    page: The page number to retrieve (default: 0)\\n    size: The number of items per page (default: 10)\\n    \\nReturns:\\n    List of workflow dictionaries that match the search criteria\\n    \\nRaises:\\n    HTTPError: If the request to the API fails\\n","inputSchema":{"properties":{"parent_uuid":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"title":"Parent Uuid"},"name_contains":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"title":"Name Contains"},"public":{"anyOf":[{"type":"boolean"},{"type":"null"}],"default":null,"title":"Public"},"starred":{"anyOf":[{"type":"boolean"},{"type":"null"}],"default":null,"title":"Starred"},"status":{"anyOf":[{"type":"integer"},{"type":"null"}],"default":null,"title":"Status"},"workflow_type":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"title":"Workflow Type"},"page":{"default":0,"title":"Page","type":"integer"},"size":{"default":10,"title":"Size","type":"integer"}},"type":"object"}},{"name":"workflow_update","description":"Update workflow details.\\n\\nArgs:\\n    workflow_uuid: The UUID of the workflow to update\\n    name: New name for the workflow (optional)\\n    notes: New notes for the workflow (optional)\\n    starred: Whether to star/unstar the workflow (optional)\\n    public: Whether to make the workflow public/private (optional)\\n    \\nReturns:\\n    Dictionary with updated workflow information\\n","inputSchema":{"properties":{"workflow_uuid":{"title":"Workflow Uuid","type":"string"},"name":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"title":"Name"},"notes":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"title":"Notes"},"starred":{"anyOf":[{"type":"boolean"},{"type":"null"}],"default":null,"title":"Starred"},"public":{"anyOf":[{"type":"boolean"},{"type":"null"}],"default":null,"title":"Public"}},"required":["workflow_uuid"],"type":"object"}},{"name":"workflow_is_finished","description":"Check if a workflow is finished.\\n\\nArgs:\\n    workflow_uuid: The UUID of the workflow to check\\n    \\nReturns:\\n    Dictionary with workflow completion status\\n","inputSchema":{"properties":{"workflow_uuid":{"title":"Workflow Uuid","type":"string"}},"required":["workflow_uuid"],"type":"object"}},{"name":"workflow_delete_data","description":"Delete workflow data while keeping the workflow record.\\n\\nArgs:\\n    workflow_uuid: The UUID of the workflow\\n    \\nReturns:\\n    Dictionary with confirmation message\\n","inputSchema":{"properties":{"workflow_uuid":{"title":"Workflow Uuid","type":"string"}},"required":["workflow_uuid"],"type":"object"}}]}}\r\n\r\n'
2025-08-02 14:02:08,372 - mcp.server.sse - DEBUG - Handling POST message
2025-08-02 14:02:08,372 - mcp.server.sse - DEBUG - Parsed session ID: 37b07b7d-1d3f-456c-ab05-64fa6e6fba6d
2025-08-02 14:02:08,372 - mcp.server.sse - DEBUG - Received JSON: b'{"method":"prompts/list","jsonrpc":"2.0","id":4}'
2025-08-02 14:02:08,372 - mcp.server.sse - DEBUG - Validated client message: root=JSONRPCRequest(method='prompts/list', params=None, jsonrpc='2.0', id=4)
2025-08-02 14:02:08,372 - mcp.server.sse - DEBUG - Sending session message to writer: SessionMessage(message=JSONRPCMessage(root=JSONRPCRequest(method='prompts/list', params=None, jsonrpc='2.0', id=4)), metadata=ServerMessageMetadata(related_request_id=None, request_context=<starlette.requests.Request object at 0x10a1057f0>))
2025-08-02 14:02:08,372 - mcp.server.lowlevel.server - DEBUG - Received message: <mcp.shared.session.RequestResponder object at 0x10a02b7a0>
2025-08-02 14:02:08,373 - mcp.server.lowlevel.server - INFO - Processing request of type ListPromptsRequest
2025-08-02 14:02:08,373 - mcp.server.lowlevel.server - DEBUG - Dispatching request of type ListPromptsRequest
2025-08-02 14:02:08,373 - mcp.server.lowlevel.server - DEBUG - Response sent
2025-08-02 14:02:08,373 - mcp.server.sse - DEBUG - Sending message via SSE: SessionMessage(message=JSONRPCMessage(root=JSONRPCResponse(jsonrpc='2.0', id=4, result={'prompts': []})), metadata=None)
2025-08-02 14:02:08,373 - sse_starlette.sse - DEBUG - chunk: b'event: message\r\ndata: {"jsonrpc":"2.0","id":4,"result":{"prompts":[]}}\r\n\r\n'
2025-08-02 14:02:08,375 - mcp.server.sse - DEBUG - Handling POST message
2025-08-02 14:02:08,375 - mcp.server.sse - DEBUG - Parsed session ID: 37b07b7d-1d3f-456c-ab05-64fa6e6fba6d
2025-08-02 14:02:08,375 - mcp.server.sse - DEBUG - Received JSON: b'{"method":"prompts/list","jsonrpc":"2.0","id":5}'
2025-08-02 14:02:08,375 - mcp.server.sse - DEBUG - Validated client message: root=JSONRPCRequest(method='prompts/list', params=None, jsonrpc='2.0', id=5)
2025-08-02 14:02:08,375 - mcp.server.sse - DEBUG - Sending session message to writer: SessionMessage(message=JSONRPCMessage(root=JSONRPCRequest(method='prompts/list', params=None, jsonrpc='2.0', id=5)), metadata=ServerMessageMetadata(related_request_id=None, request_context=<starlette.requests.Request object at 0x10a106cc0>))
2025-08-02 14:02:08,376 - mcp.server.lowlevel.server - DEBUG - Received message: <mcp.shared.session.RequestResponder object at 0x10a0afaf0>
2025-08-02 14:02:08,376 - mcp.server.lowlevel.server - INFO - Processing request of type ListPromptsRequest
2025-08-02 14:02:08,376 - mcp.server.lowlevel.server - DEBUG - Dispatching request of type ListPromptsRequest
2025-08-02 14:02:08,376 - mcp.server.lowlevel.server - DEBUG - Response sent
2025-08-02 14:02:08,376 - mcp.server.sse - DEBUG - Sending message via SSE: SessionMessage(message=JSONRPCMessage(root=JSONRPCResponse(jsonrpc='2.0', id=5, result={'prompts': []})), metadata=None)
2025-08-02 14:02:08,376 - sse_starlette.sse - DEBUG - chunk: b'event: message\r\ndata: {"jsonrpc":"2.0","id":5,"result":{"prompts":[]}}\r\n\r\n'
2025-08-02 14:02:11,133 - sse_starlette.sse - DEBUG - Got event: http.disconnect. Stop streaming.
2025-08-02 14:02:11,134 - root - DEBUG - Client session disconnected 37b07b7d-1d3f-456c-ab05-64fa6e6fba6d
2025-08-02 14:02:13,041 - mcp.server.sse - DEBUG - Setting up SSE connection
2025-08-02 14:02:13,041 - mcp.server.sse - DEBUG - Created new session with ID: ecdaefbf-d9a6-4d2b-81ed-fab73c158e7b
2025-08-02 14:02:13,041 - mcp.server.sse - DEBUG - Starting SSE response task
2025-08-02 14:02:13,041 - mcp.server.sse - DEBUG - Yielding read and write streams
2025-08-02 14:02:13,043 - mcp.server.sse - DEBUG - Starting SSE writer
2025-08-02 14:02:13,043 - mcp.server.sse - DEBUG - Sent endpoint event: /messages/?session_id=ecdaefbfd9a64d2b81edfab73c158e7b
2025-08-02 14:02:13,043 - sse_starlette.sse - DEBUG - chunk: b'event: endpoint\r\ndata: /messages/?session_id=ecdaefbfd9a64d2b81edfab73c158e7b\r\n\r\n'
2025-08-02 14:02:13,047 - mcp.server.sse - DEBUG - Handling POST message
2025-08-02 14:02:13,047 - mcp.server.sse - DEBUG - Parsed session ID: ecdaefbf-d9a6-4d2b-81ed-fab73c158e7b
2025-08-02 14:02:13,047 - mcp.server.sse - DEBUG - Received JSON: b'{"method":"initialize","params":{"protocolVersion":"2025-06-18","capabilities":{"tools":true,"prompts":true,"resources":false,"logging":false,"roots":{"listChanged":false}},"clientInfo":{"name":"cursor-vscode","version":"1.0.0"}},"jsonrpc":"2.0","id":1}'
2025-08-02 14:02:13,047 - mcp.server.sse - DEBUG - Validated client message: root=JSONRPCRequest(method='initialize', params={'protocolVersion': '2025-06-18', 'capabilities': {'tools': True, 'prompts': True, 'resources': False, 'logging': False, 'roots': {'listChanged': False}}, 'clientInfo': {'name': 'cursor-vscode', 'version': '1.0.0'}}, jsonrpc='2.0', id=1)
2025-08-02 14:02:13,047 - mcp.server.sse - DEBUG - Sending session message to writer: SessionMessage(message=JSONRPCMessage(root=JSONRPCRequest(method='initialize', params={'protocolVersion': '2025-06-18', 'capabilities': {'tools': True, 'prompts': True, 'resources': False, 'logging': False, 'roots': {'listChanged': False}}, 'clientInfo': {'name': 'cursor-vscode', 'version': '1.0.0'}}, jsonrpc='2.0', id=1)), metadata=ServerMessageMetadata(related_request_id=None, request_context=<starlette.requests.Request object at 0x10a106f90>))
2025-08-02 14:02:13,048 - mcp.server.sse - DEBUG - Sending message via SSE: SessionMessage(message=JSONRPCMessage(root=JSONRPCResponse(jsonrpc='2.0', id=1, result={'protocolVersion': '2025-03-26', 'capabilities': {'experimental': {}, 'prompts': {'listChanged': False}, 'resources': {'subscribe': False, 'listChanged': False}, 'tools': {'listChanged': False}}, 'serverInfo': {'name': 'Rowan MCP Server', 'version': '1.9.3'}})), metadata=None)
2025-08-02 14:02:13,048 - sse_starlette.sse - DEBUG - chunk: b'event: message\r\ndata: {"jsonrpc":"2.0","id":1,"result":{"protocolVersion":"2025-03-26","capabilities":{"experimental":{},"prompts":{"listChanged":false},"resources":{"subscribe":false,"listChanged":false},"tools":{"listChanged":false}},"serverInfo":{"name":"Rowan MCP Server","version":"1.9.3"}}}\r\n\r\n'
2025-08-02 14:02:13,087 - mcp.server.sse - DEBUG - Handling POST message
2025-08-02 14:02:13,090 - mcp.server.sse - DEBUG - Parsed session ID: ecdaefbf-d9a6-4d2b-81ed-fab73c158e7b
2025-08-02 14:02:13,091 - mcp.server.sse - DEBUG - Received JSON: b'{"method":"notifications/initialized","jsonrpc":"2.0"}'
2025-08-02 14:02:13,092 - mcp.server.sse - DEBUG - Validated client message: root=JSONRPCNotification(method='notifications/initialized', params=None, jsonrpc='2.0')
2025-08-02 14:02:13,093 - mcp.server.sse - DEBUG - Sending session message to writer: SessionMessage(message=JSONRPCMessage(root=JSONRPCNotification(method='notifications/initialized', params=None, jsonrpc='2.0')), metadata=ServerMessageMetadata(related_request_id=None, request_context=<starlette.requests.Request object at 0x10a105a30>))
2025-08-02 14:02:13,094 - mcp.server.lowlevel.server - DEBUG - Received message: root=InitializedNotification(method='notifications/initialized', params=None, jsonrpc='2.0')
2025-08-02 14:02:13,099 - mcp.server.sse - DEBUG - Handling POST message
2025-08-02 14:02:13,099 - mcp.server.sse - DEBUG - Parsed session ID: ecdaefbf-d9a6-4d2b-81ed-fab73c158e7b
2025-08-02 14:02:13,099 - mcp.server.sse - DEBUG - Received JSON: b'{"method":"tools/list","jsonrpc":"2.0","id":2}'
2025-08-02 14:02:13,099 - mcp.server.sse - DEBUG - Validated client message: root=JSONRPCRequest(method='tools/list', params=None, jsonrpc='2.0', id=2)
2025-08-02 14:02:13,099 - mcp.server.sse - DEBUG - Sending session message to writer: SessionMessage(message=JSONRPCMessage(root=JSONRPCRequest(method='tools/list', params=None, jsonrpc='2.0', id=2)), metadata=ServerMessageMetadata(related_request_id=None, request_context=<starlette.requests.Request object at 0x10a107020>))
2025-08-02 14:02:13,099 - mcp.server.sse - DEBUG - Handling POST message
2025-08-02 14:02:13,099 - mcp.server.sse - DEBUG - Parsed session ID: ecdaefbf-d9a6-4d2b-81ed-fab73c158e7b
2025-08-02 14:02:13,099 - mcp.server.sse - DEBUG - Received JSON: b'{"method":"tools/list","jsonrpc":"2.0","id":3}'
2025-08-02 14:02:13,099 - mcp.server.sse - DEBUG - Validated client message: root=JSONRPCRequest(method='tools/list', params=None, jsonrpc='2.0', id=3)
2025-08-02 14:02:13,100 - mcp.server.sse - DEBUG - Sending session message to writer: SessionMessage(message=JSONRPCMessage(root=JSONRPCRequest(method='tools/list', params=None, jsonrpc='2.0', id=3)), metadata=ServerMessageMetadata(related_request_id=None, request_context=<starlette.requests.Request object at 0x10a105a30>))
2025-08-02 14:02:13,100 - mcp.server.lowlevel.server - DEBUG - Received message: <mcp.shared.session.RequestResponder object at 0x10a0a1b20>
2025-08-02 14:02:13,100 - mcp.server.lowlevel.server - INFO - Processing request of type ListToolsRequest
2025-08-02 14:02:13,100 - mcp.server.lowlevel.server - DEBUG - Dispatching request of type ListToolsRequest
2025-08-02 14:02:13,103 - mcp.server.lowlevel.server - DEBUG - Response sent
2025-08-02 14:02:13,103 - mcp.server.lowlevel.server - DEBUG - Received message: <mcp.shared.session.RequestResponder object at 0x10a027e90>
2025-08-02 14:02:13,106 - mcp.server.sse - DEBUG - Sending message via SSE: SessionMessage(message=JSONRPCMessage(root=JSONRPCResponse(jsonrpc='2.0', id=2, result={'tools': [{'name': 'submit_basic_calculation_workflow', 'description': 'Submit a basic calculation workflow using Rowan v2 API.\n\nPerforms fundamental quantum chemistry calculations with configurable methods\nand computational tasks. Returns a workflow object for tracking progress.\n', 'inputSchema': {'properties': {'initial_molecule': {'anyOf': [{'type': 'string'}, {'additionalProperties': True, 'type': 'object'}, {}], 'description': 'The molecule to perform the calculation on. Can be a SMILES string, dict, StJamesMolecule, or RdkitMol object', 'title': 'Initial Molecule'}, 'method': {'default': 'uma_m_omol', 'description': "The method to use for the calculation (e.g., 'uma_m_omol', 'gfn2-xtb', 'r2scan_3c')", 'title': 'Method', 'type': 'string'}, 'tasks': {'anyOf': [{'items': {'type': 'string'}, 'type': 'array'}, {'type': 'null'}], 'default': None, 'description': "List of computational tasks to perform. Optional[List[str]] (e.g. ['optimize']), Defaults to None", 'title': 'Tasks'}, 'mode': {'default': 'auto', 'description': "The mode to run the calculation in ('auto', 'rapid', 'careful', 'meticulous')", 'title': 'Mode', 'type': 'string'}, 'engine': {'default': 'omol25', 'description': "The computational engine to use ('omol25', 'xtb', 'psi4')", 'title': 'Engine', 'type': 'string'}, 'name': {'default': 'Basic Calculation Workflow', 'description': 'The name of the workflow for identification', 'title': 'Name', 'type': 'string'}, 'folder_uuid': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'UUID of the folder to place the workflow in (optional)', 'title': 'Folder Uuid'}, 'max_credits': {'anyOf': [{'type': 'integer'}, {'type': 'null'}], 'default': None, 'description': 'Maximum number of credits to use for the workflow (optional)', 'title': 'Max Credits'}}, 'required': ['initial_molecule'], 'type': 'object'}}, {'name': 'submit_conformer_search_workflow', 'description': 'Submit a conformer search workflow using Rowan v2 API.\n\nExplores the conformational space of a molecule to find low-energy structures.\n\nArgs:\n    initial_molecule: SMILES string or molecule object\n    conf_gen_mode: default to "rapid"\n        Options: "rapid", "careful", "meticulous"\n    final_method: default: "aimnet2_wb97md3"\n        Try other options, if user specifies\n    solvent: Optional solvent for implicit solvation (e.g., "water", "ethanol")\n    transition_state: Whether searching for transition state conformers (default: False)\n    name: Workflow name for tracking\n    folder_uuid: Optional folder UUID for organization\n    max_credits: Optional credit limit for the calculation\n    \nReturns:\n    Workflow object representing the submitted workflow\n    \nExample:\n    # Basic conformer search\n    result = submit_conformer_search_workflow(\n        initial_molecule="CCCC",\n        conf_gen_mode="rapid"\n    )\n    \n    # Careful search with solvent\n    result = submit_conformer_search_workflow(\n        initial_molecule="CC(C)CC(=O)O",\n        conf_gen_mode="careful",\n        solvent="water",\n        final_method="r2scan_3c"\n    )\n', 'inputSchema': {'properties': {'initial_molecule': {'title': 'Initial Molecule', 'type': 'string'}, 'conf_gen_mode': {'default': 'rapid', 'title': 'Conf Gen Mode', 'type': 'string'}, 'final_method': {'default': 'aimnet2_wb97md3', 'title': 'Final Method', 'type': 'string'}, 'solvent': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Solvent'}, 'transition_state': {'default': False, 'title': 'Transition State', 'type': 'boolean'}, 'name': {'default': 'Conformer Search Workflow', 'title': 'Name', 'type': 'string'}, 'folder_uuid': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Folder Uuid'}, 'max_credits': {'anyOf': [{'type': 'integer'}, {'type': 'null'}], 'default': None, 'title': 'Max Credits'}}, 'required': ['initial_molecule'], 'type': 'object'}}, {'name': 'submit_solubility_workflow', 'description': 'Submit a solubility prediction workflow using Rowan v2 API.\n\nPredicts solubility (log S) of a molecule in multiple solvents at various temperatures\nusing machine learning models.\n\nArgs:\n    initial_smiles: SMILES string of the molecule\n    solvents: List of solvents as SMILES or common names (e.g., ["water", "ethanol"])\n        If None, uses default solvents\n    temperatures: List of temperatures in Kelvin\n        If None, uses default temperature range\n    name: Workflow name for tracking\n    folder_uuid: Optional folder UUID for organization\n    max_credits: Optional credit limit for the calculation\n    \nReturns:\n    Workflow object representing the submitted workflow\n    \nExample:\n    # Basic solubility prediction\n    result = submit_solubility_workflow(\n        initial_smiles="CC(=O)Nc1ccc(O)cc1",\n        solvents=["water", "ethanol"],\n        temperatures=[298.15, 310.15]\n    )\n    \n    # With SMILES solvents\n    result = submit_solubility_workflow(\n        initial_smiles="CC(=O)O",\n        solvents=["O", "CCO", "CCCCCC"],\n        temperatures=[273.15, 298.15, 323.15]\n    )\n', 'inputSchema': {'properties': {'initial_smiles': {'title': 'Initial Smiles', 'type': 'string'}, 'solvents': {'anyOf': [{'items': {'type': 'string'}, 'type': 'array'}, {'type': 'null'}], 'default': None, 'title': 'Solvents'}, 'temperatures': {'anyOf': [{'items': {'type': 'number'}, 'type': 'array'}, {'type': 'null'}], 'default': None, 'title': 'Temperatures'}, 'name': {'default': 'Solubility Workflow', 'title': 'Name', 'type': 'string'}, 'folder_uuid': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Folder Uuid'}, 'max_credits': {'anyOf': [{'type': 'integer'}, {'type': 'null'}], 'default': None, 'title': 'Max Credits'}}, 'required': ['initial_smiles'], 'type': 'object'}}, {'name': 'submit_pka_workflow', 'description': 'Submit a pKa prediction workflow using Rowan v2 API.\n\nPredicts acid dissociation constants (pKa) for ionizable groups in a molecule\nusing quantum chemistry calculations.\n\nArgs:\n    initial_molecule: SMILES string or molecule object\n    pka_range: Tuple of (min, max) pKa values to search (default: (2, 12))\n    deprotonate_elements: List of elements to consider for deprotonation\n        (e.g., ["N", "O", "S"]). If None, uses defaults\n    protonate_elements: List of elements to consider for protonation\n        (e.g., ["N", "O"]). If None, uses defaults\n    mode: Calculation mode (default: "careful")\n        Options: "rapid", "careful", "meticulous"\n    name: Workflow name for tracking\n    folder_uuid: Optional folder UUID for organization\n    max_credits: Optional credit limit for the calculation\n    \nReturns:\n    Workflow object representing the submitted workflow\n    \nExample:\n    # Basic pKa prediction\n    result = submit_pka_workflow(\n        initial_molecule="CC(=O)O",\n        pka_range=(2, 8)\n    )\n    \n    # Specific elements with meticulous mode\n    result = submit_pka_workflow(\n        initial_molecule="NC(C)C(=O)O",\n        pka_range=(1, 14),\n        deprotonate_elements=["N", "O"],\n        mode="meticulous"\n    )\n', 'inputSchema': {'properties': {'initial_molecule': {'title': 'Initial Molecule', 'type': 'string'}, 'pka_range': {'default': [2, 12], 'maxItems': 2, 'minItems': 2, 'prefixItems': [{'type': 'number'}, {'type': 'number'}], 'title': 'Pka Range', 'type': 'array'}, 'deprotonate_elements': {'anyOf': [{'items': {'type': 'string'}, 'type': 'array'}, {'type': 'null'}], 'default': None, 'title': 'Deprotonate Elements'}, 'protonate_elements': {'anyOf': [{'items': {'type': 'string'}, 'type': 'array'}, {'type': 'null'}], 'default': None, 'title': 'Protonate Elements'}, 'mode': {'default': 'careful', 'title': 'Mode', 'type': 'string'}, 'name': {'default': 'pKa Workflow', 'title': 'Name', 'type': 'string'}, 'folder_uuid': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Folder Uuid'}, 'max_credits': {'anyOf': [{'type': 'integer'}, {'type': 'null'}], 'default': None, 'title': 'Max Credits'}}, 'required': ['initial_molecule'], 'type': 'object'}}, {'name': 'submit_redox_potential_workflow', 'description': 'Submit a redox potential calculation workflow using Rowan v2 API.\n\nCalculates reduction and/or oxidation potentials for a molecule using\nquantum chemistry methods.\n\nArgs:\n    initial_molecule: SMILES string or molecule object\n    reduction: Whether to calculate reduction potential (default: False)\n    oxidization: Whether to calculate oxidation potential (default: True)\n    mode: Calculation mode (default: "rapid")\n        Options: "rapid", "careful", "meticulous"\n    name: Workflow name for tracking\n    folder_uuid: Optional folder UUID for organization\n    max_credits: Optional credit limit for the calculation\n    \nReturns:\n    Workflow object representing the submitted workflow\n    \nExample:\n    # Basic oxidation potential\n    result = submit_redox_potential_workflow(\n        initial_molecule="CC1=CC=CC=C1",\n        oxidization=True\n    )\n    \n    # Both reduction and oxidation with careful mode\n    result = submit_redox_potential_workflow(\n        initial_molecule="c1ccccc1",\n        reduction=True,\n        oxidization=True,\n        mode="careful"\n    )\n', 'inputSchema': {'properties': {'initial_molecule': {'title': 'Initial Molecule', 'type': 'string'}, 'reduction': {'default': False, 'title': 'Reduction', 'type': 'boolean'}, 'oxidization': {'default': True, 'title': 'Oxidization', 'type': 'boolean'}, 'mode': {'default': 'rapid', 'title': 'Mode', 'type': 'string'}, 'name': {'default': 'Redox Potential Workflow', 'title': 'Name', 'type': 'string'}, 'folder_uuid': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Folder Uuid'}, 'max_credits': {'anyOf': [{'type': 'integer'}, {'type': 'null'}], 'default': None, 'title': 'Max Credits'}}, 'required': ['initial_molecule'], 'type': 'object'}}, {'name': 'submit_fukui_workflow', 'description': 'Submit a Fukui indices calculation workflow using Rowan v2 API.\n\nCalculates Fukui indices to predict molecular reactivity at different sites.\nFukui indices indicate susceptibility to nucleophilic/electrophilic attack.\n\nArgs:\n    initial_molecule: SMILES string or molecule object\n    optimization_method: Method for geometry optimization (default: "gfn2_xtb")\n        Common options: "gfn2_xtb", "r2scan_3c", "aimnet2_wb97md3"\n    fukui_method: Method for Fukui calculation (default: "gfn1_xtb")\n        Common options: "gfn1_xtb", "gfn2_xtb"\n    solvent_settings: Optional solvent configuration dictionary\n        Example: {"solvent": "water", "model": "alpb"}\n    name: Workflow name for tracking\n    folder_uuid: Optional folder UUID for organization\n    max_credits: Optional credit limit for the calculation\n    \nReturns:\n    Workflow object representing the submitted workflow\n    \nExample:\n    # Basic Fukui indices\n    result = submit_fukui_workflow(\n        initial_molecule="CC(=O)O"\n    )\n    \n    # With solvent and advanced methods\n    result = submit_fukui_workflow(\n        initial_molecule="c1ccccc1N",\n        optimization_method="r2scan_3c",\n        fukui_method="gfn2_xtb",\n        solvent_settings={"solvent": "water", "model": "alpb"}\n    )\n', 'inputSchema': {'properties': {'initial_molecule': {'title': 'Initial Molecule', 'type': 'string'}, 'optimization_method': {'default': 'gfn2_xtb', 'title': 'Optimization Method', 'type': 'string'}, 'fukui_method': {'default': 'gfn1_xtb', 'title': 'Fukui Method', 'type': 'string'}, 'solvent_settings': {'anyOf': [{'additionalProperties': True, 'type': 'object'}, {'type': 'null'}], 'default': None, 'title': 'Solvent Settings'}, 'name': {'default': 'Fukui Workflow', 'title': 'Name', 'type': 'string'}, 'folder_uuid': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Folder Uuid'}, 'max_credits': {'anyOf': [{'type': 'integer'}, {'type': 'null'}], 'default': None, 'title': 'Max Credits'}}, 'required': ['initial_molecule'], 'type': 'object'}}, {'name': 'submit_tautomer_search_workflow', 'description': 'Submit a tautomer search workflow using Rowan v2 API.\n\nSearches for different tautomeric forms of a molecule and evaluates their\nrelative stabilities. Tautomers are structural isomers that readily interconvert.\n\nArgs:\n    initial_molecule: SMILES string or molecule object\n    mode: Search mode (default: "careful")\n        Options: "rapid", "careful", "meticulous"\n    name: Workflow name for tracking\n    folder_uuid: Optional folder UUID for organization\n    max_credits: Optional credit limit for the calculation\n    \nReturns:\n    Workflow object representing the submitted workflow\n    \nExample:\n    # Basic tautomer search\n    result = submit_tautomer_search_workflow(\n        initial_molecule="CC(=O)CC(=O)C"\n    )\n    \n    # Meticulous search for complex molecule\n    result = submit_tautomer_search_workflow(\n        initial_molecule="c1ccc2c(c1)ncc(=O)[nH]2",\n        mode="meticulous"\n    )\n', 'inputSchema': {'properties': {'initial_molecule': {'title': 'Initial Molecule', 'type': 'string'}, 'mode': {'default': 'careful', 'title': 'Mode', 'type': 'string'}, 'name': {'default': 'Tautomer Search Workflow', 'title': 'Name', 'type': 'string'}, 'folder_uuid': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Folder Uuid'}, 'max_credits': {'anyOf': [{'type': 'integer'}, {'type': 'null'}], 'default': None, 'title': 'Max Credits'}}, 'required': ['initial_molecule'], 'type': 'object'}}, {'name': 'submit_descriptors_workflow', 'description': 'Submit a molecular descriptors calculation workflow using Rowan v2 API.\n\nCalculates a comprehensive set of molecular descriptors including:\n- Physical properties (MW, logP, TPSA, etc.)\n- Electronic properties (HOMO/LUMO, dipole moment, etc.)\n- Structural features (rotatable bonds, H-bond donors/acceptors, etc.)\n- Topological indices\n\nArgs:\n    initial_molecule: SMILES string or molecule object\n    name: Workflow name for tracking\n    folder_uuid: Optional folder UUID for organization\n    max_credits: Optional credit limit for the calculation\n    \nReturns:\n    Workflow object representing the submitted workflow\n    \nExample:\n    # Basic descriptor calculation\n    result = submit_descriptors_workflow(\n        initial_molecule="CC(=O)Nc1ccc(O)cc1"\n    )\n    \n    # For complex molecule\n    result = submit_descriptors_workflow(\n        initial_molecule="CN1C=NC2=C1C(=O)N(C(=O)N2C)C",\n        name="Caffeine Descriptors"\n    )\n', 'inputSchema': {'properties': {'initial_molecule': {'title': 'Initial Molecule', 'type': 'string'}, 'name': {'default': 'Descriptors Workflow', 'title': 'Name', 'type': 'string'}, 'folder_uuid': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Folder Uuid'}, 'max_credits': {'anyOf': [{'type': 'integer'}, {'type': 'null'}], 'default': None, 'title': 'Max Credits'}}, 'required': ['initial_molecule'], 'type': 'object'}}, {'name': 'submit_scan_workflow', 'description': 'Submit a potential energy surface scan workflow using Rowan v2 API.\n\nPerforms systematic scans along specified molecular coordinates (bonds, angles,\nor dihedrals) to map the potential energy surface.\n\nArgs:\n    initial_molecule: SMILES string or molecule object\n    scan_settings: Dictionary specifying scan parameters\n        Example: {\n            "type": "dihedral",  # or "bond", "angle"\n            "atoms": [0, 1, 2, 3],  # atom indices\n            "start": -180,\n            "stop": 180,\n            "step": 10\n        }\n    calculation_engine: Computational engine (default: "omol25")\n        Options: "omol25", "xtb", "psi4"\n    calculation_method: Method for calculations (default: "uma_m_omol")\n        Options depend on engine\n    wavefront_propagation: Use wavefront optimization (default: True)\n        Speeds up scans by using previous geometries as starting points\n    name: Workflow name for tracking\n    folder_uuid: Optional folder UUID for organization\n    max_credits: Optional credit limit for the calculation\n    \nReturns:\n    Workflow object representing the submitted workflow\n    \nExample:\n    # Dihedral scan\n    result = submit_scan_workflow(\n        initial_molecule="CC(C)CC",\n        scan_settings={\n            "type": "dihedral",\n            "atoms": [0, 1, 2, 3],\n            "start": -180,\n            "stop": 180,\n            "step": 15\n        }\n    )\n    \n    # Bond scan with advanced method\n    result = submit_scan_workflow(\n        initial_molecule="CC",\n        scan_settings={\n            "type": "bond",\n            "atoms": [0, 1],\n            "start": 1.0,\n            "stop": 2.5,\n            "step": 0.1\n        },\n        calculation_method="r2scan_3c"\n    )\n', 'inputSchema': {'properties': {'initial_molecule': {'title': 'Initial Molecule', 'type': 'string'}, 'scan_settings': {'anyOf': [{'additionalProperties': True, 'type': 'object'}, {'type': 'null'}], 'default': None, 'title': 'Scan Settings'}, 'calculation_engine': {'default': 'omol25', 'title': 'Calculation Engine', 'type': 'string'}, 'calculation_method': {'default': 'uma_m_omol', 'title': 'Calculation Method', 'type': 'string'}, 'wavefront_propagation': {'default': True, 'title': 'Wavefront Propagation', 'type': 'boolean'}, 'name': {'default': 'Scan Workflow', 'title': 'Name', 'type': 'string'}, 'folder_uuid': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Folder Uuid'}, 'max_credits': {'anyOf': [{'type': 'integer'}, {'type': 'null'}], 'default': None, 'title': 'Max Credits'}}, 'required': ['initial_molecule'], 'type': 'object'}}, {'name': 'submit_irc_workflow', 'description': 'Submits an Intrinsic Reaction Coordinate (IRC) workflow to the API.\n\nArgs:\n    initial_molecule: The initial molecule to perform the IRC calculation on.\n        Can be a dict, StJamesMolecule, or RdkitMol object\n    method: The computational method to use for the IRC calculation (default: "uma_m_omol")\n        See list of available methods for options\n    engine: The computational engine to use for the calculation (default: "omol25")\n        See list of available engines\n    preopt: Whether to perform a pre-optimization of the molecule (default: True)\n    step_size: The step size to use for the IRC calculation (default: 0.05)\n    max_irc_steps: The maximum number of IRC steps to perform (default: 30)\n    name: The name of the workflow\n    folder_uuid: The UUID of the folder to place the workflow in\n    max_credits: The maximum number of credits to use for the workflow\n    \nReturns:\n    Workflow object representing the submitted IRC workflow\n    \nExample:\n    # Basic IRC calculation\n    result = submit_irc_workflow(\n        initial_molecule={"smiles": "[CH3].[CH3]"},\n        method="gfn2_xtb",\n        max_irc_steps=50\n    )\n    \n    # IRC with specific method and engine\n    result = submit_irc_workflow(\n        initial_molecule={"smiles": "CC(O)=CC"},\n        method="r2scan_3c",\n        engine="psi4",\n        step_size=0.03\n    )\n', 'inputSchema': {'properties': {'initial_molecule': {'anyOf': [{'additionalProperties': True, 'type': 'object'}, {}, {'type': 'null'}], 'default': None, 'title': 'Initial Molecule'}, 'method': {'default': 'uma_m_omol', 'title': 'Method', 'type': 'string'}, 'engine': {'default': 'omol25', 'title': 'Engine', 'type': 'string'}, 'preopt': {'default': True, 'title': 'Preopt', 'type': 'boolean'}, 'step_size': {'default': 0.05, 'title': 'Step Size', 'type': 'number'}, 'max_irc_steps': {'default': 30, 'title': 'Max Irc Steps', 'type': 'integer'}, 'name': {'default': 'IRC Workflow', 'title': 'Name', 'type': 'string'}, 'folder_uuid': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Folder Uuid'}, 'max_credits': {'anyOf': [{'type': 'integer'}, {'type': 'null'}], 'default': None, 'title': 'Max Credits'}}, 'type': 'object'}}, {'name': 'submit_protein_cofolding_workflow', 'description': 'Submits a protein cofolding workflow to the API.\n\nArgs:\n    initial_protein_sequences: The sequences of the proteins to be cofolded\n    initial_smiles_list: A list of SMILES strings for the ligands to be cofolded with\n    ligand_binding_affinity_index: The index of the ligand for which to compute the binding affinity\n    use_msa_server: Whether to use the MSA server for the computation\n    use_potentials: Whether to use potentials for the computation\n    name: The name of the workflow\n    model: The model to use for the computation\n    folder_uuid: The UUID of the folder to store the workflow in\n    max_credits: The maximum number of credits to use for the workflow\n    \nReturns:\n    Workflow object representing the submitted workflow\n    \nExample:\n    # Protein dimer cofolding\n    result = submit_protein_cofolding_workflow(\n        initial_protein_sequences=[\n            "MKTAYIAKQRQISFVKSHFSRQLEERLGLIEVQAPILSRVGDGTQDNLSGAEK",\n            "MKQHKAMIVALIVICITAVVAALVTRKDLCEVHIRTGQTEVAVF"\n        ]\n    )\n    \n    # Protein-ligand complex\n    result = submit_protein_cofolding_workflow(\n        initial_protein_sequences=["MGSSHHHHHHSSGLVPRGSH"],\n        initial_smiles_list=["CC(=O)O", "CCO"],\n        ligand_binding_affinity_index=0,\n        use_msa_server=True\n    )\n', 'inputSchema': {'properties': {'initial_protein_sequences': {'items': {'type': 'string'}, 'title': 'Initial Protein Sequences', 'type': 'array'}, 'initial_smiles_list': {'anyOf': [{'items': {'type': 'string'}, 'type': 'array'}, {'type': 'null'}], 'default': None, 'title': 'Initial Smiles List'}, 'ligand_binding_affinity_index': {'anyOf': [{'type': 'integer'}, {'type': 'null'}], 'default': None, 'title': 'Ligand Binding Affinity Index'}, 'use_msa_server': {'default': True, 'title': 'Use Msa Server', 'type': 'boolean'}, 'use_potentials': {'default': False, 'title': 'Use Potentials', 'type': 'boolean'}, 'name': {'default': 'Cofolding Workflow', 'title': 'Name', 'type': 'string'}, 'model': {'default': 'boltz_2', 'title': 'Model', 'type': 'string'}, 'folder_uuid': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Folder Uuid'}, 'max_credits': {'anyOf': [{'type': 'integer'}, {'type': 'null'}], 'default': None, 'title': 'Max Credits'}}, 'required': ['initial_protein_sequences'], 'type': 'object'}}, {'name': 'submit_docking_workflow', 'description': 'Submits a Docking workflow to the API.\n\nArgs:\n    protein: The protein to dock. Can be fed as a uuid or a Protein object\n    pocket: The pocket to dock into\n    initial_molecule: The initial molecule to be docked.\n        Can be a dict, StJamesMolecule, or RdkitMol object\n    do_csearch: Whether to perform a conformational search on the ligand\n    do_optimization: Whether to perform an optimization on the ligand\n    name: The name of the workflow\n    folder_uuid: The UUID of the folder to place the workflow in\n    max_credits: The maximum number of credits to use for the workflow\n    \nReturns:\n    Workflow object representing the submitted workflow\n    \nExample:\n    # Basic docking with protein UUID\n    result = submit_docking_workflow(\n        protein="protein-uuid-123",\n        pocket=pocket_obj,\n        initial_molecule={"smiles": "CC(=O)Oc1ccccc1C(=O)O"}\n    )\n    \n    # Docking with optimization disabled\n    result = submit_docking_workflow(\n        protein=protein_obj,\n        pocket=pocket_obj,\n        initial_molecule={"smiles": "CCO"},\n        do_csearch=False,\n        do_optimization=False\n    )\n', 'inputSchema': {'properties': {'protein': {'anyOf': [{'type': 'string'}, {}], 'title': 'Protein'}, 'pocket': {'title': 'Pocket'}, 'initial_molecule': {'anyOf': [{'additionalProperties': True, 'type': 'object'}, {}, {'type': 'null'}], 'default': None, 'title': 'Initial Molecule'}, 'do_csearch': {'default': True, 'title': 'Do Csearch', 'type': 'boolean'}, 'do_optimization': {'default': True, 'title': 'Do Optimization', 'type': 'boolean'}, 'name': {'default': 'Docking Workflow', 'title': 'Name', 'type': 'string'}, 'folder_uuid': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Folder Uuid'}, 'max_credits': {'anyOf': [{'type': 'integer'}, {'type': 'null'}], 'default': None, 'title': 'Max Credits'}}, 'required': ['protein', 'pocket'], 'type': 'object'}}, {'name': 'workflow_fetch_latest', 'description': 'Fetch the latest workflow data from the database.\n\nUpdates the workflow object with the most recent status and results.\n\nArgs:\n    workflow_uuid: The UUID of the workflow to fetch\n    in_place: Whether to update the workflow object in place (default: False)\n    \nReturns:\n    Dictionary containing the updated workflow data including status and results\n', 'inputSchema': {'properties': {'workflow_uuid': {'title': 'Workflow Uuid', 'type': 'string'}, 'in_place': {'default': False, 'title': 'In Place', 'type': 'boolean'}}, 'required': ['workflow_uuid'], 'type': 'object'}}, {'name': 'workflow_wait_for_result', 'description': 'Wait for a workflow to complete and return the result.\n\nBlocks until the workflow completes, polling at specified intervals.\n\nArgs:\n    workflow_uuid: The UUID of the workflow to wait for\n    poll_interval: Time in seconds between status checks (default: 5)\n    \nReturns:\n    Dictionary containing the completed workflow data including results\n', 'inputSchema': {'properties': {'workflow_uuid': {'title': 'Workflow Uuid', 'type': 'string'}, 'poll_interval': {'default': 5, 'title': 'Poll Interval', 'type': 'integer'}}, 'required': ['workflow_uuid'], 'type': 'object'}}, {'name': 'workflow_get_status', 'description': 'Get the current status of a workflow.\n\nArgs:\n    workflow_uuid: The UUID of the workflow\n    \nReturns:\n    Dictionary with status information\n', 'inputSchema': {'properties': {'workflow_uuid': {'title': 'Workflow Uuid', 'type': 'string'}}, 'required': ['workflow_uuid'], 'type': 'object'}}, {'name': 'workflow_stop', 'description': 'Stop a running workflow.\n\nArgs:\n    workflow_uuid: The UUID of the workflow to stop\n    \nReturns:\n    Dictionary with confirmation message\n', 'inputSchema': {'properties': {'workflow_uuid': {'title': 'Workflow Uuid', 'type': 'string'}}, 'required': ['workflow_uuid'], 'type': 'object'}}, {'name': 'workflow_delete', 'description': 'Delete a workflow.\n\nThis permanently removes the workflow and its results from the database.\n\nArgs:\n    workflow_uuid: The UUID of the workflow to delete\n    \nReturns:\n    Dictionary with confirmation message\n', 'inputSchema': {'properties': {'workflow_uuid': {'title': 'Workflow Uuid', 'type': 'string'}}, 'required': ['workflow_uuid'], 'type': 'object'}}, {'name': 'retrieve_workflow', 'description': 'Retrieve a workflow from the API.\n\nArgs:\n    uuid: The UUID of the workflow to retrieve\n    \nReturns:\n    Dictionary containing the complete workflow data\n    \nRaises:\n    HTTPError: If the API request fails\n', 'inputSchema': {'properties': {'uuid': {'title': 'Uuid', 'type': 'string'}}, 'required': ['uuid'], 'type': 'object'}}, {'name': 'retrieve_calculation_molecules', 'description': 'Retrieve a list of molecules from a calculation.\n\nArgs:\n    uuid: The UUID of the calculation to retrieve molecules from\n    \nReturns:\n    List of dictionaries representing the molecules in the calculation\n    \nRaises:\n    HTTPError: If the API request fails\n', 'inputSchema': {'properties': {'uuid': {'title': 'Uuid', 'type': 'string'}}, 'required': ['uuid'], 'type': 'object'}}, {'name': 'list_workflows', 'description': 'List workflows subject to the specified criteria.\n\nArgs:\n    parent_uuid: The UUID of the parent folder\n    name_contains: Substring to search for in workflow names\n    public: Filter workflows by their public status\n    starred: Filter workflows by their starred status\n    status: Filter workflows by their status\n    workflow_type: Filter workflows by their type\n    page: The page number to retrieve (default: 0)\n    size: The number of items per page (default: 10)\n    \nReturns:\n    List of workflow dictionaries that match the search criteria\n    \nRaises:\n    HTTPError: If the request to the API fails\n', 'inputSchema': {'properties': {'parent_uuid': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Parent Uuid'}, 'name_contains': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Name Contains'}, 'public': {'anyOf': [{'type': 'boolean'}, {'type': 'null'}], 'default': None, 'title': 'Public'}, 'starred': {'anyOf': [{'type': 'boolean'}, {'type': 'null'}], 'default': None, 'title': 'Starred'}, 'status': {'anyOf': [{'type': 'integer'}, {'type': 'null'}], 'default': None, 'title': 'Status'}, 'workflow_type': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Workflow Type'}, 'page': {'default': 0, 'title': 'Page', 'type': 'integer'}, 'size': {'default': 10, 'title': 'Size', 'type': 'integer'}}, 'type': 'object'}}, {'name': 'workflow_update', 'description': 'Update workflow details.\n\nArgs:\n    workflow_uuid: The UUID of the workflow to update\n    name: New name for the workflow (optional)\n    notes: New notes for the workflow (optional)\n    starred: Whether to star/unstar the workflow (optional)\n    public: Whether to make the workflow public/private (optional)\n    \nReturns:\n    Dictionary with updated workflow information\n', 'inputSchema': {'properties': {'workflow_uuid': {'title': 'Workflow Uuid', 'type': 'string'}, 'name': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Name'}, 'notes': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Notes'}, 'starred': {'anyOf': [{'type': 'boolean'}, {'type': 'null'}], 'default': None, 'title': 'Starred'}, 'public': {'anyOf': [{'type': 'boolean'}, {'type': 'null'}], 'default': None, 'title': 'Public'}}, 'required': ['workflow_uuid'], 'type': 'object'}}, {'name': 'workflow_is_finished', 'description': 'Check if a workflow is finished.\n\nArgs:\n    workflow_uuid: The UUID of the workflow to check\n    \nReturns:\n    Dictionary with workflow completion status\n', 'inputSchema': {'properties': {'workflow_uuid': {'title': 'Workflow Uuid', 'type': 'string'}}, 'required': ['workflow_uuid'], 'type': 'object'}}, {'name': 'workflow_delete_data', 'description': 'Delete workflow data while keeping the workflow record.\n\nArgs:\n    workflow_uuid: The UUID of the workflow\n    \nReturns:\n    Dictionary with confirmation message\n', 'inputSchema': {'properties': {'workflow_uuid': {'title': 'Workflow Uuid', 'type': 'string'}}, 'required': ['workflow_uuid'], 'type': 'object'}}]})), metadata=None)
2025-08-02 14:02:13,110 - mcp.server.lowlevel.server - INFO - Processing request of type ListToolsRequest
2025-08-02 14:02:13,110 - mcp.server.lowlevel.server - DEBUG - Dispatching request of type ListToolsRequest
2025-08-02 14:02:13,111 - sse_starlette.sse - DEBUG - chunk: b'event: message\r\ndata: {"jsonrpc":"2.0","id":2,"result":{"tools":[{"name":"submit_basic_calculation_workflow","description":"Submit a basic calculation workflow using Rowan v2 API.\\n\\nPerforms fundamental quantum chemistry calculations with configurable methods\\nand computational tasks. Returns a workflow object for tracking progress.\\n","inputSchema":{"properties":{"initial_molecule":{"anyOf":[{"type":"string"},{"additionalProperties":true,"type":"object"},{}],"description":"The molecule to perform the calculation on. Can be a SMILES string, dict, StJamesMolecule, or RdkitMol object","title":"Initial Molecule"},"method":{"default":"uma_m_omol","description":"The method to use for the calculation (e.g., \'uma_m_omol\', \'gfn2-xtb\', \'r2scan_3c\')","title":"Method","type":"string"},"tasks":{"anyOf":[{"items":{"type":"string"},"type":"array"},{"type":"null"}],"default":null,"description":"List of computational tasks to perform. Optional[List[str]] (e.g. [\'optimize\']), Defaults to None","title":"Tasks"},"mode":{"default":"auto","description":"The mode to run the calculation in (\'auto\', \'rapid\', \'careful\', \'meticulous\')","title":"Mode","type":"string"},"engine":{"default":"omol25","description":"The computational engine to use (\'omol25\', \'xtb\', \'psi4\')","title":"Engine","type":"string"},"name":{"default":"Basic Calculation Workflow","description":"The name of the workflow for identification","title":"Name","type":"string"},"folder_uuid":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"description":"UUID of the folder to place the workflow in (optional)","title":"Folder Uuid"},"max_credits":{"anyOf":[{"type":"integer"},{"type":"null"}],"default":null,"description":"Maximum number of credits to use for the workflow (optional)","title":"Max Credits"}},"required":["initial_molecule"],"type":"object"}},{"name":"submit_conformer_search_workflow","description":"Submit a conformer search workflow using Rowan v2 API.\\n\\nExplores the conformational space of a molecule to find low-energy structures.\\n\\nArgs:\\n    initial_molecule: SMILES string or molecule object\\n    conf_gen_mode: default to \\"rapid\\"\\n        Options: \\"rapid\\", \\"careful\\", \\"meticulous\\"\\n    final_method: default: \\"aimnet2_wb97md3\\"\\n        Try other options, if user specifies\\n    solvent: Optional solvent for implicit solvation (e.g., \\"water\\", \\"ethanol\\")\\n    transition_state: Whether searching for transition state conformers (default: False)\\n    name: Workflow name for tracking\\n    folder_uuid: Optional folder UUID for organization\\n    max_credits: Optional credit limit for the calculation\\n    \\nReturns:\\n    Workflow object representing the submitted workflow\\n    \\nExample:\\n    # Basic conformer search\\n    result = submit_conformer_search_workflow(\\n        initial_molecule=\\"CCCC\\",\\n        conf_gen_mode=\\"rapid\\"\\n    )\\n    \\n    # Careful search with solvent\\n    result = submit_conformer_search_workflow(\\n        initial_molecule=\\"CC(C)CC(=O)O\\",\\n        conf_gen_mode=\\"careful\\",\\n        solvent=\\"water\\",\\n        final_method=\\"r2scan_3c\\"\\n    )\\n","inputSchema":{"properties":{"initial_molecule":{"title":"Initial Molecule","type":"string"},"conf_gen_mode":{"default":"rapid","title":"Conf Gen Mode","type":"string"},"final_method":{"default":"aimnet2_wb97md3","title":"Final Method","type":"string"},"solvent":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"title":"Solvent"},"transition_state":{"default":false,"title":"Transition State","type":"boolean"},"name":{"default":"Conformer Search Workflow","title":"Name","type":"string"},"folder_uuid":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"title":"Folder Uuid"},"max_credits":{"anyOf":[{"type":"integer"},{"type":"null"}],"default":null,"title":"Max Credits"}},"required":["initial_molecule"],"type":"object"}},{"name":"submit_solubility_workflow","description":"Submit a solubility prediction workflow using Rowan v2 API.\\n\\nPredicts solubility (log S) of a molecule in multiple solvents at various temperatures\\nusing machine learning models.\\n\\nArgs:\\n    initial_smiles: SMILES string of the molecule\\n    solvents: List of solvents as SMILES or common names (e.g., [\\"water\\", \\"ethanol\\"])\\n        If None, uses default solvents\\n    temperatures: List of temperatures in Kelvin\\n        If None, uses default temperature range\\n    name: Workflow name for tracking\\n    folder_uuid: Optional folder UUID for organization\\n    max_credits: Optional credit limit for the calculation\\n    \\nReturns:\\n    Workflow object representing the submitted workflow\\n    \\nExample:\\n    # Basic solubility prediction\\n    result = submit_solubility_workflow(\\n        initial_smiles=\\"CC(=O)Nc1ccc(O)cc1\\",\\n        solvents=[\\"water\\", \\"ethanol\\"],\\n        temperatures=[298.15, 310.15]\\n    )\\n    \\n    # With SMILES solvents\\n    result = submit_solubility_workflow(\\n        initial_smiles=\\"CC(=O)O\\",\\n        solvents=[\\"O\\", \\"CCO\\", \\"CCCCCC\\"],\\n        temperatures=[273.15, 298.15, 323.15]\\n    )\\n","inputSchema":{"properties":{"initial_smiles":{"title":"Initial Smiles","type":"string"},"solvents":{"anyOf":[{"items":{"type":"string"},"type":"array"},{"type":"null"}],"default":null,"title":"Solvents"},"temperatures":{"anyOf":[{"items":{"type":"number"},"type":"array"},{"type":"null"}],"default":null,"title":"Temperatures"},"name":{"default":"Solubility Workflow","title":"Name","type":"string"},"folder_uuid":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"title":"Folder Uuid"},"max_credits":{"anyOf":[{"type":"integer"},{"type":"null"}],"default":null,"title":"Max Credits"}},"required":["initial_smiles"],"type":"object"}},{"name":"submit_pka_workflow","description":"Submit a pKa prediction workflow using Rowan v2 API.\\n\\nPredicts acid dissociation constants (pKa) for ionizable groups in a molecule\\nusing quantum chemistry calculations.\\n\\nArgs:\\n    initial_molecule: SMILES string or molecule object\\n    pka_range: Tuple of (min, max) pKa values to search (default: (2, 12))\\n    deprotonate_elements: List of elements to consider for deprotonation\\n        (e.g., [\\"N\\", \\"O\\", \\"S\\"]). If None, uses defaults\\n    protonate_elements: List of elements to consider for protonation\\n        (e.g., [\\"N\\", \\"O\\"]). If None, uses defaults\\n    mode: Calculation mode (default: \\"careful\\")\\n        Options: \\"rapid\\", \\"careful\\", \\"meticulous\\"\\n    name: Workflow name for tracking\\n    folder_uuid: Optional folder UUID for organization\\n    max_credits: Optional credit limit for the calculation\\n    \\nReturns:\\n    Workflow object representing the submitted workflow\\n    \\nExample:\\n    # Basic pKa prediction\\n    result = submit_pka_workflow(\\n        initial_molecule=\\"CC(=O)O\\",\\n        pka_range=(2, 8)\\n    )\\n    \\n    # Specific elements with meticulous mode\\n    result = submit_pka_workflow(\\n        initial_molecule=\\"NC(C)C(=O)O\\",\\n        pka_range=(1, 14),\\n        deprotonate_elements=[\\"N\\", \\"O\\"],\\n        mode=\\"meticulous\\"\\n    )\\n","inputSchema":{"properties":{"initial_molecule":{"title":"Initial Molecule","type":"string"},"pka_range":{"default":[2,12],"maxItems":2,"minItems":2,"prefixItems":[{"type":"number"},{"type":"number"}],"title":"Pka Range","type":"array"},"deprotonate_elements":{"anyOf":[{"items":{"type":"string"},"type":"array"},{"type":"null"}],"default":null,"title":"Deprotonate Elements"},"protonate_elements":{"anyOf":[{"items":{"type":"string"},"type":"array"},{"type":"null"}],"default":null,"title":"Protonate Elements"},"mode":{"default":"careful","title":"Mode","type":"string"},"name":{"default":"pKa Workflow","title":"Name","type":"string"},"folder_uuid":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"title":"Folder Uuid"},"max_credits":{"anyOf":[{"type":"integer"},{"type":"null"}],"default":null,"title":"Max Credits"}},"required":["initial_molecule"],"type":"object"}},{"name":"submit_redox_potential_workflow","description":"Submit a redox potential calculation workflow using Rowan v2 API.\\n\\nCalculates reduction and/or oxidation potentials for a molecule using\\nquantum chemistry methods.\\n\\nArgs:\\n    initial_molecule: SMILES string or molecule object\\n    reduction: Whether to calculate reduction potential (default: False)\\n    oxidization: Whether to calculate oxidation potential (default: True)\\n    mode: Calculation mode (default: \\"rapid\\")\\n        Options: \\"rapid\\", \\"careful\\", \\"meticulous\\"\\n    name: Workflow name for tracking\\n    folder_uuid: Optional folder UUID for organization\\n    max_credits: Optional credit limit for the calculation\\n    \\nReturns:\\n    Workflow object representing the submitted workflow\\n    \\nExample:\\n    # Basic oxidation potential\\n    result = submit_redox_potential_workflow(\\n        initial_molecule=\\"CC1=CC=CC=C1\\",\\n        oxidization=True\\n    )\\n    \\n    # Both reduction and oxidation with careful mode\\n    result = submit_redox_potential_workflow(\\n        initial_molecule=\\"c1ccccc1\\",\\n        reduction=True,\\n        oxidization=True,\\n        mode=\\"careful\\"\\n    )\\n","inputSchema":{"properties":{"initial_molecule":{"title":"Initial Molecule","type":"string"},"reduction":{"default":false,"title":"Reduction","type":"boolean"},"oxidization":{"default":true,"title":"Oxidization","type":"boolean"},"mode":{"default":"rapid","title":"Mode","type":"string"},"name":{"default":"Redox Potential Workflow","title":"Name","type":"string"},"folder_uuid":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"title":"Folder Uuid"},"max_credits":{"anyOf":[{"type":"integer"},{"type":"null"}],"default":null,"title":"Max Credits"}},"required":["initial_molecule"],"type":"object"}},{"name":"submit_fukui_workflow","description":"Submit a Fukui indices calculation workflow using Rowan v2 API.\\n\\nCalculates Fukui indices to predict molecular reactivity at different sites.\\nFukui indices indicate susceptibility to nucleophilic/electrophilic attack.\\n\\nArgs:\\n    initial_molecule: SMILES string or molecule object\\n    optimization_method: Method for geometry optimization (default: \\"gfn2_xtb\\")\\n        Common options: \\"gfn2_xtb\\", \\"r2scan_3c\\", \\"aimnet2_wb97md3\\"\\n    fukui_method: Method for Fukui calculation (default: \\"gfn1_xtb\\")\\n        Common options: \\"gfn1_xtb\\", \\"gfn2_xtb\\"\\n    solvent_settings: Optional solvent configuration dictionary\\n        Example: {\\"solvent\\": \\"water\\", \\"model\\": \\"alpb\\"}\\n    name: Workflow name for tracking\\n    folder_uuid: Optional folder UUID for organization\\n    max_credits: Optional credit limit for the calculation\\n    \\nReturns:\\n    Workflow object representing the submitted workflow\\n    \\nExample:\\n    # Basic Fukui indices\\n    result = submit_fukui_workflow(\\n        initial_molecule=\\"CC(=O)O\\"\\n    )\\n    \\n    # With solvent and advanced methods\\n    result = submit_fukui_workflow(\\n        initial_molecule=\\"c1ccccc1N\\",\\n        optimization_method=\\"r2scan_3c\\",\\n        fukui_method=\\"gfn2_xtb\\",\\n        solvent_settings={\\"solvent\\": \\"water\\", \\"model\\": \\"alpb\\"}\\n    )\\n","inputSchema":{"properties":{"initial_molecule":{"title":"Initial Molecule","type":"string"},"optimization_method":{"default":"gfn2_xtb","title":"Optimization Method","type":"string"},"fukui_method":{"default":"gfn1_xtb","title":"Fukui Method","type":"string"},"solvent_settings":{"anyOf":[{"additionalProperties":true,"type":"object"},{"type":"null"}],"default":null,"title":"Solvent Settings"},"name":{"default":"Fukui Workflow","title":"Name","type":"string"},"folder_uuid":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"title":"Folder Uuid"},"max_credits":{"anyOf":[{"type":"integer"},{"type":"null"}],"default":null,"title":"Max Credits"}},"required":["initial_molecule"],"type":"object"}},{"name":"submit_tautomer_search_workflow","description":"Submit a tautomer search workflow using Rowan v2 API.\\n\\nSearches for different tautomeric forms of a molecule and evaluates their\\nrelative stabilities. Tautomers are structural isomers that readily interconvert.\\n\\nArgs:\\n    initial_molecule: SMILES string or molecule object\\n    mode: Search mode (default: \\"careful\\")\\n        Options: \\"rapid\\", \\"careful\\", \\"meticulous\\"\\n    name: Workflow name for tracking\\n    folder_uuid: Optional folder UUID for organization\\n    max_credits: Optional credit limit for the calculation\\n    \\nReturns:\\n    Workflow object representing the submitted workflow\\n    \\nExample:\\n    # Basic tautomer search\\n    result = submit_tautomer_search_workflow(\\n        initial_molecule=\\"CC(=O)CC(=O)C\\"\\n    )\\n    \\n    # Meticulous search for complex molecule\\n    result = submit_tautomer_search_workflow(\\n        initial_molecule=\\"c1ccc2c(c1)ncc(=O)[nH]2\\",\\n        mode=\\"meticulous\\"\\n    )\\n","inputSchema":{"properties":{"initial_molecule":{"title":"Initial Molecule","type":"string"},"mode":{"default":"careful","title":"Mode","type":"string"},"name":{"default":"Tautomer Search Workflow","title":"Name","type":"string"},"folder_uuid":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"title":"Folder Uuid"},"max_credits":{"anyOf":[{"type":"integer"},{"type":"null"}],"default":null,"title":"Max Credits"}},"required":["initial_molecule"],"type":"object"}},{"name":"submit_descriptors_workflow","description":"Submit a molecular descriptors calculation workflow using Rowan v2 API.\\n\\nCalculates a comprehensive set of molecular descriptors including:\\n- Physical properties (MW, logP, TPSA, etc.)\\n- Electronic properties (HOMO/LUMO, dipole moment, etc.)\\n- Structural features (rotatable bonds, H-bond donors/acceptors, etc.)\\n- Topological indices\\n\\nArgs:\\n    initial_molecule: SMILES string or molecule object\\n    name: Workflow name for tracking\\n    folder_uuid: Optional folder UUID for organization\\n    max_credits: Optional credit limit for the calculation\\n    \\nReturns:\\n    Workflow object representing the submitted workflow\\n    \\nExample:\\n    # Basic descriptor calculation\\n    result = submit_descriptors_workflow(\\n        initial_molecule=\\"CC(=O)Nc1ccc(O)cc1\\"\\n    )\\n    \\n    # For complex molecule\\n    result = submit_descriptors_workflow(\\n        initial_molecule=\\"CN1C=NC2=C1C(=O)N(C(=O)N2C)C\\",\\n        name=\\"Caffeine Descriptors\\"\\n    )\\n","inputSchema":{"properties":{"initial_molecule":{"title":"Initial Molecule","type":"string"},"name":{"default":"Descriptors Workflow","title":"Name","type":"string"},"folder_uuid":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"title":"Folder Uuid"},"max_credits":{"anyOf":[{"type":"integer"},{"type":"null"}],"default":null,"title":"Max Credits"}},"required":["initial_molecule"],"type":"object"}},{"name":"submit_scan_workflow","description":"Submit a potential energy surface scan workflow using Rowan v2 API.\\n\\nPerforms systematic scans along specified molecular coordinates (bonds, angles,\\nor dihedrals) to map the potential energy surface.\\n\\nArgs:\\n    initial_molecule: SMILES string or molecule object\\n    scan_settings: Dictionary specifying scan parameters\\n        Example: {\\n            \\"type\\": \\"dihedral\\",  # or \\"bond\\", \\"angle\\"\\n            \\"atoms\\": [0, 1, 2, 3],  # atom indices\\n            \\"start\\": -180,\\n            \\"stop\\": 180,\\n            \\"step\\": 10\\n        }\\n    calculation_engine: Computational engine (default: \\"omol25\\")\\n        Options: \\"omol25\\", \\"xtb\\", \\"psi4\\"\\n    calculation_method: Method for calculations (default: \\"uma_m_omol\\")\\n        Options depend on engine\\n    wavefront_propagation: Use wavefront optimization (default: True)\\n        Speeds up scans by using previous geometries as starting points\\n    name: Workflow name for tracking\\n    folder_uuid: Optional folder UUID for organization\\n    max_credits: Optional credit limit for the calculation\\n    \\nReturns:\\n    Workflow object representing the submitted workflow\\n    \\nExample:\\n    # Dihedral scan\\n    result = submit_scan_workflow(\\n        initial_molecule=\\"CC(C)CC\\",\\n        scan_settings={\\n            \\"type\\": \\"dihedral\\",\\n            \\"atoms\\": [0, 1, 2, 3],\\n            \\"start\\": -180,\\n            \\"stop\\": 180,\\n            \\"step\\": 15\\n        }\\n    )\\n    \\n    # Bond scan with advanced method\\n    result = submit_scan_workflow(\\n        initial_molecule=\\"CC\\",\\n        scan_settings={\\n            \\"type\\": \\"bond\\",\\n            \\"atoms\\": [0, 1],\\n            \\"start\\": 1.0,\\n            \\"stop\\": 2.5,\\n            \\"step\\": 0.1\\n        },\\n        calculation_method=\\"r2scan_3c\\"\\n    )\\n","inputSchema":{"properties":{"initial_molecule":{"title":"Initial Molecule","type":"string"},"scan_settings":{"anyOf":[{"additionalProperties":true,"type":"object"},{"type":"null"}],"default":null,"title":"Scan Settings"},"calculation_engine":{"default":"omol25","title":"Calculation Engine","type":"string"},"calculation_method":{"default":"uma_m_omol","title":"Calculation Method","type":"string"},"wavefront_propagation":{"default":true,"title":"Wavefront Propagation","type":"boolean"},"name":{"default":"Scan Workflow","title":"Name","type":"string"},"folder_uuid":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"title":"Folder Uuid"},"max_credits":{"anyOf":[{"type":"integer"},{"type":"null"}],"default":null,"title":"Max Credits"}},"required":["initial_molecule"],"type":"object"}},{"name":"submit_irc_workflow","description":"Submits an Intrinsic Reaction Coordinate (IRC) workflow to the API.\\n\\nArgs:\\n    initial_molecule: The initial molecule to perform the IRC calculation on.\\n        Can be a dict, StJamesMolecule, or RdkitMol object\\n    method: The computational method to use for the IRC calculation (default: \\"uma_m_omol\\")\\n        See list of available methods for options\\n    engine: The computational engine to use for the calculation (default: \\"omol25\\")\\n        See list of available engines\\n    preopt: Whether to perform a pre-optimization of the molecule (default: True)\\n    step_size: The step size to use for the IRC calculation (default: 0.05)\\n    max_irc_steps: The maximum number of IRC steps to perform (default: 30)\\n    name: The name of the workflow\\n    folder_uuid: The UUID of the folder to place the workflow in\\n    max_credits: The maximum number of credits to use for the workflow\\n    \\nReturns:\\n    Workflow object representing the submitted IRC workflow\\n    \\nExample:\\n    # Basic IRC calculation\\n    result = submit_irc_workflow(\\n        initial_molecule={\\"smiles\\": \\"[CH3].[CH3]\\"},\\n        method=\\"gfn2_xtb\\",\\n        max_irc_steps=50\\n    )\\n    \\n    # IRC with specific method and engine\\n    result = submit_irc_workflow(\\n        initial_molecule={\\"smiles\\": \\"CC(O)=CC\\"},\\n        method=\\"r2scan_3c\\",\\n        engine=\\"psi4\\",\\n        step_size=0.03\\n    )\\n","inputSchema":{"properties":{"initial_molecule":{"anyOf":[{"additionalProperties":true,"type":"object"},{},{"type":"null"}],"default":null,"title":"Initial Molecule"},"method":{"default":"uma_m_omol","title":"Method","type":"string"},"engine":{"default":"omol25","title":"Engine","type":"string"},"preopt":{"default":true,"title":"Preopt","type":"boolean"},"step_size":{"default":0.05,"title":"Step Size","type":"number"},"max_irc_steps":{"default":30,"title":"Max Irc Steps","type":"integer"},"name":{"default":"IRC Workflow","title":"Name","type":"string"},"folder_uuid":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"title":"Folder Uuid"},"max_credits":{"anyOf":[{"type":"integer"},{"type":"null"}],"default":null,"title":"Max Credits"}},"type":"object"}},{"name":"submit_protein_cofolding_workflow","description":"Submits a protein cofolding workflow to the API.\\n\\nArgs:\\n    initial_protein_sequences: The sequences of the proteins to be cofolded\\n    initial_smiles_list: A list of SMILES strings for the ligands to be cofolded with\\n    ligand_binding_affinity_index: The index of the ligand for which to compute the binding affinity\\n    use_msa_server: Whether to use the MSA server for the computation\\n    use_potentials: Whether to use potentials for the computation\\n    name: The name of the workflow\\n    model: The model to use for the computation\\n    folder_uuid: The UUID of the folder to store the workflow in\\n    max_credits: The maximum number of credits to use for the workflow\\n    \\nReturns:\\n    Workflow object representing the submitted workflow\\n    \\nExample:\\n    # Protein dimer cofolding\\n    result = submit_protein_cofolding_workflow(\\n        initial_protein_sequences=[\\n            \\"MKTAYIAKQRQISFVKSHFSRQLEERLGLIEVQAPILSRVGDGTQDNLSGAEK\\",\\n            \\"MKQHKAMIVALIVICITAVVAALVTRKDLCEVHIRTGQTEVAVF\\"\\n        ]\\n    )\\n    \\n    # Protein-ligand complex\\n    result = submit_protein_cofolding_workflow(\\n        initial_protein_sequences=[\\"MGSSHHHHHHSSGLVPRGSH\\"],\\n        initial_smiles_list=[\\"CC(=O)O\\", \\"CCO\\"],\\n        ligand_binding_affinity_index=0,\\n        use_msa_server=True\\n    )\\n","inputSchema":{"properties":{"initial_protein_sequences":{"items":{"type":"string"},"title":"Initial Protein Sequences","type":"array"},"initial_smiles_list":{"anyOf":[{"items":{"type":"string"},"type":"array"},{"type":"null"}],"default":null,"title":"Initial Smiles List"},"ligand_binding_affinity_index":{"anyOf":[{"type":"integer"},{"type":"null"}],"default":null,"title":"Ligand Binding Affinity Index"},"use_msa_server":{"default":true,"title":"Use Msa Server","type":"boolean"},"use_potentials":{"default":false,"title":"Use Potentials","type":"boolean"},"name":{"default":"Cofolding Workflow","title":"Name","type":"string"},"model":{"default":"boltz_2","title":"Model","type":"string"},"folder_uuid":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"title":"Folder Uuid"},"max_credits":{"anyOf":[{"type":"integer"},{"type":"null"}],"default":null,"title":"Max Credits"}},"required":["initial_protein_sequences"],"type":"object"}},{"name":"submit_docking_workflow","description":"Submits a Docking workflow to the API.\\n\\nArgs:\\n    protein: The protein to dock. Can be fed as a uuid or a Protein object\\n    pocket: The pocket to dock into\\n    initial_molecule: The initial molecule to be docked.\\n        Can be a dict, StJamesMolecule, or RdkitMol object\\n    do_csearch: Whether to perform a conformational search on the ligand\\n    do_optimization: Whether to perform an optimization on the ligand\\n    name: The name of the workflow\\n    folder_uuid: The UUID of the folder to place the workflow in\\n    max_credits: The maximum number of credits to use for the workflow\\n    \\nReturns:\\n    Workflow object representing the submitted workflow\\n    \\nExample:\\n    # Basic docking with protein UUID\\n    result = submit_docking_workflow(\\n        protein=\\"protein-uuid-123\\",\\n        pocket=pocket_obj,\\n        initial_molecule={\\"smiles\\": \\"CC(=O)Oc1ccccc1C(=O)O\\"}\\n    )\\n    \\n    # Docking with optimization disabled\\n    result = submit_docking_workflow(\\n        protein=protein_obj,\\n        pocket=pocket_obj,\\n        initial_molecule={\\"smiles\\": \\"CCO\\"},\\n        do_csearch=False,\\n        do_optimization=False\\n    )\\n","inputSchema":{"properties":{"protein":{"anyOf":[{"type":"string"},{}],"title":"Protein"},"pocket":{"title":"Pocket"},"initial_molecule":{"anyOf":[{"additionalProperties":true,"type":"object"},{},{"type":"null"}],"default":null,"title":"Initial Molecule"},"do_csearch":{"default":true,"title":"Do Csearch","type":"boolean"},"do_optimization":{"default":true,"title":"Do Optimization","type":"boolean"},"name":{"default":"Docking Workflow","title":"Name","type":"string"},"folder_uuid":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"title":"Folder Uuid"},"max_credits":{"anyOf":[{"type":"integer"},{"type":"null"}],"default":null,"title":"Max Credits"}},"required":["protein","pocket"],"type":"object"}},{"name":"workflow_fetch_latest","description":"Fetch the latest workflow data from the database.\\n\\nUpdates the workflow object with the most recent status and results.\\n\\nArgs:\\n    workflow_uuid: The UUID of the workflow to fetch\\n    in_place: Whether to update the workflow object in place (default: False)\\n    \\nReturns:\\n    Dictionary containing the updated workflow data including status and results\\n","inputSchema":{"properties":{"workflow_uuid":{"title":"Workflow Uuid","type":"string"},"in_place":{"default":false,"title":"In Place","type":"boolean"}},"required":["workflow_uuid"],"type":"object"}},{"name":"workflow_wait_for_result","description":"Wait for a workflow to complete and return the result.\\n\\nBlocks until the workflow completes, polling at specified intervals.\\n\\nArgs:\\n    workflow_uuid: The UUID of the workflow to wait for\\n    poll_interval: Time in seconds between status checks (default: 5)\\n    \\nReturns:\\n    Dictionary containing the completed workflow data including results\\n","inputSchema":{"properties":{"workflow_uuid":{"title":"Workflow Uuid","type":"string"},"poll_interval":{"default":5,"title":"Poll Interval","type":"integer"}},"required":["workflow_uuid"],"type":"object"}},{"name":"workflow_get_status","description":"Get the current status of a workflow.\\n\\nArgs:\\n    workflow_uuid: The UUID of the workflow\\n    \\nReturns:\\n    Dictionary with status information\\n","inputSchema":{"properties":{"workflow_uuid":{"title":"Workflow Uuid","type":"string"}},"required":["workflow_uuid"],"type":"object"}},{"name":"workflow_stop","description":"Stop a running workflow.\\n\\nArgs:\\n    workflow_uuid: The UUID of the workflow to stop\\n    \\nReturns:\\n    Dictionary with confirmation message\\n","inputSchema":{"properties":{"workflow_uuid":{"title":"Workflow Uuid","type":"string"}},"required":["workflow_uuid"],"type":"object"}},{"name":"workflow_delete","description":"Delete a workflow.\\n\\nThis permanently removes the workflow and its results from the database.\\n\\nArgs:\\n    workflow_uuid: The UUID of the workflow to delete\\n    \\nReturns:\\n    Dictionary with confirmation message\\n","inputSchema":{"properties":{"workflow_uuid":{"title":"Workflow Uuid","type":"string"}},"required":["workflow_uuid"],"type":"object"}},{"name":"retrieve_workflow","description":"Retrieve a workflow from the API.\\n\\nArgs:\\n    uuid: The UUID of the workflow to retrieve\\n    \\nReturns:\\n    Dictionary containing the complete workflow data\\n    \\nRaises:\\n    HTTPError: If the API request fails\\n","inputSchema":{"properties":{"uuid":{"title":"Uuid","type":"string"}},"required":["uuid"],"type":"object"}},{"name":"retrieve_calculation_molecules","description":"Retrieve a list of molecules from a calculation.\\n\\nArgs:\\n    uuid: The UUID of the calculation to retrieve molecules from\\n    \\nReturns:\\n    List of dictionaries representing the molecules in the calculation\\n    \\nRaises:\\n    HTTPError: If the API request fails\\n","inputSchema":{"properties":{"uuid":{"title":"Uuid","type":"string"}},"required":["uuid"],"type":"object"}},{"name":"list_workflows","description":"List workflows subject to the specified criteria.\\n\\nArgs:\\n    parent_uuid: The UUID of the parent folder\\n    name_contains: Substring to search for in workflow names\\n    public: Filter workflows by their public status\\n    starred: Filter workflows by their starred status\\n    status: Filter workflows by their status\\n    workflow_type: Filter workflows by their type\\n    page: The page number to retrieve (default: 0)\\n    size: The number of items per page (default: 10)\\n    \\nReturns:\\n    List of workflow dictionaries that match the search criteria\\n    \\nRaises:\\n    HTTPError: If the request to the API fails\\n","inputSchema":{"properties":{"parent_uuid":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"title":"Parent Uuid"},"name_contains":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"title":"Name Contains"},"public":{"anyOf":[{"type":"boolean"},{"type":"null"}],"default":null,"title":"Public"},"starred":{"anyOf":[{"type":"boolean"},{"type":"null"}],"default":null,"title":"Starred"},"status":{"anyOf":[{"type":"integer"},{"type":"null"}],"default":null,"title":"Status"},"workflow_type":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"title":"Workflow Type"},"page":{"default":0,"title":"Page","type":"integer"},"size":{"default":10,"title":"Size","type":"integer"}},"type":"object"}},{"name":"workflow_update","description":"Update workflow details.\\n\\nArgs:\\n    workflow_uuid: The UUID of the workflow to update\\n    name: New name for the workflow (optional)\\n    notes: New notes for the workflow (optional)\\n    starred: Whether to star/unstar the workflow (optional)\\n    public: Whether to make the workflow public/private (optional)\\n    \\nReturns:\\n    Dictionary with updated workflow information\\n","inputSchema":{"properties":{"workflow_uuid":{"title":"Workflow Uuid","type":"string"},"name":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"title":"Name"},"notes":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"title":"Notes"},"starred":{"anyOf":[{"type":"boolean"},{"type":"null"}],"default":null,"title":"Starred"},"public":{"anyOf":[{"type":"boolean"},{"type":"null"}],"default":null,"title":"Public"}},"required":["workflow_uuid"],"type":"object"}},{"name":"workflow_is_finished","description":"Check if a workflow is finished.\\n\\nArgs:\\n    workflow_uuid: The UUID of the workflow to check\\n    \\nReturns:\\n    Dictionary with workflow completion status\\n","inputSchema":{"properties":{"workflow_uuid":{"title":"Workflow Uuid","type":"string"}},"required":["workflow_uuid"],"type":"object"}},{"name":"workflow_delete_data","description":"Delete workflow data while keeping the workflow record.\\n\\nArgs:\\n    workflow_uuid: The UUID of the workflow\\n    \\nReturns:\\n    Dictionary with confirmation message\\n","inputSchema":{"properties":{"workflow_uuid":{"title":"Workflow Uuid","type":"string"}},"required":["workflow_uuid"],"type":"object"}}]}}\r\n\r\n'
2025-08-02 14:02:13,112 - mcp.server.sse - DEBUG - Sending message via SSE: SessionMessage(message=JSONRPCMessage(root=JSONRPCResponse(jsonrpc='2.0', id=3, result={'tools': [{'name': 'submit_basic_calculation_workflow', 'description': 'Submit a basic calculation workflow using Rowan v2 API.\n\nPerforms fundamental quantum chemistry calculations with configurable methods\nand computational tasks. Returns a workflow object for tracking progress.\n', 'inputSchema': {'properties': {'initial_molecule': {'anyOf': [{'type': 'string'}, {'additionalProperties': True, 'type': 'object'}, {}], 'description': 'The molecule to perform the calculation on. Can be a SMILES string, dict, StJamesMolecule, or RdkitMol object', 'title': 'Initial Molecule'}, 'method': {'default': 'uma_m_omol', 'description': "The method to use for the calculation (e.g., 'uma_m_omol', 'gfn2-xtb', 'r2scan_3c')", 'title': 'Method', 'type': 'string'}, 'tasks': {'anyOf': [{'items': {'type': 'string'}, 'type': 'array'}, {'type': 'null'}], 'default': None, 'description': "List of computational tasks to perform. Optional[List[str]] (e.g. ['optimize']), Defaults to None", 'title': 'Tasks'}, 'mode': {'default': 'auto', 'description': "The mode to run the calculation in ('auto', 'rapid', 'careful', 'meticulous')", 'title': 'Mode', 'type': 'string'}, 'engine': {'default': 'omol25', 'description': "The computational engine to use ('omol25', 'xtb', 'psi4')", 'title': 'Engine', 'type': 'string'}, 'name': {'default': 'Basic Calculation Workflow', 'description': 'The name of the workflow for identification', 'title': 'Name', 'type': 'string'}, 'folder_uuid': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'UUID of the folder to place the workflow in (optional)', 'title': 'Folder Uuid'}, 'max_credits': {'anyOf': [{'type': 'integer'}, {'type': 'null'}], 'default': None, 'description': 'Maximum number of credits to use for the workflow (optional)', 'title': 'Max Credits'}}, 'required': ['initial_molecule'], 'type': 'object'}}, {'name': 'submit_conformer_search_workflow', 'description': 'Submit a conformer search workflow using Rowan v2 API.\n\nExplores the conformational space of a molecule to find low-energy structures.\n\nArgs:\n    initial_molecule: SMILES string or molecule object\n    conf_gen_mode: default to "rapid"\n        Options: "rapid", "careful", "meticulous"\n    final_method: default: "aimnet2_wb97md3"\n        Try other options, if user specifies\n    solvent: Optional solvent for implicit solvation (e.g., "water", "ethanol")\n    transition_state: Whether searching for transition state conformers (default: False)\n    name: Workflow name for tracking\n    folder_uuid: Optional folder UUID for organization\n    max_credits: Optional credit limit for the calculation\n    \nReturns:\n    Workflow object representing the submitted workflow\n    \nExample:\n    # Basic conformer search\n    result = submit_conformer_search_workflow(\n        initial_molecule="CCCC",\n        conf_gen_mode="rapid"\n    )\n    \n    # Careful search with solvent\n    result = submit_conformer_search_workflow(\n        initial_molecule="CC(C)CC(=O)O",\n        conf_gen_mode="careful",\n        solvent="water",\n        final_method="r2scan_3c"\n    )\n', 'inputSchema': {'properties': {'initial_molecule': {'title': 'Initial Molecule', 'type': 'string'}, 'conf_gen_mode': {'default': 'rapid', 'title': 'Conf Gen Mode', 'type': 'string'}, 'final_method': {'default': 'aimnet2_wb97md3', 'title': 'Final Method', 'type': 'string'}, 'solvent': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Solvent'}, 'transition_state': {'default': False, 'title': 'Transition State', 'type': 'boolean'}, 'name': {'default': 'Conformer Search Workflow', 'title': 'Name', 'type': 'string'}, 'folder_uuid': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Folder Uuid'}, 'max_credits': {'anyOf': [{'type': 'integer'}, {'type': 'null'}], 'default': None, 'title': 'Max Credits'}}, 'required': ['initial_molecule'], 'type': 'object'}}, {'name': 'submit_solubility_workflow', 'description': 'Submit a solubility prediction workflow using Rowan v2 API.\n\nPredicts solubility (log S) of a molecule in multiple solvents at various temperatures\nusing machine learning models.\n\nArgs:\n    initial_smiles: SMILES string of the molecule\n    solvents: List of solvents as SMILES or common names (e.g., ["water", "ethanol"])\n        If None, uses default solvents\n    temperatures: List of temperatures in Kelvin\n        If None, uses default temperature range\n    name: Workflow name for tracking\n    folder_uuid: Optional folder UUID for organization\n    max_credits: Optional credit limit for the calculation\n    \nReturns:\n    Workflow object representing the submitted workflow\n    \nExample:\n    # Basic solubility prediction\n    result = submit_solubility_workflow(\n        initial_smiles="CC(=O)Nc1ccc(O)cc1",\n        solvents=["water", "ethanol"],\n        temperatures=[298.15, 310.15]\n    )\n    \n    # With SMILES solvents\n    result = submit_solubility_workflow(\n        initial_smiles="CC(=O)O",\n        solvents=["O", "CCO", "CCCCCC"],\n        temperatures=[273.15, 298.15, 323.15]\n    )\n', 'inputSchema': {'properties': {'initial_smiles': {'title': 'Initial Smiles', 'type': 'string'}, 'solvents': {'anyOf': [{'items': {'type': 'string'}, 'type': 'array'}, {'type': 'null'}], 'default': None, 'title': 'Solvents'}, 'temperatures': {'anyOf': [{'items': {'type': 'number'}, 'type': 'array'}, {'type': 'null'}], 'default': None, 'title': 'Temperatures'}, 'name': {'default': 'Solubility Workflow', 'title': 'Name', 'type': 'string'}, 'folder_uuid': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Folder Uuid'}, 'max_credits': {'anyOf': [{'type': 'integer'}, {'type': 'null'}], 'default': None, 'title': 'Max Credits'}}, 'required': ['initial_smiles'], 'type': 'object'}}, {'name': 'submit_pka_workflow', 'description': 'Submit a pKa prediction workflow using Rowan v2 API.\n\nPredicts acid dissociation constants (pKa) for ionizable groups in a molecule\nusing quantum chemistry calculations.\n\nArgs:\n    initial_molecule: SMILES string or molecule object\n    pka_range: Tuple of (min, max) pKa values to search (default: (2, 12))\n    deprotonate_elements: List of elements to consider for deprotonation\n        (e.g., ["N", "O", "S"]). If None, uses defaults\n    protonate_elements: List of elements to consider for protonation\n        (e.g., ["N", "O"]). If None, uses defaults\n    mode: Calculation mode (default: "careful")\n        Options: "rapid", "careful", "meticulous"\n    name: Workflow name for tracking\n    folder_uuid: Optional folder UUID for organization\n    max_credits: Optional credit limit for the calculation\n    \nReturns:\n    Workflow object representing the submitted workflow\n    \nExample:\n    # Basic pKa prediction\n    result = submit_pka_workflow(\n        initial_molecule="CC(=O)O",\n        pka_range=(2, 8)\n    )\n    \n    # Specific elements with meticulous mode\n    result = submit_pka_workflow(\n        initial_molecule="NC(C)C(=O)O",\n        pka_range=(1, 14),\n        deprotonate_elements=["N", "O"],\n        mode="meticulous"\n    )\n', 'inputSchema': {'properties': {'initial_molecule': {'title': 'Initial Molecule', 'type': 'string'}, 'pka_range': {'default': [2, 12], 'maxItems': 2, 'minItems': 2, 'prefixItems': [{'type': 'number'}, {'type': 'number'}], 'title': 'Pka Range', 'type': 'array'}, 'deprotonate_elements': {'anyOf': [{'items': {'type': 'string'}, 'type': 'array'}, {'type': 'null'}], 'default': None, 'title': 'Deprotonate Elements'}, 'protonate_elements': {'anyOf': [{'items': {'type': 'string'}, 'type': 'array'}, {'type': 'null'}], 'default': None, 'title': 'Protonate Elements'}, 'mode': {'default': 'careful', 'title': 'Mode', 'type': 'string'}, 'name': {'default': 'pKa Workflow', 'title': 'Name', 'type': 'string'}, 'folder_uuid': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Folder Uuid'}, 'max_credits': {'anyOf': [{'type': 'integer'}, {'type': 'null'}], 'default': None, 'title': 'Max Credits'}}, 'required': ['initial_molecule'], 'type': 'object'}}, {'name': 'submit_redox_potential_workflow', 'description': 'Submit a redox potential calculation workflow using Rowan v2 API.\n\nCalculates reduction and/or oxidation potentials for a molecule using\nquantum chemistry methods.\n\nArgs:\n    initial_molecule: SMILES string or molecule object\n    reduction: Whether to calculate reduction potential (default: False)\n    oxidization: Whether to calculate oxidation potential (default: True)\n    mode: Calculation mode (default: "rapid")\n        Options: "rapid", "careful", "meticulous"\n    name: Workflow name for tracking\n    folder_uuid: Optional folder UUID for organization\n    max_credits: Optional credit limit for the calculation\n    \nReturns:\n    Workflow object representing the submitted workflow\n    \nExample:\n    # Basic oxidation potential\n    result = submit_redox_potential_workflow(\n        initial_molecule="CC1=CC=CC=C1",\n        oxidization=True\n    )\n    \n    # Both reduction and oxidation with careful mode\n    result = submit_redox_potential_workflow(\n        initial_molecule="c1ccccc1",\n        reduction=True,\n        oxidization=True,\n        mode="careful"\n    )\n', 'inputSchema': {'properties': {'initial_molecule': {'title': 'Initial Molecule', 'type': 'string'}, 'reduction': {'default': False, 'title': 'Reduction', 'type': 'boolean'}, 'oxidization': {'default': True, 'title': 'Oxidization', 'type': 'boolean'}, 'mode': {'default': 'rapid', 'title': 'Mode', 'type': 'string'}, 'name': {'default': 'Redox Potential Workflow', 'title': 'Name', 'type': 'string'}, 'folder_uuid': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Folder Uuid'}, 'max_credits': {'anyOf': [{'type': 'integer'}, {'type': 'null'}], 'default': None, 'title': 'Max Credits'}}, 'required': ['initial_molecule'], 'type': 'object'}}, {'name': 'submit_fukui_workflow', 'description': 'Submit a Fukui indices calculation workflow using Rowan v2 API.\n\nCalculates Fukui indices to predict molecular reactivity at different sites.\nFukui indices indicate susceptibility to nucleophilic/electrophilic attack.\n\nArgs:\n    initial_molecule: SMILES string or molecule object\n    optimization_method: Method for geometry optimization (default: "gfn2_xtb")\n        Common options: "gfn2_xtb", "r2scan_3c", "aimnet2_wb97md3"\n    fukui_method: Method for Fukui calculation (default: "gfn1_xtb")\n        Common options: "gfn1_xtb", "gfn2_xtb"\n    solvent_settings: Optional solvent configuration dictionary\n        Example: {"solvent": "water", "model": "alpb"}\n    name: Workflow name for tracking\n    folder_uuid: Optional folder UUID for organization\n    max_credits: Optional credit limit for the calculation\n    \nReturns:\n    Workflow object representing the submitted workflow\n    \nExample:\n    # Basic Fukui indices\n    result = submit_fukui_workflow(\n        initial_molecule="CC(=O)O"\n    )\n    \n    # With solvent and advanced methods\n    result = submit_fukui_workflow(\n        initial_molecule="c1ccccc1N",\n        optimization_method="r2scan_3c",\n        fukui_method="gfn2_xtb",\n        solvent_settings={"solvent": "water", "model": "alpb"}\n    )\n', 'inputSchema': {'properties': {'initial_molecule': {'title': 'Initial Molecule', 'type': 'string'}, 'optimization_method': {'default': 'gfn2_xtb', 'title': 'Optimization Method', 'type': 'string'}, 'fukui_method': {'default': 'gfn1_xtb', 'title': 'Fukui Method', 'type': 'string'}, 'solvent_settings': {'anyOf': [{'additionalProperties': True, 'type': 'object'}, {'type': 'null'}], 'default': None, 'title': 'Solvent Settings'}, 'name': {'default': 'Fukui Workflow', 'title': 'Name', 'type': 'string'}, 'folder_uuid': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Folder Uuid'}, 'max_credits': {'anyOf': [{'type': 'integer'}, {'type': 'null'}], 'default': None, 'title': 'Max Credits'}}, 'required': ['initial_molecule'], 'type': 'object'}}, {'name': 'submit_tautomer_search_workflow', 'description': 'Submit a tautomer search workflow using Rowan v2 API.\n\nSearches for different tautomeric forms of a molecule and evaluates their\nrelative stabilities. Tautomers are structural isomers that readily interconvert.\n\nArgs:\n    initial_molecule: SMILES string or molecule object\n    mode: Search mode (default: "careful")\n        Options: "rapid", "careful", "meticulous"\n    name: Workflow name for tracking\n    folder_uuid: Optional folder UUID for organization\n    max_credits: Optional credit limit for the calculation\n    \nReturns:\n    Workflow object representing the submitted workflow\n    \nExample:\n    # Basic tautomer search\n    result = submit_tautomer_search_workflow(\n        initial_molecule="CC(=O)CC(=O)C"\n    )\n    \n    # Meticulous search for complex molecule\n    result = submit_tautomer_search_workflow(\n        initial_molecule="c1ccc2c(c1)ncc(=O)[nH]2",\n        mode="meticulous"\n    )\n', 'inputSchema': {'properties': {'initial_molecule': {'title': 'Initial Molecule', 'type': 'string'}, 'mode': {'default': 'careful', 'title': 'Mode', 'type': 'string'}, 'name': {'default': 'Tautomer Search Workflow', 'title': 'Name', 'type': 'string'}, 'folder_uuid': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Folder Uuid'}, 'max_credits': {'anyOf': [{'type': 'integer'}, {'type': 'null'}], 'default': None, 'title': 'Max Credits'}}, 'required': ['initial_molecule'], 'type': 'object'}}, {'name': 'submit_descriptors_workflow', 'description': 'Submit a molecular descriptors calculation workflow using Rowan v2 API.\n\nCalculates a comprehensive set of molecular descriptors including:\n- Physical properties (MW, logP, TPSA, etc.)\n- Electronic properties (HOMO/LUMO, dipole moment, etc.)\n- Structural features (rotatable bonds, H-bond donors/acceptors, etc.)\n- Topological indices\n\nArgs:\n    initial_molecule: SMILES string or molecule object\n    name: Workflow name for tracking\n    folder_uuid: Optional folder UUID for organization\n    max_credits: Optional credit limit for the calculation\n    \nReturns:\n    Workflow object representing the submitted workflow\n    \nExample:\n    # Basic descriptor calculation\n    result = submit_descriptors_workflow(\n        initial_molecule="CC(=O)Nc1ccc(O)cc1"\n    )\n    \n    # For complex molecule\n    result = submit_descriptors_workflow(\n        initial_molecule="CN1C=NC2=C1C(=O)N(C(=O)N2C)C",\n        name="Caffeine Descriptors"\n    )\n', 'inputSchema': {'properties': {'initial_molecule': {'title': 'Initial Molecule', 'type': 'string'}, 'name': {'default': 'Descriptors Workflow', 'title': 'Name', 'type': 'string'}, 'folder_uuid': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Folder Uuid'}, 'max_credits': {'anyOf': [{'type': 'integer'}, {'type': 'null'}], 'default': None, 'title': 'Max Credits'}}, 'required': ['initial_molecule'], 'type': 'object'}}, {'name': 'submit_scan_workflow', 'description': 'Submit a potential energy surface scan workflow using Rowan v2 API.\n\nPerforms systematic scans along specified molecular coordinates (bonds, angles,\nor dihedrals) to map the potential energy surface.\n\nArgs:\n    initial_molecule: SMILES string or molecule object\n    scan_settings: Dictionary specifying scan parameters\n        Example: {\n            "type": "dihedral",  # or "bond", "angle"\n            "atoms": [0, 1, 2, 3],  # atom indices\n            "start": -180,\n            "stop": 180,\n            "step": 10\n        }\n    calculation_engine: Computational engine (default: "omol25")\n        Options: "omol25", "xtb", "psi4"\n    calculation_method: Method for calculations (default: "uma_m_omol")\n        Options depend on engine\n    wavefront_propagation: Use wavefront optimization (default: True)\n        Speeds up scans by using previous geometries as starting points\n    name: Workflow name for tracking\n    folder_uuid: Optional folder UUID for organization\n    max_credits: Optional credit limit for the calculation\n    \nReturns:\n    Workflow object representing the submitted workflow\n    \nExample:\n    # Dihedral scan\n    result = submit_scan_workflow(\n        initial_molecule="CC(C)CC",\n        scan_settings={\n            "type": "dihedral",\n            "atoms": [0, 1, 2, 3],\n            "start": -180,\n            "stop": 180,\n            "step": 15\n        }\n    )\n    \n    # Bond scan with advanced method\n    result = submit_scan_workflow(\n        initial_molecule="CC",\n        scan_settings={\n            "type": "bond",\n            "atoms": [0, 1],\n            "start": 1.0,\n            "stop": 2.5,\n            "step": 0.1\n        },\n        calculation_method="r2scan_3c"\n    )\n', 'inputSchema': {'properties': {'initial_molecule': {'title': 'Initial Molecule', 'type': 'string'}, 'scan_settings': {'anyOf': [{'additionalProperties': True, 'type': 'object'}, {'type': 'null'}], 'default': None, 'title': 'Scan Settings'}, 'calculation_engine': {'default': 'omol25', 'title': 'Calculation Engine', 'type': 'string'}, 'calculation_method': {'default': 'uma_m_omol', 'title': 'Calculation Method', 'type': 'string'}, 'wavefront_propagation': {'default': True, 'title': 'Wavefront Propagation', 'type': 'boolean'}, 'name': {'default': 'Scan Workflow', 'title': 'Name', 'type': 'string'}, 'folder_uuid': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Folder Uuid'}, 'max_credits': {'anyOf': [{'type': 'integer'}, {'type': 'null'}], 'default': None, 'title': 'Max Credits'}}, 'required': ['initial_molecule'], 'type': 'object'}}, {'name': 'submit_irc_workflow', 'description': 'Submits an Intrinsic Reaction Coordinate (IRC) workflow to the API.\n\nArgs:\n    initial_molecule: The initial molecule to perform the IRC calculation on.\n        Can be a dict, StJamesMolecule, or RdkitMol object\n    method: The computational method to use for the IRC calculation (default: "uma_m_omol")\n        See list of available methods for options\n    engine: The computational engine to use for the calculation (default: "omol25")\n        See list of available engines\n    preopt: Whether to perform a pre-optimization of the molecule (default: True)\n    step_size: The step size to use for the IRC calculation (default: 0.05)\n    max_irc_steps: The maximum number of IRC steps to perform (default: 30)\n    name: The name of the workflow\n    folder_uuid: The UUID of the folder to place the workflow in\n    max_credits: The maximum number of credits to use for the workflow\n    \nReturns:\n    Workflow object representing the submitted IRC workflow\n    \nExample:\n    # Basic IRC calculation\n    result = submit_irc_workflow(\n        initial_molecule={"smiles": "[CH3].[CH3]"},\n        method="gfn2_xtb",\n        max_irc_steps=50\n    )\n    \n    # IRC with specific method and engine\n    result = submit_irc_workflow(\n        initial_molecule={"smiles": "CC(O)=CC"},\n        method="r2scan_3c",\n        engine="psi4",\n        step_size=0.03\n    )\n', 'inputSchema': {'properties': {'initial_molecule': {'anyOf': [{'additionalProperties': True, 'type': 'object'}, {}, {'type': 'null'}], 'default': None, 'title': 'Initial Molecule'}, 'method': {'default': 'uma_m_omol', 'title': 'Method', 'type': 'string'}, 'engine': {'default': 'omol25', 'title': 'Engine', 'type': 'string'}, 'preopt': {'default': True, 'title': 'Preopt', 'type': 'boolean'}, 'step_size': {'default': 0.05, 'title': 'Step Size', 'type': 'number'}, 'max_irc_steps': {'default': 30, 'title': 'Max Irc Steps', 'type': 'integer'}, 'name': {'default': 'IRC Workflow', 'title': 'Name', 'type': 'string'}, 'folder_uuid': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Folder Uuid'}, 'max_credits': {'anyOf': [{'type': 'integer'}, {'type': 'null'}], 'default': None, 'title': 'Max Credits'}}, 'type': 'object'}}, {'name': 'submit_protein_cofolding_workflow', 'description': 'Submits a protein cofolding workflow to the API.\n\nArgs:\n    initial_protein_sequences: The sequences of the proteins to be cofolded\n    initial_smiles_list: A list of SMILES strings for the ligands to be cofolded with\n    ligand_binding_affinity_index: The index of the ligand for which to compute the binding affinity\n    use_msa_server: Whether to use the MSA server for the computation\n    use_potentials: Whether to use potentials for the computation\n    name: The name of the workflow\n    model: The model to use for the computation\n    folder_uuid: The UUID of the folder to store the workflow in\n    max_credits: The maximum number of credits to use for the workflow\n    \nReturns:\n    Workflow object representing the submitted workflow\n    \nExample:\n    # Protein dimer cofolding\n    result = submit_protein_cofolding_workflow(\n        initial_protein_sequences=[\n            "MKTAYIAKQRQISFVKSHFSRQLEERLGLIEVQAPILSRVGDGTQDNLSGAEK",\n            "MKQHKAMIVALIVICITAVVAALVTRKDLCEVHIRTGQTEVAVF"\n        ]\n    )\n    \n    # Protein-ligand complex\n    result = submit_protein_cofolding_workflow(\n        initial_protein_sequences=["MGSSHHHHHHSSGLVPRGSH"],\n        initial_smiles_list=["CC(=O)O", "CCO"],\n        ligand_binding_affinity_index=0,\n        use_msa_server=True\n    )\n', 'inputSchema': {'properties': {'initial_protein_sequences': {'items': {'type': 'string'}, 'title': 'Initial Protein Sequences', 'type': 'array'}, 'initial_smiles_list': {'anyOf': [{'items': {'type': 'string'}, 'type': 'array'}, {'type': 'null'}], 'default': None, 'title': 'Initial Smiles List'}, 'ligand_binding_affinity_index': {'anyOf': [{'type': 'integer'}, {'type': 'null'}], 'default': None, 'title': 'Ligand Binding Affinity Index'}, 'use_msa_server': {'default': True, 'title': 'Use Msa Server', 'type': 'boolean'}, 'use_potentials': {'default': False, 'title': 'Use Potentials', 'type': 'boolean'}, 'name': {'default': 'Cofolding Workflow', 'title': 'Name', 'type': 'string'}, 'model': {'default': 'boltz_2', 'title': 'Model', 'type': 'string'}, 'folder_uuid': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Folder Uuid'}, 'max_credits': {'anyOf': [{'type': 'integer'}, {'type': 'null'}], 'default': None, 'title': 'Max Credits'}}, 'required': ['initial_protein_sequences'], 'type': 'object'}}, {'name': 'submit_docking_workflow', 'description': 'Submits a Docking workflow to the API.\n\nArgs:\n    protein: The protein to dock. Can be fed as a uuid or a Protein object\n    pocket: The pocket to dock into\n    initial_molecule: The initial molecule to be docked.\n        Can be a dict, StJamesMolecule, or RdkitMol object\n    do_csearch: Whether to perform a conformational search on the ligand\n    do_optimization: Whether to perform an optimization on the ligand\n    name: The name of the workflow\n    folder_uuid: The UUID of the folder to place the workflow in\n    max_credits: The maximum number of credits to use for the workflow\n    \nReturns:\n    Workflow object representing the submitted workflow\n    \nExample:\n    # Basic docking with protein UUID\n    result = submit_docking_workflow(\n        protein="protein-uuid-123",\n        pocket=pocket_obj,\n        initial_molecule={"smiles": "CC(=O)Oc1ccccc1C(=O)O"}\n    )\n    \n    # Docking with optimization disabled\n    result = submit_docking_workflow(\n        protein=protein_obj,\n        pocket=pocket_obj,\n        initial_molecule={"smiles": "CCO"},\n        do_csearch=False,\n        do_optimization=False\n    )\n', 'inputSchema': {'properties': {'protein': {'anyOf': [{'type': 'string'}, {}], 'title': 'Protein'}, 'pocket': {'title': 'Pocket'}, 'initial_molecule': {'anyOf': [{'additionalProperties': True, 'type': 'object'}, {}, {'type': 'null'}], 'default': None, 'title': 'Initial Molecule'}, 'do_csearch': {'default': True, 'title': 'Do Csearch', 'type': 'boolean'}, 'do_optimization': {'default': True, 'title': 'Do Optimization', 'type': 'boolean'}, 'name': {'default': 'Docking Workflow', 'title': 'Name', 'type': 'string'}, 'folder_uuid': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Folder Uuid'}, 'max_credits': {'anyOf': [{'type': 'integer'}, {'type': 'null'}], 'default': None, 'title': 'Max Credits'}}, 'required': ['protein', 'pocket'], 'type': 'object'}}, {'name': 'workflow_fetch_latest', 'description': 'Fetch the latest workflow data from the database.\n\nUpdates the workflow object with the most recent status and results.\n\nArgs:\n    workflow_uuid: The UUID of the workflow to fetch\n    in_place: Whether to update the workflow object in place (default: False)\n    \nReturns:\n    Dictionary containing the updated workflow data including status and results\n', 'inputSchema': {'properties': {'workflow_uuid': {'title': 'Workflow Uuid', 'type': 'string'}, 'in_place': {'default': False, 'title': 'In Place', 'type': 'boolean'}}, 'required': ['workflow_uuid'], 'type': 'object'}}, {'name': 'workflow_wait_for_result', 'description': 'Wait for a workflow to complete and return the result.\n\nBlocks until the workflow completes, polling at specified intervals.\n\nArgs:\n    workflow_uuid: The UUID of the workflow to wait for\n    poll_interval: Time in seconds between status checks (default: 5)\n    \nReturns:\n    Dictionary containing the completed workflow data including results\n', 'inputSchema': {'properties': {'workflow_uuid': {'title': 'Workflow Uuid', 'type': 'string'}, 'poll_interval': {'default': 5, 'title': 'Poll Interval', 'type': 'integer'}}, 'required': ['workflow_uuid'], 'type': 'object'}}, {'name': 'workflow_get_status', 'description': 'Get the current status of a workflow.\n\nArgs:\n    workflow_uuid: The UUID of the workflow\n    \nReturns:\n    Dictionary with status information\n', 'inputSchema': {'properties': {'workflow_uuid': {'title': 'Workflow Uuid', 'type': 'string'}}, 'required': ['workflow_uuid'], 'type': 'object'}}, {'name': 'workflow_stop', 'description': 'Stop a running workflow.\n\nArgs:\n    workflow_uuid: The UUID of the workflow to stop\n    \nReturns:\n    Dictionary with confirmation message\n', 'inputSchema': {'properties': {'workflow_uuid': {'title': 'Workflow Uuid', 'type': 'string'}}, 'required': ['workflow_uuid'], 'type': 'object'}}, {'name': 'workflow_delete', 'description': 'Delete a workflow.\n\nThis permanently removes the workflow and its results from the database.\n\nArgs:\n    workflow_uuid: The UUID of the workflow to delete\n    \nReturns:\n    Dictionary with confirmation message\n', 'inputSchema': {'properties': {'workflow_uuid': {'title': 'Workflow Uuid', 'type': 'string'}}, 'required': ['workflow_uuid'], 'type': 'object'}}, {'name': 'retrieve_workflow', 'description': 'Retrieve a workflow from the API.\n\nArgs:\n    uuid: The UUID of the workflow to retrieve\n    \nReturns:\n    Dictionary containing the complete workflow data\n    \nRaises:\n    HTTPError: If the API request fails\n', 'inputSchema': {'properties': {'uuid': {'title': 'Uuid', 'type': 'string'}}, 'required': ['uuid'], 'type': 'object'}}, {'name': 'retrieve_calculation_molecules', 'description': 'Retrieve a list of molecules from a calculation.\n\nArgs:\n    uuid: The UUID of the calculation to retrieve molecules from\n    \nReturns:\n    List of dictionaries representing the molecules in the calculation\n    \nRaises:\n    HTTPError: If the API request fails\n', 'inputSchema': {'properties': {'uuid': {'title': 'Uuid', 'type': 'string'}}, 'required': ['uuid'], 'type': 'object'}}, {'name': 'list_workflows', 'description': 'List workflows subject to the specified criteria.\n\nArgs:\n    parent_uuid: The UUID of the parent folder\n    name_contains: Substring to search for in workflow names\n    public: Filter workflows by their public status\n    starred: Filter workflows by their starred status\n    status: Filter workflows by their status\n    workflow_type: Filter workflows by their type\n    page: The page number to retrieve (default: 0)\n    size: The number of items per page (default: 10)\n    \nReturns:\n    List of workflow dictionaries that match the search criteria\n    \nRaises:\n    HTTPError: If the request to the API fails\n', 'inputSchema': {'properties': {'parent_uuid': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Parent Uuid'}, 'name_contains': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Name Contains'}, 'public': {'anyOf': [{'type': 'boolean'}, {'type': 'null'}], 'default': None, 'title': 'Public'}, 'starred': {'anyOf': [{'type': 'boolean'}, {'type': 'null'}], 'default': None, 'title': 'Starred'}, 'status': {'anyOf': [{'type': 'integer'}, {'type': 'null'}], 'default': None, 'title': 'Status'}, 'workflow_type': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Workflow Type'}, 'page': {'default': 0, 'title': 'Page', 'type': 'integer'}, 'size': {'default': 10, 'title': 'Size', 'type': 'integer'}}, 'type': 'object'}}, {'name': 'workflow_update', 'description': 'Update workflow details.\n\nArgs:\n    workflow_uuid: The UUID of the workflow to update\n    name: New name for the workflow (optional)\n    notes: New notes for the workflow (optional)\n    starred: Whether to star/unstar the workflow (optional)\n    public: Whether to make the workflow public/private (optional)\n    \nReturns:\n    Dictionary with updated workflow information\n', 'inputSchema': {'properties': {'workflow_uuid': {'title': 'Workflow Uuid', 'type': 'string'}, 'name': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Name'}, 'notes': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Notes'}, 'starred': {'anyOf': [{'type': 'boolean'}, {'type': 'null'}], 'default': None, 'title': 'Starred'}, 'public': {'anyOf': [{'type': 'boolean'}, {'type': 'null'}], 'default': None, 'title': 'Public'}}, 'required': ['workflow_uuid'], 'type': 'object'}}, {'name': 'workflow_is_finished', 'description': 'Check if a workflow is finished.\n\nArgs:\n    workflow_uuid: The UUID of the workflow to check\n    \nReturns:\n    Dictionary with workflow completion status\n', 'inputSchema': {'properties': {'workflow_uuid': {'title': 'Workflow Uuid', 'type': 'string'}}, 'required': ['workflow_uuid'], 'type': 'object'}}, {'name': 'workflow_delete_data', 'description': 'Delete workflow data while keeping the workflow record.\n\nArgs:\n    workflow_uuid: The UUID of the workflow\n    \nReturns:\n    Dictionary with confirmation message\n', 'inputSchema': {'properties': {'workflow_uuid': {'title': 'Workflow Uuid', 'type': 'string'}}, 'required': ['workflow_uuid'], 'type': 'object'}}]})), metadata=None)
2025-08-02 14:02:13,115 - mcp.server.lowlevel.server - DEBUG - Response sent
2025-08-02 14:02:13,115 - sse_starlette.sse - DEBUG - chunk: b'event: message\r\ndata: {"jsonrpc":"2.0","id":3,"result":{"tools":[{"name":"submit_basic_calculation_workflow","description":"Submit a basic calculation workflow using Rowan v2 API.\\n\\nPerforms fundamental quantum chemistry calculations with configurable methods\\nand computational tasks. Returns a workflow object for tracking progress.\\n","inputSchema":{"properties":{"initial_molecule":{"anyOf":[{"type":"string"},{"additionalProperties":true,"type":"object"},{}],"description":"The molecule to perform the calculation on. Can be a SMILES string, dict, StJamesMolecule, or RdkitMol object","title":"Initial Molecule"},"method":{"default":"uma_m_omol","description":"The method to use for the calculation (e.g., \'uma_m_omol\', \'gfn2-xtb\', \'r2scan_3c\')","title":"Method","type":"string"},"tasks":{"anyOf":[{"items":{"type":"string"},"type":"array"},{"type":"null"}],"default":null,"description":"List of computational tasks to perform. Optional[List[str]] (e.g. [\'optimize\']), Defaults to None","title":"Tasks"},"mode":{"default":"auto","description":"The mode to run the calculation in (\'auto\', \'rapid\', \'careful\', \'meticulous\')","title":"Mode","type":"string"},"engine":{"default":"omol25","description":"The computational engine to use (\'omol25\', \'xtb\', \'psi4\')","title":"Engine","type":"string"},"name":{"default":"Basic Calculation Workflow","description":"The name of the workflow for identification","title":"Name","type":"string"},"folder_uuid":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"description":"UUID of the folder to place the workflow in (optional)","title":"Folder Uuid"},"max_credits":{"anyOf":[{"type":"integer"},{"type":"null"}],"default":null,"description":"Maximum number of credits to use for the workflow (optional)","title":"Max Credits"}},"required":["initial_molecule"],"type":"object"}},{"name":"submit_conformer_search_workflow","description":"Submit a conformer search workflow using Rowan v2 API.\\n\\nExplores the conformational space of a molecule to find low-energy structures.\\n\\nArgs:\\n    initial_molecule: SMILES string or molecule object\\n    conf_gen_mode: default to \\"rapid\\"\\n        Options: \\"rapid\\", \\"careful\\", \\"meticulous\\"\\n    final_method: default: \\"aimnet2_wb97md3\\"\\n        Try other options, if user specifies\\n    solvent: Optional solvent for implicit solvation (e.g., \\"water\\", \\"ethanol\\")\\n    transition_state: Whether searching for transition state conformers (default: False)\\n    name: Workflow name for tracking\\n    folder_uuid: Optional folder UUID for organization\\n    max_credits: Optional credit limit for the calculation\\n    \\nReturns:\\n    Workflow object representing the submitted workflow\\n    \\nExample:\\n    # Basic conformer search\\n    result = submit_conformer_search_workflow(\\n        initial_molecule=\\"CCCC\\",\\n        conf_gen_mode=\\"rapid\\"\\n    )\\n    \\n    # Careful search with solvent\\n    result = submit_conformer_search_workflow(\\n        initial_molecule=\\"CC(C)CC(=O)O\\",\\n        conf_gen_mode=\\"careful\\",\\n        solvent=\\"water\\",\\n        final_method=\\"r2scan_3c\\"\\n    )\\n","inputSchema":{"properties":{"initial_molecule":{"title":"Initial Molecule","type":"string"},"conf_gen_mode":{"default":"rapid","title":"Conf Gen Mode","type":"string"},"final_method":{"default":"aimnet2_wb97md3","title":"Final Method","type":"string"},"solvent":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"title":"Solvent"},"transition_state":{"default":false,"title":"Transition State","type":"boolean"},"name":{"default":"Conformer Search Workflow","title":"Name","type":"string"},"folder_uuid":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"title":"Folder Uuid"},"max_credits":{"anyOf":[{"type":"integer"},{"type":"null"}],"default":null,"title":"Max Credits"}},"required":["initial_molecule"],"type":"object"}},{"name":"submit_solubility_workflow","description":"Submit a solubility prediction workflow using Rowan v2 API.\\n\\nPredicts solubility (log S) of a molecule in multiple solvents at various temperatures\\nusing machine learning models.\\n\\nArgs:\\n    initial_smiles: SMILES string of the molecule\\n    solvents: List of solvents as SMILES or common names (e.g., [\\"water\\", \\"ethanol\\"])\\n        If None, uses default solvents\\n    temperatures: List of temperatures in Kelvin\\n        If None, uses default temperature range\\n    name: Workflow name for tracking\\n    folder_uuid: Optional folder UUID for organization\\n    max_credits: Optional credit limit for the calculation\\n    \\nReturns:\\n    Workflow object representing the submitted workflow\\n    \\nExample:\\n    # Basic solubility prediction\\n    result = submit_solubility_workflow(\\n        initial_smiles=\\"CC(=O)Nc1ccc(O)cc1\\",\\n        solvents=[\\"water\\", \\"ethanol\\"],\\n        temperatures=[298.15, 310.15]\\n    )\\n    \\n    # With SMILES solvents\\n    result = submit_solubility_workflow(\\n        initial_smiles=\\"CC(=O)O\\",\\n        solvents=[\\"O\\", \\"CCO\\", \\"CCCCCC\\"],\\n        temperatures=[273.15, 298.15, 323.15]\\n    )\\n","inputSchema":{"properties":{"initial_smiles":{"title":"Initial Smiles","type":"string"},"solvents":{"anyOf":[{"items":{"type":"string"},"type":"array"},{"type":"null"}],"default":null,"title":"Solvents"},"temperatures":{"anyOf":[{"items":{"type":"number"},"type":"array"},{"type":"null"}],"default":null,"title":"Temperatures"},"name":{"default":"Solubility Workflow","title":"Name","type":"string"},"folder_uuid":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"title":"Folder Uuid"},"max_credits":{"anyOf":[{"type":"integer"},{"type":"null"}],"default":null,"title":"Max Credits"}},"required":["initial_smiles"],"type":"object"}},{"name":"submit_pka_workflow","description":"Submit a pKa prediction workflow using Rowan v2 API.\\n\\nPredicts acid dissociation constants (pKa) for ionizable groups in a molecule\\nusing quantum chemistry calculations.\\n\\nArgs:\\n    initial_molecule: SMILES string or molecule object\\n    pka_range: Tuple of (min, max) pKa values to search (default: (2, 12))\\n    deprotonate_elements: List of elements to consider for deprotonation\\n        (e.g., [\\"N\\", \\"O\\", \\"S\\"]). If None, uses defaults\\n    protonate_elements: List of elements to consider for protonation\\n        (e.g., [\\"N\\", \\"O\\"]). If None, uses defaults\\n    mode: Calculation mode (default: \\"careful\\")\\n        Options: \\"rapid\\", \\"careful\\", \\"meticulous\\"\\n    name: Workflow name for tracking\\n    folder_uuid: Optional folder UUID for organization\\n    max_credits: Optional credit limit for the calculation\\n    \\nReturns:\\n    Workflow object representing the submitted workflow\\n    \\nExample:\\n    # Basic pKa prediction\\n    result = submit_pka_workflow(\\n        initial_molecule=\\"CC(=O)O\\",\\n        pka_range=(2, 8)\\n    )\\n    \\n    # Specific elements with meticulous mode\\n    result = submit_pka_workflow(\\n        initial_molecule=\\"NC(C)C(=O)O\\",\\n        pka_range=(1, 14),\\n        deprotonate_elements=[\\"N\\", \\"O\\"],\\n        mode=\\"meticulous\\"\\n    )\\n","inputSchema":{"properties":{"initial_molecule":{"title":"Initial Molecule","type":"string"},"pka_range":{"default":[2,12],"maxItems":2,"minItems":2,"prefixItems":[{"type":"number"},{"type":"number"}],"title":"Pka Range","type":"array"},"deprotonate_elements":{"anyOf":[{"items":{"type":"string"},"type":"array"},{"type":"null"}],"default":null,"title":"Deprotonate Elements"},"protonate_elements":{"anyOf":[{"items":{"type":"string"},"type":"array"},{"type":"null"}],"default":null,"title":"Protonate Elements"},"mode":{"default":"careful","title":"Mode","type":"string"},"name":{"default":"pKa Workflow","title":"Name","type":"string"},"folder_uuid":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"title":"Folder Uuid"},"max_credits":{"anyOf":[{"type":"integer"},{"type":"null"}],"default":null,"title":"Max Credits"}},"required":["initial_molecule"],"type":"object"}},{"name":"submit_redox_potential_workflow","description":"Submit a redox potential calculation workflow using Rowan v2 API.\\n\\nCalculates reduction and/or oxidation potentials for a molecule using\\nquantum chemistry methods.\\n\\nArgs:\\n    initial_molecule: SMILES string or molecule object\\n    reduction: Whether to calculate reduction potential (default: False)\\n    oxidization: Whether to calculate oxidation potential (default: True)\\n    mode: Calculation mode (default: \\"rapid\\")\\n        Options: \\"rapid\\", \\"careful\\", \\"meticulous\\"\\n    name: Workflow name for tracking\\n    folder_uuid: Optional folder UUID for organization\\n    max_credits: Optional credit limit for the calculation\\n    \\nReturns:\\n    Workflow object representing the submitted workflow\\n    \\nExample:\\n    # Basic oxidation potential\\n    result = submit_redox_potential_workflow(\\n        initial_molecule=\\"CC1=CC=CC=C1\\",\\n        oxidization=True\\n    )\\n    \\n    # Both reduction and oxidation with careful mode\\n    result = submit_redox_potential_workflow(\\n        initial_molecule=\\"c1ccccc1\\",\\n        reduction=True,\\n        oxidization=True,\\n        mode=\\"careful\\"\\n    )\\n","inputSchema":{"properties":{"initial_molecule":{"title":"Initial Molecule","type":"string"},"reduction":{"default":false,"title":"Reduction","type":"boolean"},"oxidization":{"default":true,"title":"Oxidization","type":"boolean"},"mode":{"default":"rapid","title":"Mode","type":"string"},"name":{"default":"Redox Potential Workflow","title":"Name","type":"string"},"folder_uuid":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"title":"Folder Uuid"},"max_credits":{"anyOf":[{"type":"integer"},{"type":"null"}],"default":null,"title":"Max Credits"}},"required":["initial_molecule"],"type":"object"}},{"name":"submit_fukui_workflow","description":"Submit a Fukui indices calculation workflow using Rowan v2 API.\\n\\nCalculates Fukui indices to predict molecular reactivity at different sites.\\nFukui indices indicate susceptibility to nucleophilic/electrophilic attack.\\n\\nArgs:\\n    initial_molecule: SMILES string or molecule object\\n    optimization_method: Method for geometry optimization (default: \\"gfn2_xtb\\")\\n        Common options: \\"gfn2_xtb\\", \\"r2scan_3c\\", \\"aimnet2_wb97md3\\"\\n    fukui_method: Method for Fukui calculation (default: \\"gfn1_xtb\\")\\n        Common options: \\"gfn1_xtb\\", \\"gfn2_xtb\\"\\n    solvent_settings: Optional solvent configuration dictionary\\n        Example: {\\"solvent\\": \\"water\\", \\"model\\": \\"alpb\\"}\\n    name: Workflow name for tracking\\n    folder_uuid: Optional folder UUID for organization\\n    max_credits: Optional credit limit for the calculation\\n    \\nReturns:\\n    Workflow object representing the submitted workflow\\n    \\nExample:\\n    # Basic Fukui indices\\n    result = submit_fukui_workflow(\\n        initial_molecule=\\"CC(=O)O\\"\\n    )\\n    \\n    # With solvent and advanced methods\\n    result = submit_fukui_workflow(\\n        initial_molecule=\\"c1ccccc1N\\",\\n        optimization_method=\\"r2scan_3c\\",\\n        fukui_method=\\"gfn2_xtb\\",\\n        solvent_settings={\\"solvent\\": \\"water\\", \\"model\\": \\"alpb\\"}\\n    )\\n","inputSchema":{"properties":{"initial_molecule":{"title":"Initial Molecule","type":"string"},"optimization_method":{"default":"gfn2_xtb","title":"Optimization Method","type":"string"},"fukui_method":{"default":"gfn1_xtb","title":"Fukui Method","type":"string"},"solvent_settings":{"anyOf":[{"additionalProperties":true,"type":"object"},{"type":"null"}],"default":null,"title":"Solvent Settings"},"name":{"default":"Fukui Workflow","title":"Name","type":"string"},"folder_uuid":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"title":"Folder Uuid"},"max_credits":{"anyOf":[{"type":"integer"},{"type":"null"}],"default":null,"title":"Max Credits"}},"required":["initial_molecule"],"type":"object"}},{"name":"submit_tautomer_search_workflow","description":"Submit a tautomer search workflow using Rowan v2 API.\\n\\nSearches for different tautomeric forms of a molecule and evaluates their\\nrelative stabilities. Tautomers are structural isomers that readily interconvert.\\n\\nArgs:\\n    initial_molecule: SMILES string or molecule object\\n    mode: Search mode (default: \\"careful\\")\\n        Options: \\"rapid\\", \\"careful\\", \\"meticulous\\"\\n    name: Workflow name for tracking\\n    folder_uuid: Optional folder UUID for organization\\n    max_credits: Optional credit limit for the calculation\\n    \\nReturns:\\n    Workflow object representing the submitted workflow\\n    \\nExample:\\n    # Basic tautomer search\\n    result = submit_tautomer_search_workflow(\\n        initial_molecule=\\"CC(=O)CC(=O)C\\"\\n    )\\n    \\n    # Meticulous search for complex molecule\\n    result = submit_tautomer_search_workflow(\\n        initial_molecule=\\"c1ccc2c(c1)ncc(=O)[nH]2\\",\\n        mode=\\"meticulous\\"\\n    )\\n","inputSchema":{"properties":{"initial_molecule":{"title":"Initial Molecule","type":"string"},"mode":{"default":"careful","title":"Mode","type":"string"},"name":{"default":"Tautomer Search Workflow","title":"Name","type":"string"},"folder_uuid":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"title":"Folder Uuid"},"max_credits":{"anyOf":[{"type":"integer"},{"type":"null"}],"default":null,"title":"Max Credits"}},"required":["initial_molecule"],"type":"object"}},{"name":"submit_descriptors_workflow","description":"Submit a molecular descriptors calculation workflow using Rowan v2 API.\\n\\nCalculates a comprehensive set of molecular descriptors including:\\n- Physical properties (MW, logP, TPSA, etc.)\\n- Electronic properties (HOMO/LUMO, dipole moment, etc.)\\n- Structural features (rotatable bonds, H-bond donors/acceptors, etc.)\\n- Topological indices\\n\\nArgs:\\n    initial_molecule: SMILES string or molecule object\\n    name: Workflow name for tracking\\n    folder_uuid: Optional folder UUID for organization\\n    max_credits: Optional credit limit for the calculation\\n    \\nReturns:\\n    Workflow object representing the submitted workflow\\n    \\nExample:\\n    # Basic descriptor calculation\\n    result = submit_descriptors_workflow(\\n        initial_molecule=\\"CC(=O)Nc1ccc(O)cc1\\"\\n    )\\n    \\n    # For complex molecule\\n    result = submit_descriptors_workflow(\\n        initial_molecule=\\"CN1C=NC2=C1C(=O)N(C(=O)N2C)C\\",\\n        name=\\"Caffeine Descriptors\\"\\n    )\\n","inputSchema":{"properties":{"initial_molecule":{"title":"Initial Molecule","type":"string"},"name":{"default":"Descriptors Workflow","title":"Name","type":"string"},"folder_uuid":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"title":"Folder Uuid"},"max_credits":{"anyOf":[{"type":"integer"},{"type":"null"}],"default":null,"title":"Max Credits"}},"required":["initial_molecule"],"type":"object"}},{"name":"submit_scan_workflow","description":"Submit a potential energy surface scan workflow using Rowan v2 API.\\n\\nPerforms systematic scans along specified molecular coordinates (bonds, angles,\\nor dihedrals) to map the potential energy surface.\\n\\nArgs:\\n    initial_molecule: SMILES string or molecule object\\n    scan_settings: Dictionary specifying scan parameters\\n        Example: {\\n            \\"type\\": \\"dihedral\\",  # or \\"bond\\", \\"angle\\"\\n            \\"atoms\\": [0, 1, 2, 3],  # atom indices\\n            \\"start\\": -180,\\n            \\"stop\\": 180,\\n            \\"step\\": 10\\n        }\\n    calculation_engine: Computational engine (default: \\"omol25\\")\\n        Options: \\"omol25\\", \\"xtb\\", \\"psi4\\"\\n    calculation_method: Method for calculations (default: \\"uma_m_omol\\")\\n        Options depend on engine\\n    wavefront_propagation: Use wavefront optimization (default: True)\\n        Speeds up scans by using previous geometries as starting points\\n    name: Workflow name for tracking\\n    folder_uuid: Optional folder UUID for organization\\n    max_credits: Optional credit limit for the calculation\\n    \\nReturns:\\n    Workflow object representing the submitted workflow\\n    \\nExample:\\n    # Dihedral scan\\n    result = submit_scan_workflow(\\n        initial_molecule=\\"CC(C)CC\\",\\n        scan_settings={\\n            \\"type\\": \\"dihedral\\",\\n            \\"atoms\\": [0, 1, 2, 3],\\n            \\"start\\": -180,\\n            \\"stop\\": 180,\\n            \\"step\\": 15\\n        }\\n    )\\n    \\n    # Bond scan with advanced method\\n    result = submit_scan_workflow(\\n        initial_molecule=\\"CC\\",\\n        scan_settings={\\n            \\"type\\": \\"bond\\",\\n            \\"atoms\\": [0, 1],\\n            \\"start\\": 1.0,\\n            \\"stop\\": 2.5,\\n            \\"step\\": 0.1\\n        },\\n        calculation_method=\\"r2scan_3c\\"\\n    )\\n","inputSchema":{"properties":{"initial_molecule":{"title":"Initial Molecule","type":"string"},"scan_settings":{"anyOf":[{"additionalProperties":true,"type":"object"},{"type":"null"}],"default":null,"title":"Scan Settings"},"calculation_engine":{"default":"omol25","title":"Calculation Engine","type":"string"},"calculation_method":{"default":"uma_m_omol","title":"Calculation Method","type":"string"},"wavefront_propagation":{"default":true,"title":"Wavefront Propagation","type":"boolean"},"name":{"default":"Scan Workflow","title":"Name","type":"string"},"folder_uuid":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"title":"Folder Uuid"},"max_credits":{"anyOf":[{"type":"integer"},{"type":"null"}],"default":null,"title":"Max Credits"}},"required":["initial_molecule"],"type":"object"}},{"name":"submit_irc_workflow","description":"Submits an Intrinsic Reaction Coordinate (IRC) workflow to the API.\\n\\nArgs:\\n    initial_molecule: The initial molecule to perform the IRC calculation on.\\n        Can be a dict, StJamesMolecule, or RdkitMol object\\n    method: The computational method to use for the IRC calculation (default: \\"uma_m_omol\\")\\n        See list of available methods for options\\n    engine: The computational engine to use for the calculation (default: \\"omol25\\")\\n        See list of available engines\\n    preopt: Whether to perform a pre-optimization of the molecule (default: True)\\n    step_size: The step size to use for the IRC calculation (default: 0.05)\\n    max_irc_steps: The maximum number of IRC steps to perform (default: 30)\\n    name: The name of the workflow\\n    folder_uuid: The UUID of the folder to place the workflow in\\n    max_credits: The maximum number of credits to use for the workflow\\n    \\nReturns:\\n    Workflow object representing the submitted IRC workflow\\n    \\nExample:\\n    # Basic IRC calculation\\n    result = submit_irc_workflow(\\n        initial_molecule={\\"smiles\\": \\"[CH3].[CH3]\\"},\\n        method=\\"gfn2_xtb\\",\\n        max_irc_steps=50\\n    )\\n    \\n    # IRC with specific method and engine\\n    result = submit_irc_workflow(\\n        initial_molecule={\\"smiles\\": \\"CC(O)=CC\\"},\\n        method=\\"r2scan_3c\\",\\n        engine=\\"psi4\\",\\n        step_size=0.03\\n    )\\n","inputSchema":{"properties":{"initial_molecule":{"anyOf":[{"additionalProperties":true,"type":"object"},{},{"type":"null"}],"default":null,"title":"Initial Molecule"},"method":{"default":"uma_m_omol","title":"Method","type":"string"},"engine":{"default":"omol25","title":"Engine","type":"string"},"preopt":{"default":true,"title":"Preopt","type":"boolean"},"step_size":{"default":0.05,"title":"Step Size","type":"number"},"max_irc_steps":{"default":30,"title":"Max Irc Steps","type":"integer"},"name":{"default":"IRC Workflow","title":"Name","type":"string"},"folder_uuid":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"title":"Folder Uuid"},"max_credits":{"anyOf":[{"type":"integer"},{"type":"null"}],"default":null,"title":"Max Credits"}},"type":"object"}},{"name":"submit_protein_cofolding_workflow","description":"Submits a protein cofolding workflow to the API.\\n\\nArgs:\\n    initial_protein_sequences: The sequences of the proteins to be cofolded\\n    initial_smiles_list: A list of SMILES strings for the ligands to be cofolded with\\n    ligand_binding_affinity_index: The index of the ligand for which to compute the binding affinity\\n    use_msa_server: Whether to use the MSA server for the computation\\n    use_potentials: Whether to use potentials for the computation\\n    name: The name of the workflow\\n    model: The model to use for the computation\\n    folder_uuid: The UUID of the folder to store the workflow in\\n    max_credits: The maximum number of credits to use for the workflow\\n    \\nReturns:\\n    Workflow object representing the submitted workflow\\n    \\nExample:\\n    # Protein dimer cofolding\\n    result = submit_protein_cofolding_workflow(\\n        initial_protein_sequences=[\\n            \\"MKTAYIAKQRQISFVKSHFSRQLEERLGLIEVQAPILSRVGDGTQDNLSGAEK\\",\\n            \\"MKQHKAMIVALIVICITAVVAALVTRKDLCEVHIRTGQTEVAVF\\"\\n        ]\\n    )\\n    \\n    # Protein-ligand complex\\n    result = submit_protein_cofolding_workflow(\\n        initial_protein_sequences=[\\"MGSSHHHHHHSSGLVPRGSH\\"],\\n        initial_smiles_list=[\\"CC(=O)O\\", \\"CCO\\"],\\n        ligand_binding_affinity_index=0,\\n        use_msa_server=True\\n    )\\n","inputSchema":{"properties":{"initial_protein_sequences":{"items":{"type":"string"},"title":"Initial Protein Sequences","type":"array"},"initial_smiles_list":{"anyOf":[{"items":{"type":"string"},"type":"array"},{"type":"null"}],"default":null,"title":"Initial Smiles List"},"ligand_binding_affinity_index":{"anyOf":[{"type":"integer"},{"type":"null"}],"default":null,"title":"Ligand Binding Affinity Index"},"use_msa_server":{"default":true,"title":"Use Msa Server","type":"boolean"},"use_potentials":{"default":false,"title":"Use Potentials","type":"boolean"},"name":{"default":"Cofolding Workflow","title":"Name","type":"string"},"model":{"default":"boltz_2","title":"Model","type":"string"},"folder_uuid":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"title":"Folder Uuid"},"max_credits":{"anyOf":[{"type":"integer"},{"type":"null"}],"default":null,"title":"Max Credits"}},"required":["initial_protein_sequences"],"type":"object"}},{"name":"submit_docking_workflow","description":"Submits a Docking workflow to the API.\\n\\nArgs:\\n    protein: The protein to dock. Can be fed as a uuid or a Protein object\\n    pocket: The pocket to dock into\\n    initial_molecule: The initial molecule to be docked.\\n        Can be a dict, StJamesMolecule, or RdkitMol object\\n    do_csearch: Whether to perform a conformational search on the ligand\\n    do_optimization: Whether to perform an optimization on the ligand\\n    name: The name of the workflow\\n    folder_uuid: The UUID of the folder to place the workflow in\\n    max_credits: The maximum number of credits to use for the workflow\\n    \\nReturns:\\n    Workflow object representing the submitted workflow\\n    \\nExample:\\n    # Basic docking with protein UUID\\n    result = submit_docking_workflow(\\n        protein=\\"protein-uuid-123\\",\\n        pocket=pocket_obj,\\n        initial_molecule={\\"smiles\\": \\"CC(=O)Oc1ccccc1C(=O)O\\"}\\n    )\\n    \\n    # Docking with optimization disabled\\n    result = submit_docking_workflow(\\n        protein=protein_obj,\\n        pocket=pocket_obj,\\n        initial_molecule={\\"smiles\\": \\"CCO\\"},\\n        do_csearch=False,\\n        do_optimization=False\\n    )\\n","inputSchema":{"properties":{"protein":{"anyOf":[{"type":"string"},{}],"title":"Protein"},"pocket":{"title":"Pocket"},"initial_molecule":{"anyOf":[{"additionalProperties":true,"type":"object"},{},{"type":"null"}],"default":null,"title":"Initial Molecule"},"do_csearch":{"default":true,"title":"Do Csearch","type":"boolean"},"do_optimization":{"default":true,"title":"Do Optimization","type":"boolean"},"name":{"default":"Docking Workflow","title":"Name","type":"string"},"folder_uuid":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"title":"Folder Uuid"},"max_credits":{"anyOf":[{"type":"integer"},{"type":"null"}],"default":null,"title":"Max Credits"}},"required":["protein","pocket"],"type":"object"}},{"name":"workflow_fetch_latest","description":"Fetch the latest workflow data from the database.\\n\\nUpdates the workflow object with the most recent status and results.\\n\\nArgs:\\n    workflow_uuid: The UUID of the workflow to fetch\\n    in_place: Whether to update the workflow object in place (default: False)\\n    \\nReturns:\\n    Dictionary containing the updated workflow data including status and results\\n","inputSchema":{"properties":{"workflow_uuid":{"title":"Workflow Uuid","type":"string"},"in_place":{"default":false,"title":"In Place","type":"boolean"}},"required":["workflow_uuid"],"type":"object"}},{"name":"workflow_wait_for_result","description":"Wait for a workflow to complete and return the result.\\n\\nBlocks until the workflow completes, polling at specified intervals.\\n\\nArgs:\\n    workflow_uuid: The UUID of the workflow to wait for\\n    poll_interval: Time in seconds between status checks (default: 5)\\n    \\nReturns:\\n    Dictionary containing the completed workflow data including results\\n","inputSchema":{"properties":{"workflow_uuid":{"title":"Workflow Uuid","type":"string"},"poll_interval":{"default":5,"title":"Poll Interval","type":"integer"}},"required":["workflow_uuid"],"type":"object"}},{"name":"workflow_get_status","description":"Get the current status of a workflow.\\n\\nArgs:\\n    workflow_uuid: The UUID of the workflow\\n    \\nReturns:\\n    Dictionary with status information\\n","inputSchema":{"properties":{"workflow_uuid":{"title":"Workflow Uuid","type":"string"}},"required":["workflow_uuid"],"type":"object"}},{"name":"workflow_stop","description":"Stop a running workflow.\\n\\nArgs:\\n    workflow_uuid: The UUID of the workflow to stop\\n    \\nReturns:\\n    Dictionary with confirmation message\\n","inputSchema":{"properties":{"workflow_uuid":{"title":"Workflow Uuid","type":"string"}},"required":["workflow_uuid"],"type":"object"}},{"name":"workflow_delete","description":"Delete a workflow.\\n\\nThis permanently removes the workflow and its results from the database.\\n\\nArgs:\\n    workflow_uuid: The UUID of the workflow to delete\\n    \\nReturns:\\n    Dictionary with confirmation message\\n","inputSchema":{"properties":{"workflow_uuid":{"title":"Workflow Uuid","type":"string"}},"required":["workflow_uuid"],"type":"object"}},{"name":"retrieve_workflow","description":"Retrieve a workflow from the API.\\n\\nArgs:\\n    uuid: The UUID of the workflow to retrieve\\n    \\nReturns:\\n    Dictionary containing the complete workflow data\\n    \\nRaises:\\n    HTTPError: If the API request fails\\n","inputSchema":{"properties":{"uuid":{"title":"Uuid","type":"string"}},"required":["uuid"],"type":"object"}},{"name":"retrieve_calculation_molecules","description":"Retrieve a list of molecules from a calculation.\\n\\nArgs:\\n    uuid: The UUID of the calculation to retrieve molecules from\\n    \\nReturns:\\n    List of dictionaries representing the molecules in the calculation\\n    \\nRaises:\\n    HTTPError: If the API request fails\\n","inputSchema":{"properties":{"uuid":{"title":"Uuid","type":"string"}},"required":["uuid"],"type":"object"}},{"name":"list_workflows","description":"List workflows subject to the specified criteria.\\n\\nArgs:\\n    parent_uuid: The UUID of the parent folder\\n    name_contains: Substring to search for in workflow names\\n    public: Filter workflows by their public status\\n    starred: Filter workflows by their starred status\\n    status: Filter workflows by their status\\n    workflow_type: Filter workflows by their type\\n    page: The page number to retrieve (default: 0)\\n    size: The number of items per page (default: 10)\\n    \\nReturns:\\n    List of workflow dictionaries that match the search criteria\\n    \\nRaises:\\n    HTTPError: If the request to the API fails\\n","inputSchema":{"properties":{"parent_uuid":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"title":"Parent Uuid"},"name_contains":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"title":"Name Contains"},"public":{"anyOf":[{"type":"boolean"},{"type":"null"}],"default":null,"title":"Public"},"starred":{"anyOf":[{"type":"boolean"},{"type":"null"}],"default":null,"title":"Starred"},"status":{"anyOf":[{"type":"integer"},{"type":"null"}],"default":null,"title":"Status"},"workflow_type":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"title":"Workflow Type"},"page":{"default":0,"title":"Page","type":"integer"},"size":{"default":10,"title":"Size","type":"integer"}},"type":"object"}},{"name":"workflow_update","description":"Update workflow details.\\n\\nArgs:\\n    workflow_uuid: The UUID of the workflow to update\\n    name: New name for the workflow (optional)\\n    notes: New notes for the workflow (optional)\\n    starred: Whether to star/unstar the workflow (optional)\\n    public: Whether to make the workflow public/private (optional)\\n    \\nReturns:\\n    Dictionary with updated workflow information\\n","inputSchema":{"properties":{"workflow_uuid":{"title":"Workflow Uuid","type":"string"},"name":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"title":"Name"},"notes":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"title":"Notes"},"starred":{"anyOf":[{"type":"boolean"},{"type":"null"}],"default":null,"title":"Starred"},"public":{"anyOf":[{"type":"boolean"},{"type":"null"}],"default":null,"title":"Public"}},"required":["workflow_uuid"],"type":"object"}},{"name":"workflow_is_finished","description":"Check if a workflow is finished.\\n\\nArgs:\\n    workflow_uuid: The UUID of the workflow to check\\n    \\nReturns:\\n    Dictionary with workflow completion status\\n","inputSchema":{"properties":{"workflow_uuid":{"title":"Workflow Uuid","type":"string"}},"required":["workflow_uuid"],"type":"object"}},{"name":"workflow_delete_data","description":"Delete workflow data while keeping the workflow record.\\n\\nArgs:\\n    workflow_uuid: The UUID of the workflow\\n    \\nReturns:\\n    Dictionary with confirmation message\\n","inputSchema":{"properties":{"workflow_uuid":{"title":"Workflow Uuid","type":"string"}},"required":["workflow_uuid"],"type":"object"}}]}}\r\n\r\n'
2025-08-02 14:02:13,128 - mcp.server.sse - DEBUG - Handling POST message
2025-08-02 14:02:13,128 - mcp.server.sse - DEBUG - Parsed session ID: ecdaefbf-d9a6-4d2b-81ed-fab73c158e7b
2025-08-02 14:02:13,128 - mcp.server.sse - DEBUG - Received JSON: b'{"method":"prompts/list","jsonrpc":"2.0","id":4}'
2025-08-02 14:02:13,128 - mcp.server.sse - DEBUG - Validated client message: root=JSONRPCRequest(method='prompts/list', params=None, jsonrpc='2.0', id=4)
2025-08-02 14:02:13,128 - mcp.server.sse - DEBUG - Sending session message to writer: SessionMessage(message=JSONRPCMessage(root=JSONRPCRequest(method='prompts/list', params=None, jsonrpc='2.0', id=4)), metadata=ServerMessageMetadata(related_request_id=None, request_context=<starlette.requests.Request object at 0x10a106c30>))
2025-08-02 14:02:13,129 - mcp.server.lowlevel.server - DEBUG - Received message: <mcp.shared.session.RequestResponder object at 0x10a0271d0>
2025-08-02 14:02:13,129 - mcp.server.lowlevel.server - INFO - Processing request of type ListPromptsRequest
2025-08-02 14:02:13,129 - mcp.server.lowlevel.server - DEBUG - Dispatching request of type ListPromptsRequest
2025-08-02 14:02:13,129 - mcp.server.lowlevel.server - DEBUG - Response sent
2025-08-02 14:02:13,129 - mcp.server.sse - DEBUG - Sending message via SSE: SessionMessage(message=JSONRPCMessage(root=JSONRPCResponse(jsonrpc='2.0', id=4, result={'prompts': []})), metadata=None)
2025-08-02 14:02:13,129 - sse_starlette.sse - DEBUG - chunk: b'event: message\r\ndata: {"jsonrpc":"2.0","id":4,"result":{"prompts":[]}}\r\n\r\n'
2025-08-02 14:02:13,132 - mcp.server.sse - DEBUG - Handling POST message
2025-08-02 14:02:13,133 - mcp.server.sse - DEBUG - Parsed session ID: ecdaefbf-d9a6-4d2b-81ed-fab73c158e7b
2025-08-02 14:02:13,133 - mcp.server.sse - DEBUG - Received JSON: b'{"method":"prompts/list","jsonrpc":"2.0","id":5}'
2025-08-02 14:02:13,133 - mcp.server.sse - DEBUG - Validated client message: root=JSONRPCRequest(method='prompts/list', params=None, jsonrpc='2.0', id=5)
2025-08-02 14:02:13,133 - mcp.server.sse - DEBUG - Sending session message to writer: SessionMessage(message=JSONRPCMessage(root=JSONRPCRequest(method='prompts/list', params=None, jsonrpc='2.0', id=5)), metadata=ServerMessageMetadata(related_request_id=None, request_context=<starlette.requests.Request object at 0x10a1071d0>))
2025-08-02 14:02:13,133 - mcp.server.lowlevel.server - DEBUG - Received message: <mcp.shared.session.RequestResponder object at 0x10a1f4e10>
2025-08-02 14:02:13,133 - mcp.server.lowlevel.server - INFO - Processing request of type ListPromptsRequest
2025-08-02 14:02:13,134 - mcp.server.lowlevel.server - DEBUG - Dispatching request of type ListPromptsRequest
2025-08-02 14:02:13,134 - mcp.server.lowlevel.server - DEBUG - Response sent
2025-08-02 14:02:13,134 - mcp.server.sse - DEBUG - Sending message via SSE: SessionMessage(message=JSONRPCMessage(root=JSONRPCResponse(jsonrpc='2.0', id=5, result={'prompts': []})), metadata=None)
2025-08-02 14:02:13,134 - sse_starlette.sse - DEBUG - chunk: b'event: message\r\ndata: {"jsonrpc":"2.0","id":5,"result":{"prompts":[]}}\r\n\r\n'
2025-08-02 14:02:22,289 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 21:02:22.289279+00:00\r\n\r\n'
2025-08-02 14:02:22,290 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 21:02:22.290946+00:00\r\n\r\n'
2025-08-02 14:02:28,044 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 21:02:28.044345+00:00\r\n\r\n'
2025-08-02 14:02:37,292 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 21:02:37.291935+00:00\r\n\r\n'
2025-08-02 14:02:37,293 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 21:02:37.293069+00:00\r\n\r\n'
2025-08-02 14:02:43,046 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 21:02:43.046152+00:00\r\n\r\n'
2025-08-02 14:02:52,294 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 21:02:52.294621+00:00\r\n\r\n'
2025-08-02 14:02:52,295 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 21:02:52.295117+00:00\r\n\r\n'
2025-08-02 14:02:58,048 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 21:02:58.048076+00:00\r\n\r\n'
2025-08-02 14:02:59,852 - mcp.server.sse - DEBUG - Handling POST message
2025-08-02 14:02:59,852 - mcp.server.sse - DEBUG - Parsed session ID: ecdaefbf-d9a6-4d2b-81ed-fab73c158e7b
2025-08-02 14:02:59,853 - mcp.server.sse - DEBUG - Received JSON: b'{"method":"tools/call","params":{"name":"submit_basic_calculation_workflow","arguments":{"initial_molecule":"CCCC","engine":"xtb","method":"gfn2_xtb","mode":"rapid","name":"Butane Optimization Workflow"},"_meta":{"progressToken":6}},"jsonrpc":"2.0","id":6}'
2025-08-02 14:02:59,853 - mcp.server.sse - DEBUG - Validated client message: root=JSONRPCRequest(method='tools/call', params={'name': 'submit_basic_calculation_workflow', 'arguments': {'initial_molecule': 'CCCC', 'engine': 'xtb', 'method': 'gfn2_xtb', 'mode': 'rapid', 'name': 'Butane Optimization Workflow'}, '_meta': {'progressToken': 6}}, jsonrpc='2.0', id=6)
2025-08-02 14:02:59,853 - mcp.server.sse - DEBUG - Sending session message to writer: SessionMessage(message=JSONRPCMessage(root=JSONRPCRequest(method='tools/call', params={'name': 'submit_basic_calculation_workflow', 'arguments': {'initial_molecule': 'CCCC', 'engine': 'xtb', 'method': 'gfn2_xtb', 'mode': 'rapid', 'name': 'Butane Optimization Workflow'}, '_meta': {'progressToken': 6}}, jsonrpc='2.0', id=6)), metadata=ServerMessageMetadata(related_request_id=None, request_context=<starlette.requests.Request object at 0x10a105880>))
2025-08-02 14:02:59,854 - mcp.server.lowlevel.server - DEBUG - Received message: <mcp.shared.session.RequestResponder object at 0x10a1f5020>
2025-08-02 14:02:59,854 - mcp.server.lowlevel.server - INFO - Processing request of type CallToolRequest
2025-08-02 14:02:59,854 - mcp.server.lowlevel.server - DEBUG - Dispatching request of type CallToolRequest
2025-08-02 14:02:59,855 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - INFO - ============================================================
2025-08-02 14:02:59,855 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - INFO - submit_basic_calculation_workflow called with:
2025-08-02 14:02:59,855 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - INFO -   method: gfn2_xtb (type: <class 'str'>)
2025-08-02 14:02:59,855 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - INFO -   tasks: None (type: <class 'NoneType'>)
2025-08-02 14:02:59,855 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - INFO -   mode: rapid
2025-08-02 14:02:59,855 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - INFO -   engine: xtb
2025-08-02 14:02:59,855 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - INFO -   name: Butane Optimization Workflow
2025-08-02 14:02:59,855 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - INFO -   initial_molecule: 'CCCC' (SMILES string)
2025-08-02 14:02:59,855 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - DEBUG - Converting SMILES string to StJamesMolecule
2025-08-02 14:02:59,859 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - DEBUG - Successfully converted to StJamesMolecule
2025-08-02 14:02:59,859 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - INFO - Calling rowan.submit_basic_calculation_workflow...
2025-08-02 14:02:59,867 - httpcore.connection - DEBUG - connect_tcp.started host='api.rowansci.com' port=443 local_address=None timeout=5.0 socket_options=None
2025-08-02 14:02:59,968 - httpcore.connection - DEBUG - connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x10a11f820>
2025-08-02 14:02:59,968 - httpcore.connection - DEBUG - start_tls.started ssl_context=<ssl.SSLContext object at 0x10a106f00> server_hostname='api.rowansci.com' timeout=5.0
2025-08-02 14:03:00,083 - httpcore.connection - DEBUG - start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x10a0597f0>
2025-08-02 14:03:00,083 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-08-02 14:03:00,084 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-08-02 14:03:00,084 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-08-02 14:03:00,084 - httpcore.http11 - DEBUG - send_request_body.complete
2025-08-02 14:03:00,084 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-08-02 14:03:00,683 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sat, 02 Aug 2025 21:03:00 GMT'), (b'Content-Type', b'application/json'), (b'Content-Length', b'2076'), (b'Connection', b'keep-alive'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains')])
2025-08-02 14:03:00,684 - httpx - INFO - HTTP Request: POST https://api.rowansci.com/workflow "HTTP/1.1 200 OK"
2025-08-02 14:03:00,684 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-08-02 14:03:00,685 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-08-02 14:03:00,685 - httpcore.http11 - DEBUG - response_closed.started
2025-08-02 14:03:00,685 - httpcore.http11 - DEBUG - response_closed.complete
2025-08-02 14:03:00,686 - httpcore.connection - DEBUG - close.started
2025-08-02 14:03:00,686 - httpcore.connection - DEBUG - close.complete
2025-08-02 14:03:00,686 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - INFO - SUCCESS: Workflow submitted with UUID: 721891fb-fd08-4914-8edb-b49df8d3ad41
2025-08-02 14:03:00,688 - mcp.server.lowlevel.server - DEBUG - Response sent
2025-08-02 14:03:00,688 - mcp.server.sse - DEBUG - Sending message via SSE: SessionMessage(message=JSONRPCMessage(root=JSONRPCResponse(jsonrpc='2.0', id=6, result={'content': [{'type': 'text', 'text': '{\n  "name": "Butane Optimization Workflow",\n  "uuid": "721891fb-fd08-4914-8edb-b49df8d3ad41",\n  "created_at": "2025-08-02T21:03:00.236637Z",\n  "updated_at": null,\n  "started_at": null,\n  "completed_at": null,\n  "object_status": 0,\n  "parent_uuid": "e5c3ce65-43df-4ab3-90e0-a56f42584cc0",\n  "notes": "",\n  "starred": false,\n  "public": false,\n  "object_type": "basic_calculation",\n  "object_data": {\n    "settings": {\n      "method": "GFN2_XTB",\n      "tasks": [\n        "optimize"\n      ],\n      "mode": "rapid"\n    },\n    "engine": "xtb",\n    "initial_molecule": {\n      "charge": 0,\n      "multiplicity": 1,\n      "atoms": [\n        {\n          "atomic_number": 6,\n          "position": [\n            -1.86762893,\n            -0.13012499,\n            -0.2131859\n          ]\n        },\n        {\n          "atomic_number": 6,\n          "position": [\n            -0.63032717,\n            -0.18027503,\n            0.668866\n          ]\n        },\n        {\n          "atomic_number": 6,\n          "position": [\n            0.63032604,\n            0.18027639,\n            -0.114436\n          ]\n        },\n        {\n          "atomic_number": 6,\n          "position": [\n            1.86762955,\n            0.13012222,\n            0.76761199\n          ]\n        },\n        {\n          "atomic_number": 1,\n          "position": [\n            -2.7578718,\n            -0.39146072,\n            0.36741114\n          ]\n        },\n        {\n          "atomic_number": 1,\n          "position": [\n            -2.01414814,\n            0.87274707,\n            -0.62686313\n          ]\n        },\n        {\n          "atomic_number": 1,\n          "position": [\n            -1.78518452,\n            -0.8366946,\n            -1.04523826\n          ]\n        },\n        {\n          "atomic_number": 1,\n          "position": [\n            -0.75856968,\n            0.51320342,\n            1.50816505\n          ]\n        },\n        {\n          "atomic_number": 1,\n          "position": [\n            -0.53090199,\n            -1.18661607,\n            1.09215469\n          ]\n        },\n        {\n          "atomic_number": 1,\n          "position": [\n            0.75856929,\n            -0.51319817,\n            -0.95373764\n          ]\n        },\n        {\n          "atomic_number": 1,\n          "position": [\n            0.53090159,\n            1.18661899,\n            -0.53772214\n          ]\n        },\n        {\n          "atomic_number": 1,\n          "position": [\n            1.78518681,\n            0.83669225,\n            1.59966357\n          ]\n        },\n        {\n          "atomic_number": 1,\n          "position": [\n            2.01414891,\n            -0.87275127,\n            1.18128539\n          ]\n        },\n        {\n          "atomic_number": 1,\n          "position": [\n            2.75787005,\n            0.39146051,\n            0.18701245\n          ]\n        }\n      ],\n      "cell": null,\n      "energy": null,\n      "scf_iterations": null,\n      "scf_completed": null,\n      "elapsed": null,\n      "homo_lumo_gap": null,\n      "gradient": null,\n      "stress": null,\n      "velocities": null,\n      "mulliken_charges": null,\n      "mulliken_spin_densities": null,\n      "dipole": null,\n      "vibrational_modes": null,\n      "zero_point_energy": null,\n      "thermal_energy_corr": null,\n      "thermal_enthalpy_corr": null,\n      "thermal_free_energy_corr": null,\n      "smiles": "CCCC",\n      "calculation_index": null\n    }\n  },\n  "email_when_complete": false,\n  "max_credits": null,\n  "elapsed": 0.0,\n  "credits_charged": 0.0\n}'}], 'isError': False})), metadata=None)
2025-08-02 14:03:00,689 - sse_starlette.sse - DEBUG - chunk: b'event: message\r\ndata: {"jsonrpc":"2.0","id":6,"result":{"content":[{"type":"text","text":"{\\n  \\"name\\": \\"Butane Optimization Workflow\\",\\n  \\"uuid\\": \\"721891fb-fd08-4914-8edb-b49df8d3ad41\\",\\n  \\"created_at\\": \\"2025-08-02T21:03:00.236637Z\\",\\n  \\"updated_at\\": null,\\n  \\"started_at\\": null,\\n  \\"completed_at\\": null,\\n  \\"object_status\\": 0,\\n  \\"parent_uuid\\": \\"e5c3ce65-43df-4ab3-90e0-a56f42584cc0\\",\\n  \\"notes\\": \\"\\",\\n  \\"starred\\": false,\\n  \\"public\\": false,\\n  \\"object_type\\": \\"basic_calculation\\",\\n  \\"object_data\\": {\\n    \\"settings\\": {\\n      \\"method\\": \\"GFN2_XTB\\",\\n      \\"tasks\\": [\\n        \\"optimize\\"\\n      ],\\n      \\"mode\\": \\"rapid\\"\\n    },\\n    \\"engine\\": \\"xtb\\",\\n    \\"initial_molecule\\": {\\n      \\"charge\\": 0,\\n      \\"multiplicity\\": 1,\\n      \\"atoms\\": [\\n        {\\n          \\"atomic_number\\": 6,\\n          \\"position\\": [\\n            -1.86762893,\\n            -0.13012499,\\n            -0.2131859\\n          ]\\n        },\\n        {\\n          \\"atomic_number\\": 6,\\n          \\"position\\": [\\n            -0.63032717,\\n            -0.18027503,\\n            0.668866\\n          ]\\n        },\\n        {\\n          \\"atomic_number\\": 6,\\n          \\"position\\": [\\n            0.63032604,\\n            0.18027639,\\n            -0.114436\\n          ]\\n        },\\n        {\\n          \\"atomic_number\\": 6,\\n          \\"position\\": [\\n            1.86762955,\\n            0.13012222,\\n            0.76761199\\n          ]\\n        },\\n        {\\n          \\"atomic_number\\": 1,\\n          \\"position\\": [\\n            -2.7578718,\\n            -0.39146072,\\n            0.36741114\\n          ]\\n        },\\n        {\\n          \\"atomic_number\\": 1,\\n          \\"position\\": [\\n            -2.01414814,\\n            0.87274707,\\n            -0.62686313\\n          ]\\n        },\\n        {\\n          \\"atomic_number\\": 1,\\n          \\"position\\": [\\n            -1.78518452,\\n            -0.8366946,\\n            -1.04523826\\n          ]\\n        },\\n        {\\n          \\"atomic_number\\": 1,\\n          \\"position\\": [\\n            -0.75856968,\\n            0.51320342,\\n            1.50816505\\n          ]\\n        },\\n        {\\n          \\"atomic_number\\": 1,\\n          \\"position\\": [\\n            -0.53090199,\\n            -1.18661607,\\n            1.09215469\\n          ]\\n        },\\n        {\\n          \\"atomic_number\\": 1,\\n          \\"position\\": [\\n            0.75856929,\\n            -0.51319817,\\n            -0.95373764\\n          ]\\n        },\\n        {\\n          \\"atomic_number\\": 1,\\n          \\"position\\": [\\n            0.53090159,\\n            1.18661899,\\n            -0.53772214\\n          ]\\n        },\\n        {\\n          \\"atomic_number\\": 1,\\n          \\"position\\": [\\n            1.78518681,\\n            0.83669225,\\n            1.59966357\\n          ]\\n        },\\n        {\\n          \\"atomic_number\\": 1,\\n          \\"position\\": [\\n            2.01414891,\\n            -0.87275127,\\n            1.18128539\\n          ]\\n        },\\n        {\\n          \\"atomic_number\\": 1,\\n          \\"position\\": [\\n            2.75787005,\\n            0.39146051,\\n            0.18701245\\n          ]\\n        }\\n      ],\\n      \\"cell\\": null,\\n      \\"energy\\": null,\\n      \\"scf_iterations\\": null,\\n      \\"scf_completed\\": null,\\n      \\"elapsed\\": null,\\n      \\"homo_lumo_gap\\": null,\\n      \\"gradient\\": null,\\n      \\"stress\\": null,\\n      \\"velocities\\": null,\\n      \\"mulliken_charges\\": null,\\n      \\"mulliken_spin_densities\\": null,\\n      \\"dipole\\": null,\\n      \\"vibrational_modes\\": null,\\n      \\"zero_point_energy\\": null,\\n      \\"thermal_energy_corr\\": null,\\n      \\"thermal_enthalpy_corr\\": null,\\n      \\"thermal_free_energy_corr\\": null,\\n      \\"smiles\\": \\"CCCC\\",\\n      \\"calculation_index\\": null\\n    }\\n  },\\n  \\"email_when_complete\\": false,\\n  \\"max_credits\\": null,\\n  \\"elapsed\\": 0.0,\\n  \\"credits_charged\\": 0.0\\n}"}],"isError":false}}\r\n\r\n'
2025-08-02 14:03:07,296 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 21:03:07.296584+00:00\r\n\r\n'
2025-08-02 14:03:07,297 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 21:03:07.297403+00:00\r\n\r\n'
2025-08-02 14:03:13,050 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 21:03:13.049922+00:00\r\n\r\n'
2025-08-02 14:03:22,299 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 21:03:22.298773+00:00\r\n\r\n'
2025-08-02 14:03:22,303 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 21:03:22.302936+00:00\r\n\r\n'
2025-08-02 14:03:28,052 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 21:03:28.052460+00:00\r\n\r\n'
2025-08-02 14:03:37,304 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 21:03:37.304343+00:00\r\n\r\n'
2025-08-02 14:03:37,306 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 21:03:37.306328+00:00\r\n\r\n'
2025-08-02 14:03:43,057 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 21:03:43.057293+00:00\r\n\r\n'
2025-08-02 14:03:52,308 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 21:03:52.307944+00:00\r\n\r\n'
2025-08-02 14:03:52,309 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 21:03:52.309136+00:00\r\n\r\n'
2025-08-02 14:03:58,060 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 21:03:58.060701+00:00\r\n\r\n'
2025-08-02 14:04:07,311 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 21:04:07.311109+00:00\r\n\r\n'
2025-08-02 14:04:07,311 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 21:04:07.311607+00:00\r\n\r\n'
2025-08-02 14:04:13,063 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 21:04:13.063267+00:00\r\n\r\n'
2025-08-02 14:04:22,313 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 21:04:22.313227+00:00\r\n\r\n'
2025-08-02 14:04:22,314 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 21:04:22.314270+00:00\r\n\r\n'
2025-08-02 14:04:28,065 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 21:04:28.064983+00:00\r\n\r\n'
2025-08-02 14:04:37,316 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 21:04:37.316124+00:00\r\n\r\n'
2025-08-02 14:04:37,317 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 21:04:37.317352+00:00\r\n\r\n'
2025-08-02 14:04:43,066 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 21:04:43.066751+00:00\r\n\r\n'
2025-08-02 14:04:52,318 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 21:04:52.318203+00:00\r\n\r\n'
2025-08-02 14:04:52,320 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 21:04:52.320067+00:00\r\n\r\n'
2025-08-02 14:04:58,061 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 21:04:58.061191+00:00\r\n\r\n'
2025-08-02 14:05:07,303 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 21:05:07.303110+00:00\r\n\r\n'
2025-08-02 14:05:07,303 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 21:05:07.303555+00:00\r\n\r\n'
2025-08-02 14:05:13,048 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 21:05:13.048120+00:00\r\n\r\n'
2025-08-02 14:05:22,296 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 21:05:22.296224+00:00\r\n\r\n'
2025-08-02 14:05:22,297 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 21:05:22.297073+00:00\r\n\r\n'
2025-08-02 14:05:28,043 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 21:05:28.043471+00:00\r\n\r\n'
2025-08-02 14:05:37,295 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 21:05:37.294982+00:00\r\n\r\n'
2025-08-02 14:05:37,295 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 21:05:37.295604+00:00\r\n\r\n'
2025-08-02 14:05:38,487 - mcp.server.lowlevel.server - DEBUG - Initializing server 'Rowan MCP Server'
2025-08-02 14:05:38,487 - mcp.server.lowlevel.server - DEBUG - Registering handler for ListToolsRequest
2025-08-02 14:05:38,487 - mcp.server.lowlevel.server - DEBUG - Registering handler for ListResourcesRequest
2025-08-02 14:05:38,487 - mcp.server.lowlevel.server - DEBUG - Registering handler for ListResourceTemplatesRequest
2025-08-02 14:05:38,487 - mcp.server.lowlevel.server - DEBUG - Registering handler for PromptListRequest
2025-08-02 14:05:38,487 - mcp.server.lowlevel.server - DEBUG - Registering handler for CallToolRequest
2025-08-02 14:05:38,487 - mcp.server.lowlevel.server - DEBUG - Registering handler for ReadResourceRequest
2025-08-02 14:05:38,487 - mcp.server.lowlevel.server - DEBUG - Registering handler for GetPromptRequest
2025-08-02 14:05:38,499 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - INFO - Parsed string tasks '['optimize']' to list: ['optimize']
2025-08-02 14:05:38,500 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - INFO - ============================================================
2025-08-02 14:05:38,500 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - INFO - submit_basic_calculation_workflow called with:
2025-08-02 14:05:38,500 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - INFO -   method: gfn2-xtb (type: <class 'str'>)
2025-08-02 14:05:38,500 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - INFO -   tasks: ['optimize'] (type: <class 'list'>)
2025-08-02 14:05:38,500 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - INFO -   mode: rapid
2025-08-02 14:05:38,500 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - INFO -   engine: xtb
2025-08-02 14:05:38,500 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - INFO -   name: Test: 'optimize'
2025-08-02 14:05:38,500 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - INFO -   initial_molecule: 'CCO' (SMILES string)
2025-08-02 14:05:38,500 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - DEBUG - Converting SMILES string to StJamesMolecule
2025-08-02 14:05:38,520 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - DEBUG - Successfully converted to StJamesMolecule
2025-08-02 14:05:38,520 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - INFO - Calling rowan.submit_basic_calculation_workflow...
2025-08-02 14:05:38,544 - httpcore.connection - DEBUG - connect_tcp.started host='api.rowansci.com' port=443 local_address=None timeout=5.0 socket_options=None
2025-08-02 14:05:38,635 - httpcore.connection - DEBUG - connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x10bb4b230>
2025-08-02 14:05:38,635 - httpcore.connection - DEBUG - start_tls.started ssl_context=<ssl.SSLContext object at 0x10bb6af90> server_hostname='api.rowansci.com' timeout=5.0
2025-08-02 14:05:38,750 - httpcore.connection - DEBUG - start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x10bbcc550>
2025-08-02 14:05:38,751 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-08-02 14:05:38,751 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-08-02 14:05:38,751 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-08-02 14:05:38,752 - httpcore.http11 - DEBUG - send_request_body.complete
2025-08-02 14:05:38,752 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-08-02 14:05:39,335 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sat, 02 Aug 2025 21:05:39 GMT'), (b'Content-Type', b'application/json'), (b'Content-Length', b'1729'), (b'Connection', b'keep-alive'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains')])
2025-08-02 14:05:39,335 - httpx - INFO - HTTP Request: POST https://api.rowansci.com/workflow "HTTP/1.1 200 OK"
2025-08-02 14:05:39,336 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-08-02 14:05:39,336 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-08-02 14:05:39,336 - httpcore.http11 - DEBUG - response_closed.started
2025-08-02 14:05:39,336 - httpcore.http11 - DEBUG - response_closed.complete
2025-08-02 14:05:39,336 - httpcore.connection - DEBUG - close.started
2025-08-02 14:05:39,336 - httpcore.connection - DEBUG - close.complete
2025-08-02 14:05:39,336 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - INFO - SUCCESS: Workflow submitted with UUID: 826c9c6f-e002-4c1d-9876-b0cd09f8861d
2025-08-02 14:05:39,336 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - INFO - Parsed string tasks '['optimize', 'frequencies']' to list: ['optimize', 'frequencies']
2025-08-02 14:05:39,337 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - INFO - ============================================================
2025-08-02 14:05:39,337 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - INFO - submit_basic_calculation_workflow called with:
2025-08-02 14:05:39,337 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - INFO -   method: gfn2-xtb (type: <class 'str'>)
2025-08-02 14:05:39,337 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - INFO -   tasks: ['optimize', 'frequencies'] (type: <class 'list'>)
2025-08-02 14:05:39,337 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - INFO -   mode: rapid
2025-08-02 14:05:39,337 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - INFO -   engine: xtb
2025-08-02 14:05:39,337 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - INFO -   name: Test: 'optimize, frequencies'
2025-08-02 14:05:39,337 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - INFO -   initial_molecule: 'CCO' (SMILES string)
2025-08-02 14:05:39,337 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - DEBUG - Converting SMILES string to StJamesMolecule
2025-08-02 14:05:39,340 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - DEBUG - Successfully converted to StJamesMolecule
2025-08-02 14:05:39,340 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - INFO - Calling rowan.submit_basic_calculation_workflow...
2025-08-02 14:05:39,352 - httpcore.connection - DEBUG - connect_tcp.started host='api.rowansci.com' port=443 local_address=None timeout=5.0 socket_options=None
2025-08-02 14:05:39,452 - httpcore.connection - DEBUG - connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x10bbcde50>
2025-08-02 14:05:39,452 - httpcore.connection - DEBUG - start_tls.started ssl_context=<ssl.SSLContext object at 0x10bb6aa80> server_hostname='api.rowansci.com' timeout=5.0
2025-08-02 14:05:39,557 - httpcore.connection - DEBUG - start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x10b9a7950>
2025-08-02 14:05:39,558 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-08-02 14:05:39,558 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-08-02 14:05:39,558 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-08-02 14:05:39,558 - httpcore.http11 - DEBUG - send_request_body.complete
2025-08-02 14:05:39,558 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-08-02 14:05:40,047 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sat, 02 Aug 2025 21:05:40 GMT'), (b'Content-Type', b'application/json'), (b'Content-Length', b'1756'), (b'Connection', b'keep-alive'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains')])
2025-08-02 14:05:40,048 - httpx - INFO - HTTP Request: POST https://api.rowansci.com/workflow "HTTP/1.1 200 OK"
2025-08-02 14:05:40,048 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-08-02 14:05:40,048 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-08-02 14:05:40,048 - httpcore.http11 - DEBUG - response_closed.started
2025-08-02 14:05:40,048 - httpcore.http11 - DEBUG - response_closed.complete
2025-08-02 14:05:40,048 - httpcore.connection - DEBUG - close.started
2025-08-02 14:05:40,049 - httpcore.connection - DEBUG - close.complete
2025-08-02 14:05:40,049 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - INFO - SUCCESS: Workflow submitted with UUID: 60b2a912-cf8e-4953-99e5-9cfe94d462f3
2025-08-02 14:05:40,049 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - INFO - Parsed string tasks '['optimize']' to list: ['optimize']
2025-08-02 14:05:40,049 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - INFO - ============================================================
2025-08-02 14:05:40,050 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - INFO - submit_basic_calculation_workflow called with:
2025-08-02 14:05:40,050 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - INFO -   method: gfn2-xtb (type: <class 'str'>)
2025-08-02 14:05:40,050 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - INFO -   tasks: ['optimize'] (type: <class 'list'>)
2025-08-02 14:05:40,050 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - INFO -   mode: rapid
2025-08-02 14:05:40,050 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - INFO -   engine: xtb
2025-08-02 14:05:40,050 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - INFO -   name: Test: '["optimize"]'
2025-08-02 14:05:40,050 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - INFO -   initial_molecule: 'CCO' (SMILES string)
2025-08-02 14:05:40,050 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - DEBUG - Converting SMILES string to StJamesMolecule
2025-08-02 14:05:40,054 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - DEBUG - Successfully converted to StJamesMolecule
2025-08-02 14:05:40,054 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - INFO - Calling rowan.submit_basic_calculation_workflow...
2025-08-02 14:05:40,066 - httpcore.connection - DEBUG - connect_tcp.started host='api.rowansci.com' port=443 local_address=None timeout=5.0 socket_options=None
2025-08-02 14:05:40,164 - httpcore.connection - DEBUG - connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x10b9a7e10>
2025-08-02 14:05:40,164 - httpcore.connection - DEBUG - start_tls.started ssl_context=<ssl.SSLContext object at 0x10bb6b020> server_hostname='api.rowansci.com' timeout=5.0
2025-08-02 14:05:40,273 - httpcore.connection - DEBUG - start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x10bb53890>
2025-08-02 14:05:40,274 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-08-02 14:05:40,274 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-08-02 14:05:40,275 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-08-02 14:05:40,275 - httpcore.http11 - DEBUG - send_request_body.complete
2025-08-02 14:05:40,275 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-08-02 14:05:40,882 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sat, 02 Aug 2025 21:05:40 GMT'), (b'Content-Type', b'application/json'), (b'Content-Length', b'1738'), (b'Connection', b'keep-alive'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains')])
2025-08-02 14:05:40,882 - httpx - INFO - HTTP Request: POST https://api.rowansci.com/workflow "HTTP/1.1 200 OK"
2025-08-02 14:05:40,883 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-08-02 14:05:40,883 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-08-02 14:05:40,883 - httpcore.http11 - DEBUG - response_closed.started
2025-08-02 14:05:40,883 - httpcore.http11 - DEBUG - response_closed.complete
2025-08-02 14:05:40,883 - httpcore.connection - DEBUG - close.started
2025-08-02 14:05:40,884 - httpcore.connection - DEBUG - close.complete
2025-08-02 14:05:40,884 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - INFO - SUCCESS: Workflow submitted with UUID: e9bebfea-c3b0-4159-984f-badd36ada3d0
2025-08-02 14:05:40,884 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - INFO - Parsed string tasks '['optimize', 'frequencies']' to list: ['optimize', 'frequencies']
2025-08-02 14:05:40,884 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - INFO - ============================================================
2025-08-02 14:05:40,884 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - INFO - submit_basic_calculation_workflow called with:
2025-08-02 14:05:40,884 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - INFO -   method: gfn2-xtb (type: <class 'str'>)
2025-08-02 14:05:40,884 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - INFO -   tasks: ['optimize', 'frequencies'] (type: <class 'list'>)
2025-08-02 14:05:40,885 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - INFO -   mode: rapid
2025-08-02 14:05:40,885 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - INFO -   engine: xtb
2025-08-02 14:05:40,885 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - INFO -   name: Test: "['optimize', 'frequencies']"
2025-08-02 14:05:40,885 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - INFO -   initial_molecule: 'CCO' (SMILES string)
2025-08-02 14:05:40,885 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - DEBUG - Converting SMILES string to StJamesMolecule
2025-08-02 14:05:40,888 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - DEBUG - Successfully converted to StJamesMolecule
2025-08-02 14:05:40,888 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - INFO - Calling rowan.submit_basic_calculation_workflow...
2025-08-02 14:05:40,901 - httpcore.connection - DEBUG - connect_tcp.started host='api.rowansci.com' port=443 local_address=None timeout=5.0 socket_options=None
2025-08-02 14:05:41,008 - httpcore.connection - DEBUG - connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x10bb7a580>
2025-08-02 14:05:41,008 - httpcore.connection - DEBUG - start_tls.started ssl_context=<ssl.SSLContext object at 0x10bb6b0b0> server_hostname='api.rowansci.com' timeout=5.0
2025-08-02 14:05:41,123 - httpcore.connection - DEBUG - start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x10bb7a690>
2025-08-02 14:05:41,123 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-08-02 14:05:41,124 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-08-02 14:05:41,124 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-08-02 14:05:41,124 - httpcore.http11 - DEBUG - send_request_body.complete
2025-08-02 14:05:41,124 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-08-02 14:05:41,651 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sat, 02 Aug 2025 21:05:41 GMT'), (b'Content-Type', b'application/json'), (b'Content-Length', b'1770'), (b'Connection', b'keep-alive'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains')])
2025-08-02 14:05:41,652 - httpx - INFO - HTTP Request: POST https://api.rowansci.com/workflow "HTTP/1.1 200 OK"
2025-08-02 14:05:41,653 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-08-02 14:05:41,653 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-08-02 14:05:41,653 - httpcore.http11 - DEBUG - response_closed.started
2025-08-02 14:05:41,653 - httpcore.http11 - DEBUG - response_closed.complete
2025-08-02 14:05:41,653 - httpcore.connection - DEBUG - close.started
2025-08-02 14:05:41,654 - httpcore.connection - DEBUG - close.complete
2025-08-02 14:05:41,654 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - INFO - SUCCESS: Workflow submitted with UUID: affab7ac-bfca-40de-bd9b-9d1775acb5e0
2025-08-02 14:05:41,654 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - INFO - ============================================================
2025-08-02 14:05:41,654 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - INFO - submit_basic_calculation_workflow called with:
2025-08-02 14:05:41,654 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - INFO -   method: gfn2-xtb (type: <class 'str'>)
2025-08-02 14:05:41,655 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - INFO -   tasks: ['optimize'] (type: <class 'list'>)
2025-08-02 14:05:41,655 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - INFO -   mode: rapid
2025-08-02 14:05:41,655 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - INFO -   engine: xtb
2025-08-02 14:05:41,655 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - INFO -   name: Test: ['optimize']
2025-08-02 14:05:41,655 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - INFO -   initial_molecule: 'CCO' (SMILES string)
2025-08-02 14:05:41,655 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - DEBUG - Converting SMILES string to StJamesMolecule
2025-08-02 14:05:41,657 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - DEBUG - Successfully converted to StJamesMolecule
2025-08-02 14:05:41,657 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - INFO - Calling rowan.submit_basic_calculation_workflow...
2025-08-02 14:05:41,669 - httpcore.connection - DEBUG - connect_tcp.started host='api.rowansci.com' port=443 local_address=None timeout=5.0 socket_options=None
2025-08-02 14:05:41,759 - httpcore.connection - DEBUG - connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x10bbd4350>
2025-08-02 14:05:41,759 - httpcore.connection - DEBUG - start_tls.started ssl_context=<ssl.SSLContext object at 0x10bb6b1d0> server_hostname='api.rowansci.com' timeout=5.0
2025-08-02 14:05:41,880 - httpcore.connection - DEBUG - start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x10bbd4550>
2025-08-02 14:05:41,880 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-08-02 14:05:41,881 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-08-02 14:05:41,881 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-08-02 14:05:41,881 - httpcore.http11 - DEBUG - send_request_body.complete
2025-08-02 14:05:41,881 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-08-02 14:05:42,422 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sat, 02 Aug 2025 21:05:42 GMT'), (b'Content-Type', b'application/json'), (b'Content-Length', b'1733'), (b'Connection', b'keep-alive'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains')])
2025-08-02 14:05:42,422 - httpx - INFO - HTTP Request: POST https://api.rowansci.com/workflow "HTTP/1.1 200 OK"
2025-08-02 14:05:42,422 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-08-02 14:05:42,422 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-08-02 14:05:42,422 - httpcore.http11 - DEBUG - response_closed.started
2025-08-02 14:05:42,422 - httpcore.http11 - DEBUG - response_closed.complete
2025-08-02 14:05:42,422 - httpcore.connection - DEBUG - close.started
2025-08-02 14:05:42,423 - httpcore.connection - DEBUG - close.complete
2025-08-02 14:05:42,423 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - INFO - SUCCESS: Workflow submitted with UUID: 12fc5a7f-5a2f-4771-ac0e-15947ca19fc9
2025-08-02 14:05:42,423 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - INFO - ============================================================
2025-08-02 14:05:42,423 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - INFO - submit_basic_calculation_workflow called with:
2025-08-02 14:05:42,423 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - INFO -   method: gfn2-xtb (type: <class 'str'>)
2025-08-02 14:05:42,423 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - INFO -   tasks: None (type: <class 'NoneType'>)
2025-08-02 14:05:42,423 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - INFO -   mode: rapid
2025-08-02 14:05:42,423 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - INFO -   engine: xtb
2025-08-02 14:05:42,423 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - INFO -   name: Test: None
2025-08-02 14:05:42,423 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - INFO -   initial_molecule: 'CCO' (SMILES string)
2025-08-02 14:05:42,423 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - DEBUG - Converting SMILES string to StJamesMolecule
2025-08-02 14:05:42,426 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - DEBUG - Successfully converted to StJamesMolecule
2025-08-02 14:05:42,426 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - INFO - Calling rowan.submit_basic_calculation_workflow...
2025-08-02 14:05:42,434 - httpcore.connection - DEBUG - connect_tcp.started host='api.rowansci.com' port=443 local_address=None timeout=5.0 socket_options=None
2025-08-02 14:05:42,545 - httpcore.connection - DEBUG - connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x10bbf4320>
2025-08-02 14:05:42,546 - httpcore.connection - DEBUG - start_tls.started ssl_context=<ssl.SSLContext object at 0x10bb6b260> server_hostname='api.rowansci.com' timeout=5.0
2025-08-02 14:05:42,669 - httpcore.connection - DEBUG - start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x10bbf4410>
2025-08-02 14:05:42,670 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-08-02 14:05:42,671 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-08-02 14:05:42,671 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-08-02 14:05:42,671 - httpcore.http11 - DEBUG - send_request_body.complete
2025-08-02 14:05:42,672 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-08-02 14:05:43,042 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 21:05:43.042670+00:00\r\n\r\n'
2025-08-02 14:05:43,569 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sat, 02 Aug 2025 21:05:43 GMT'), (b'Content-Type', b'application/json'), (b'Content-Length', b'1721'), (b'Connection', b'keep-alive'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains')])
2025-08-02 14:05:43,569 - httpx - INFO - HTTP Request: POST https://api.rowansci.com/workflow "HTTP/1.1 200 OK"
2025-08-02 14:05:43,569 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-08-02 14:05:43,569 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-08-02 14:05:43,569 - httpcore.http11 - DEBUG - response_closed.started
2025-08-02 14:05:43,569 - httpcore.http11 - DEBUG - response_closed.complete
2025-08-02 14:05:43,569 - httpcore.connection - DEBUG - close.started
2025-08-02 14:05:43,569 - httpcore.connection - DEBUG - close.complete
2025-08-02 14:05:43,570 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - INFO - SUCCESS: Workflow submitted with UUID: ec6ed62a-599c-4159-881d-455b109563c5
2025-08-02 14:05:52,296 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 21:05:52.295921+00:00\r\n\r\n'
2025-08-02 14:05:52,301 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 21:05:52.301389+00:00\r\n\r\n'
2025-08-02 14:05:58,616 - mcp.server.lowlevel.server - DEBUG - Initializing server 'Rowan MCP Server'
2025-08-02 14:05:58,617 - mcp.server.lowlevel.server - DEBUG - Registering handler for ListToolsRequest
2025-08-02 14:05:58,617 - mcp.server.lowlevel.server - DEBUG - Registering handler for ListResourcesRequest
2025-08-02 14:05:58,617 - mcp.server.lowlevel.server - DEBUG - Registering handler for ListResourceTemplatesRequest
2025-08-02 14:05:58,617 - mcp.server.lowlevel.server - DEBUG - Registering handler for PromptListRequest
2025-08-02 14:05:58,617 - mcp.server.lowlevel.server - DEBUG - Registering handler for CallToolRequest
2025-08-02 14:05:58,617 - mcp.server.lowlevel.server - DEBUG - Registering handler for ReadResourceRequest
2025-08-02 14:05:58,617 - mcp.server.lowlevel.server - DEBUG - Registering handler for GetPromptRequest
2025-08-02 14:05:58,634 - asyncio - DEBUG - Using selector: KqueueSelector
2025-08-02 14:05:58,634 - mcp.server.sse - DEBUG - SseServerTransport initialized with endpoint: /messages/
2025-08-02 14:05:58,634 - FastMCP.fastmcp.server.server - INFO - Starting MCP server 'Rowan MCP Server' with transport 'sse' on http://127.0.0.1:6276/sse
2025-08-02 14:05:59,439 - mcp.server.sse - DEBUG - Setting up SSE connection
2025-08-02 14:05:59,440 - mcp.server.sse - DEBUG - Created new session with ID: 1898fb07-6249-4979-ad92-5786712248ed
2025-08-02 14:05:59,441 - mcp.server.sse - DEBUG - Starting SSE response task
2025-08-02 14:05:59,441 - mcp.server.sse - DEBUG - Yielding read and write streams
2025-08-02 14:05:59,444 - mcp.server.sse - DEBUG - Starting SSE writer
2025-08-02 14:05:59,445 - mcp.server.sse - DEBUG - Setting up SSE connection
2025-08-02 14:05:59,445 - mcp.server.sse - DEBUG - Created new session with ID: 62233999-0bfd-482c-8e87-6ed115e47da2
2025-08-02 14:05:59,445 - mcp.server.sse - DEBUG - Starting SSE response task
2025-08-02 14:05:59,445 - mcp.server.sse - DEBUG - Yielding read and write streams
2025-08-02 14:05:59,448 - mcp.server.sse - DEBUG - Sent endpoint event: /messages/?session_id=1898fb0762494979ad925786712248ed
2025-08-02 14:05:59,449 - sse_starlette.sse - DEBUG - chunk: b'event: endpoint\r\ndata: /messages/?session_id=1898fb0762494979ad925786712248ed\r\n\r\n'
2025-08-02 14:05:59,449 - mcp.server.sse - DEBUG - Starting SSE writer
2025-08-02 14:05:59,450 - mcp.server.sse - DEBUG - Sent endpoint event: /messages/?session_id=622339990bfd482c8e876ed115e47da2
2025-08-02 14:05:59,450 - mcp.server.sse - DEBUG - Setting up SSE connection
2025-08-02 14:05:59,450 - mcp.server.sse - DEBUG - Created new session with ID: fa4ba0bd-cdc1-45c9-8966-7806386ca788
2025-08-02 14:05:59,450 - mcp.server.sse - DEBUG - Starting SSE response task
2025-08-02 14:05:59,450 - mcp.server.sse - DEBUG - Yielding read and write streams
2025-08-02 14:05:59,452 - sse_starlette.sse - DEBUG - chunk: b'event: endpoint\r\ndata: /messages/?session_id=622339990bfd482c8e876ed115e47da2\r\n\r\n'
2025-08-02 14:05:59,453 - mcp.server.sse - DEBUG - Starting SSE writer
2025-08-02 14:05:59,453 - mcp.server.sse - DEBUG - Sent endpoint event: /messages/?session_id=fa4ba0bdcdc145c989667806386ca788
2025-08-02 14:05:59,453 - sse_starlette.sse - DEBUG - chunk: b'event: endpoint\r\ndata: /messages/?session_id=fa4ba0bdcdc145c989667806386ca788\r\n\r\n'
2025-08-02 14:06:01,762 - sse_starlette.sse - DEBUG - Got event: http.disconnect. Stop streaming.
2025-08-02 14:06:01,762 - root - DEBUG - Client session disconnected fa4ba0bd-cdc1-45c9-8966-7806386ca788
2025-08-02 14:06:02,134 - mcp.server.sse - DEBUG - Setting up SSE connection
2025-08-02 14:06:02,135 - mcp.server.sse - DEBUG - Created new session with ID: 8885b603-9234-4432-8b71-971721bc7eb2
2025-08-02 14:06:02,135 - mcp.server.sse - DEBUG - Starting SSE response task
2025-08-02 14:06:02,135 - mcp.server.sse - DEBUG - Yielding read and write streams
2025-08-02 14:06:02,137 - mcp.server.sse - DEBUG - Starting SSE writer
2025-08-02 14:06:02,137 - mcp.server.sse - DEBUG - Sent endpoint event: /messages/?session_id=8885b603923444328b71971721bc7eb2
2025-08-02 14:06:02,138 - sse_starlette.sse - DEBUG - chunk: b'event: endpoint\r\ndata: /messages/?session_id=8885b603923444328b71971721bc7eb2\r\n\r\n'
2025-08-02 14:06:02,141 - mcp.server.sse - DEBUG - Handling POST message
2025-08-02 14:06:02,141 - mcp.server.sse - DEBUG - Parsed session ID: 8885b603-9234-4432-8b71-971721bc7eb2
2025-08-02 14:06:02,141 - mcp.server.sse - DEBUG - Received JSON: b'{"method":"initialize","params":{"protocolVersion":"2025-06-18","capabilities":{"tools":true,"prompts":true,"resources":false,"logging":false,"roots":{"listChanged":false}},"clientInfo":{"name":"cursor-vscode","version":"1.0.0"}},"jsonrpc":"2.0","id":1}'
2025-08-02 14:06:02,141 - mcp.server.sse - DEBUG - Validated client message: root=JSONRPCRequest(method='initialize', params={'protocolVersion': '2025-06-18', 'capabilities': {'tools': True, 'prompts': True, 'resources': False, 'logging': False, 'roots': {'listChanged': False}}, 'clientInfo': {'name': 'cursor-vscode', 'version': '1.0.0'}}, jsonrpc='2.0', id=1)
2025-08-02 14:06:02,141 - mcp.server.sse - DEBUG - Sending session message to writer: SessionMessage(message=JSONRPCMessage(root=JSONRPCRequest(method='initialize', params={'protocolVersion': '2025-06-18', 'capabilities': {'tools': True, 'prompts': True, 'resources': False, 'logging': False, 'roots': {'listChanged': False}}, 'clientInfo': {'name': 'cursor-vscode', 'version': '1.0.0'}}, jsonrpc='2.0', id=1)), metadata=ServerMessageMetadata(related_request_id=None, request_context=<starlette.requests.Request object at 0x10abc1490>))
2025-08-02 14:06:02,142 - mcp.server.sse - DEBUG - Sending message via SSE: SessionMessage(message=JSONRPCMessage(root=JSONRPCResponse(jsonrpc='2.0', id=1, result={'protocolVersion': '2025-03-26', 'capabilities': {'experimental': {}, 'prompts': {'listChanged': False}, 'resources': {'subscribe': False, 'listChanged': False}, 'tools': {'listChanged': False}}, 'serverInfo': {'name': 'Rowan MCP Server', 'version': '1.9.3'}})), metadata=None)
2025-08-02 14:06:02,142 - sse_starlette.sse - DEBUG - chunk: b'event: message\r\ndata: {"jsonrpc":"2.0","id":1,"result":{"protocolVersion":"2025-03-26","capabilities":{"experimental":{},"prompts":{"listChanged":false},"resources":{"subscribe":false,"listChanged":false},"tools":{"listChanged":false}},"serverInfo":{"name":"Rowan MCP Server","version":"1.9.3"}}}\r\n\r\n'
2025-08-02 14:06:02,145 - mcp.server.sse - DEBUG - Handling POST message
2025-08-02 14:06:02,145 - mcp.server.sse - DEBUG - Parsed session ID: 8885b603-9234-4432-8b71-971721bc7eb2
2025-08-02 14:06:02,145 - mcp.server.sse - DEBUG - Received JSON: b'{"method":"notifications/initialized","jsonrpc":"2.0"}'
2025-08-02 14:06:02,145 - mcp.server.sse - DEBUG - Validated client message: root=JSONRPCNotification(method='notifications/initialized', params=None, jsonrpc='2.0')
2025-08-02 14:06:02,146 - mcp.server.sse - DEBUG - Sending session message to writer: SessionMessage(message=JSONRPCMessage(root=JSONRPCNotification(method='notifications/initialized', params=None, jsonrpc='2.0')), metadata=ServerMessageMetadata(related_request_id=None, request_context=<starlette.requests.Request object at 0x10abc8d70>))
2025-08-02 14:06:02,147 - mcp.server.lowlevel.server - DEBUG - Received message: root=InitializedNotification(method='notifications/initialized', params=None, jsonrpc='2.0')
2025-08-02 14:06:02,150 - mcp.server.sse - DEBUG - Handling POST message
2025-08-02 14:06:02,150 - mcp.server.sse - DEBUG - Parsed session ID: 8885b603-9234-4432-8b71-971721bc7eb2
2025-08-02 14:06:02,150 - mcp.server.sse - DEBUG - Received JSON: b'{"method":"tools/list","jsonrpc":"2.0","id":2}'
2025-08-02 14:06:02,150 - mcp.server.sse - DEBUG - Validated client message: root=JSONRPCRequest(method='tools/list', params=None, jsonrpc='2.0', id=2)
2025-08-02 14:06:02,150 - mcp.server.sse - DEBUG - Sending session message to writer: SessionMessage(message=JSONRPCMessage(root=JSONRPCRequest(method='tools/list', params=None, jsonrpc='2.0', id=2)), metadata=ServerMessageMetadata(related_request_id=None, request_context=<starlette.requests.Request object at 0x10ab2ad50>))
2025-08-02 14:06:02,150 - mcp.server.lowlevel.server - DEBUG - Received message: <mcp.shared.session.RequestResponder object at 0x10ab3b9d0>
2025-08-02 14:06:02,151 - mcp.server.lowlevel.server - INFO - Processing request of type ListToolsRequest
2025-08-02 14:06:02,151 - mcp.server.lowlevel.server - DEBUG - Dispatching request of type ListToolsRequest
2025-08-02 14:06:02,152 - mcp.server.lowlevel.server - DEBUG - Response sent
2025-08-02 14:06:02,152 - mcp.server.sse - DEBUG - Sending message via SSE: SessionMessage(message=JSONRPCMessage(root=JSONRPCResponse(jsonrpc='2.0', id=2, result={'tools': [{'name': 'submit_basic_calculation_workflow', 'description': 'Submit a basic calculation workflow using Rowan v2 API.\n\nPerforms fundamental quantum chemistry calculations with configurable methods\nand computational tasks. Returns a workflow object for tracking progress.\n', 'inputSchema': {'properties': {'initial_molecule': {'anyOf': [{'type': 'string'}, {'additionalProperties': True, 'type': 'object'}, {}], 'description': 'The molecule to perform the calculation on. Can be a SMILES string, dict, StJamesMolecule, or RdkitMol object', 'title': 'Initial Molecule'}, 'method': {'default': 'uma_m_omol', 'description': "The method to use for the calculation (e.g., 'uma_m_omol', 'gfn2-xtb', 'r2scan_3c')", 'title': 'Method', 'type': 'string'}, 'tasks': {'anyOf': [{'items': {'type': 'string'}, 'type': 'array'}, {'type': 'string'}, {'type': 'null'}], 'default': None, 'description': "Tasks to perform: list ['optimize'], string 'optimize', or comma-separated 'optimize,frequencies'. Defaults to None", 'title': 'Tasks'}, 'mode': {'default': 'auto', 'description': "The mode to run the calculation in ('auto', 'rapid', 'careful', 'meticulous')", 'title': 'Mode', 'type': 'string'}, 'engine': {'default': 'omol25', 'description': "The computational engine to use ('omol25', 'xtb', 'psi4')", 'title': 'Engine', 'type': 'string'}, 'name': {'default': 'Basic Calculation Workflow', 'description': 'The name of the workflow for identification', 'title': 'Name', 'type': 'string'}, 'folder_uuid': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'UUID of the folder to place the workflow in (optional)', 'title': 'Folder Uuid'}, 'max_credits': {'anyOf': [{'type': 'integer'}, {'type': 'null'}], 'default': None, 'description': 'Maximum number of credits to use for the workflow (optional)', 'title': 'Max Credits'}}, 'required': ['initial_molecule'], 'type': 'object'}}, {'name': 'submit_conformer_search_workflow', 'description': 'Submit a conformer search workflow using Rowan v2 API.\n\nExplores the conformational space of a molecule to find low-energy structures.\n\nArgs:\n    initial_molecule: SMILES string or molecule object\n    conf_gen_mode: default to "rapid"\n        Options: "rapid", "careful", "meticulous"\n    final_method: default: "aimnet2_wb97md3"\n        Try other options, if user specifies\n    solvent: Optional solvent for implicit solvation (e.g., "water", "ethanol")\n    transition_state: Whether searching for transition state conformers (default: False)\n    name: Workflow name for tracking\n    folder_uuid: Optional folder UUID for organization\n    max_credits: Optional credit limit for the calculation\n    \nReturns:\n    Workflow object representing the submitted workflow\n    \nExample:\n    # Basic conformer search\n    result = submit_conformer_search_workflow(\n        initial_molecule="CCCC",\n        conf_gen_mode="rapid"\n    )\n    \n    # Careful search with solvent\n    result = submit_conformer_search_workflow(\n        initial_molecule="CC(C)CC(=O)O",\n        conf_gen_mode="careful",\n        solvent="water",\n        final_method="r2scan_3c"\n    )\n', 'inputSchema': {'properties': {'initial_molecule': {'title': 'Initial Molecule', 'type': 'string'}, 'conf_gen_mode': {'default': 'rapid', 'title': 'Conf Gen Mode', 'type': 'string'}, 'final_method': {'default': 'aimnet2_wb97md3', 'title': 'Final Method', 'type': 'string'}, 'solvent': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Solvent'}, 'transition_state': {'default': False, 'title': 'Transition State', 'type': 'boolean'}, 'name': {'default': 'Conformer Search Workflow', 'title': 'Name', 'type': 'string'}, 'folder_uuid': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Folder Uuid'}, 'max_credits': {'anyOf': [{'type': 'integer'}, {'type': 'null'}], 'default': None, 'title': 'Max Credits'}}, 'required': ['initial_molecule'], 'type': 'object'}}, {'name': 'submit_solubility_workflow', 'description': 'Submit a solubility prediction workflow using Rowan v2 API.\n\nPredicts solubility (log S) of a molecule in multiple solvents at various temperatures\nusing machine learning models.\n\nArgs:\n    initial_smiles: SMILES string of the molecule\n    solvents: List of solvents as SMILES or common names (e.g., ["water", "ethanol"])\n        If None, uses default solvents\n    temperatures: List of temperatures in Kelvin\n        If None, uses default temperature range\n    name: Workflow name for tracking\n    folder_uuid: Optional folder UUID for organization\n    max_credits: Optional credit limit for the calculation\n    \nReturns:\n    Workflow object representing the submitted workflow\n    \nExample:\n    # Basic solubility prediction\n    result = submit_solubility_workflow(\n        initial_smiles="CC(=O)Nc1ccc(O)cc1",\n        solvents=["water", "ethanol"],\n        temperatures=[298.15, 310.15]\n    )\n    \n    # With SMILES solvents\n    result = submit_solubility_workflow(\n        initial_smiles="CC(=O)O",\n        solvents=["O", "CCO", "CCCCCC"],\n        temperatures=[273.15, 298.15, 323.15]\n    )\n', 'inputSchema': {'properties': {'initial_smiles': {'title': 'Initial Smiles', 'type': 'string'}, 'solvents': {'anyOf': [{'items': {'type': 'string'}, 'type': 'array'}, {'type': 'null'}], 'default': None, 'title': 'Solvents'}, 'temperatures': {'anyOf': [{'items': {'type': 'number'}, 'type': 'array'}, {'type': 'null'}], 'default': None, 'title': 'Temperatures'}, 'name': {'default': 'Solubility Workflow', 'title': 'Name', 'type': 'string'}, 'folder_uuid': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Folder Uuid'}, 'max_credits': {'anyOf': [{'type': 'integer'}, {'type': 'null'}], 'default': None, 'title': 'Max Credits'}}, 'required': ['initial_smiles'], 'type': 'object'}}, {'name': 'submit_pka_workflow', 'description': 'Submit a pKa prediction workflow using Rowan v2 API.\n\nPredicts acid dissociation constants (pKa) for ionizable groups in a molecule\nusing quantum chemistry calculations.\n\nArgs:\n    initial_molecule: SMILES string or molecule object\n    pka_range: Tuple of (min, max) pKa values to search (default: (2, 12))\n    deprotonate_elements: List of elements to consider for deprotonation\n        (e.g., ["N", "O", "S"]). If None, uses defaults\n    protonate_elements: List of elements to consider for protonation\n        (e.g., ["N", "O"]). If None, uses defaults\n    mode: Calculation mode (default: "careful")\n        Options: "rapid", "careful", "meticulous"\n    name: Workflow name for tracking\n    folder_uuid: Optional folder UUID for organization\n    max_credits: Optional credit limit for the calculation\n    \nReturns:\n    Workflow object representing the submitted workflow\n    \nExample:\n    # Basic pKa prediction\n    result = submit_pka_workflow(\n        initial_molecule="CC(=O)O",\n        pka_range=(2, 8)\n    )\n    \n    # Specific elements with meticulous mode\n    result = submit_pka_workflow(\n        initial_molecule="NC(C)C(=O)O",\n        pka_range=(1, 14),\n        deprotonate_elements=["N", "O"],\n        mode="meticulous"\n    )\n', 'inputSchema': {'properties': {'initial_molecule': {'title': 'Initial Molecule', 'type': 'string'}, 'pka_range': {'default': [2, 12], 'maxItems': 2, 'minItems': 2, 'prefixItems': [{'type': 'number'}, {'type': 'number'}], 'title': 'Pka Range', 'type': 'array'}, 'deprotonate_elements': {'anyOf': [{'items': {'type': 'string'}, 'type': 'array'}, {'type': 'null'}], 'default': None, 'title': 'Deprotonate Elements'}, 'protonate_elements': {'anyOf': [{'items': {'type': 'string'}, 'type': 'array'}, {'type': 'null'}], 'default': None, 'title': 'Protonate Elements'}, 'mode': {'default': 'careful', 'title': 'Mode', 'type': 'string'}, 'name': {'default': 'pKa Workflow', 'title': 'Name', 'type': 'string'}, 'folder_uuid': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Folder Uuid'}, 'max_credits': {'anyOf': [{'type': 'integer'}, {'type': 'null'}], 'default': None, 'title': 'Max Credits'}}, 'required': ['initial_molecule'], 'type': 'object'}}, {'name': 'submit_redox_potential_workflow', 'description': 'Submit a redox potential calculation workflow using Rowan v2 API.\n\nCalculates reduction and/or oxidation potentials for a molecule using\nquantum chemistry methods.\n\nArgs:\n    initial_molecule: SMILES string or molecule object\n    reduction: Whether to calculate reduction potential (default: False)\n    oxidization: Whether to calculate oxidation potential (default: True)\n    mode: Calculation mode (default: "rapid")\n        Options: "rapid", "careful", "meticulous"\n    name: Workflow name for tracking\n    folder_uuid: Optional folder UUID for organization\n    max_credits: Optional credit limit for the calculation\n    \nReturns:\n    Workflow object representing the submitted workflow\n    \nExample:\n    # Basic oxidation potential\n    result = submit_redox_potential_workflow(\n        initial_molecule="CC1=CC=CC=C1",\n        oxidization=True\n    )\n    \n    # Both reduction and oxidation with careful mode\n    result = submit_redox_potential_workflow(\n        initial_molecule="c1ccccc1",\n        reduction=True,\n        oxidization=True,\n        mode="careful"\n    )\n', 'inputSchema': {'properties': {'initial_molecule': {'title': 'Initial Molecule', 'type': 'string'}, 'reduction': {'default': False, 'title': 'Reduction', 'type': 'boolean'}, 'oxidization': {'default': True, 'title': 'Oxidization', 'type': 'boolean'}, 'mode': {'default': 'rapid', 'title': 'Mode', 'type': 'string'}, 'name': {'default': 'Redox Potential Workflow', 'title': 'Name', 'type': 'string'}, 'folder_uuid': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Folder Uuid'}, 'max_credits': {'anyOf': [{'type': 'integer'}, {'type': 'null'}], 'default': None, 'title': 'Max Credits'}}, 'required': ['initial_molecule'], 'type': 'object'}}, {'name': 'submit_fukui_workflow', 'description': 'Submit a Fukui indices calculation workflow using Rowan v2 API.\n\nCalculates Fukui indices to predict molecular reactivity at different sites.\nFukui indices indicate susceptibility to nucleophilic/electrophilic attack.\n\nArgs:\n    initial_molecule: SMILES string or molecule object\n    optimization_method: Method for geometry optimization (default: "gfn2_xtb")\n        Common options: "gfn2_xtb", "r2scan_3c", "aimnet2_wb97md3"\n    fukui_method: Method for Fukui calculation (default: "gfn1_xtb")\n        Common options: "gfn1_xtb", "gfn2_xtb"\n    solvent_settings: Optional solvent configuration dictionary\n        Example: {"solvent": "water", "model": "alpb"}\n    name: Workflow name for tracking\n    folder_uuid: Optional folder UUID for organization\n    max_credits: Optional credit limit for the calculation\n    \nReturns:\n    Workflow object representing the submitted workflow\n    \nExample:\n    # Basic Fukui indices\n    result = submit_fukui_workflow(\n        initial_molecule="CC(=O)O"\n    )\n    \n    # With solvent and advanced methods\n    result = submit_fukui_workflow(\n        initial_molecule="c1ccccc1N",\n        optimization_method="r2scan_3c",\n        fukui_method="gfn2_xtb",\n        solvent_settings={"solvent": "water", "model": "alpb"}\n    )\n', 'inputSchema': {'properties': {'initial_molecule': {'title': 'Initial Molecule', 'type': 'string'}, 'optimization_method': {'default': 'gfn2_xtb', 'title': 'Optimization Method', 'type': 'string'}, 'fukui_method': {'default': 'gfn1_xtb', 'title': 'Fukui Method', 'type': 'string'}, 'solvent_settings': {'anyOf': [{'additionalProperties': True, 'type': 'object'}, {'type': 'null'}], 'default': None, 'title': 'Solvent Settings'}, 'name': {'default': 'Fukui Workflow', 'title': 'Name', 'type': 'string'}, 'folder_uuid': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Folder Uuid'}, 'max_credits': {'anyOf': [{'type': 'integer'}, {'type': 'null'}], 'default': None, 'title': 'Max Credits'}}, 'required': ['initial_molecule'], 'type': 'object'}}, {'name': 'submit_tautomer_search_workflow', 'description': 'Submit a tautomer search workflow using Rowan v2 API.\n\nSearches for different tautomeric forms of a molecule and evaluates their\nrelative stabilities. Tautomers are structural isomers that readily interconvert.\n\nArgs:\n    initial_molecule: SMILES string or molecule object\n    mode: Search mode (default: "careful")\n        Options: "rapid", "careful", "meticulous"\n    name: Workflow name for tracking\n    folder_uuid: Optional folder UUID for organization\n    max_credits: Optional credit limit for the calculation\n    \nReturns:\n    Workflow object representing the submitted workflow\n    \nExample:\n    # Basic tautomer search\n    result = submit_tautomer_search_workflow(\n        initial_molecule="CC(=O)CC(=O)C"\n    )\n    \n    # Meticulous search for complex molecule\n    result = submit_tautomer_search_workflow(\n        initial_molecule="c1ccc2c(c1)ncc(=O)[nH]2",\n        mode="meticulous"\n    )\n', 'inputSchema': {'properties': {'initial_molecule': {'title': 'Initial Molecule', 'type': 'string'}, 'mode': {'default': 'careful', 'title': 'Mode', 'type': 'string'}, 'name': {'default': 'Tautomer Search Workflow', 'title': 'Name', 'type': 'string'}, 'folder_uuid': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Folder Uuid'}, 'max_credits': {'anyOf': [{'type': 'integer'}, {'type': 'null'}], 'default': None, 'title': 'Max Credits'}}, 'required': ['initial_molecule'], 'type': 'object'}}, {'name': 'submit_descriptors_workflow', 'description': 'Submit a molecular descriptors calculation workflow using Rowan v2 API.\n\nCalculates a comprehensive set of molecular descriptors including:\n- Physical properties (MW, logP, TPSA, etc.)\n- Electronic properties (HOMO/LUMO, dipole moment, etc.)\n- Structural features (rotatable bonds, H-bond donors/acceptors, etc.)\n- Topological indices\n\nArgs:\n    initial_molecule: SMILES string or molecule object\n    name: Workflow name for tracking\n    folder_uuid: Optional folder UUID for organization\n    max_credits: Optional credit limit for the calculation\n    \nReturns:\n    Workflow object representing the submitted workflow\n    \nExample:\n    # Basic descriptor calculation\n    result = submit_descriptors_workflow(\n        initial_molecule="CC(=O)Nc1ccc(O)cc1"\n    )\n    \n    # For complex molecule\n    result = submit_descriptors_workflow(\n        initial_molecule="CN1C=NC2=C1C(=O)N(C(=O)N2C)C",\n        name="Caffeine Descriptors"\n    )\n', 'inputSchema': {'properties': {'initial_molecule': {'title': 'Initial Molecule', 'type': 'string'}, 'name': {'default': 'Descriptors Workflow', 'title': 'Name', 'type': 'string'}, 'folder_uuid': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Folder Uuid'}, 'max_credits': {'anyOf': [{'type': 'integer'}, {'type': 'null'}], 'default': None, 'title': 'Max Credits'}}, 'required': ['initial_molecule'], 'type': 'object'}}, {'name': 'submit_scan_workflow', 'description': 'Submit a potential energy surface scan workflow using Rowan v2 API.\n\nPerforms systematic scans along specified molecular coordinates (bonds, angles,\nor dihedrals) to map the potential energy surface.\n\nArgs:\n    initial_molecule: SMILES string or molecule object\n    scan_settings: Dictionary specifying scan parameters\n        Example: {\n            "type": "dihedral",  # or "bond", "angle"\n            "atoms": [0, 1, 2, 3],  # atom indices\n            "start": -180,\n            "stop": 180,\n            "step": 10\n        }\n    calculation_engine: Computational engine (default: "omol25")\n        Options: "omol25", "xtb", "psi4"\n    calculation_method: Method for calculations (default: "uma_m_omol")\n        Options depend on engine\n    wavefront_propagation: Use wavefront optimization (default: True)\n        Speeds up scans by using previous geometries as starting points\n    name: Workflow name for tracking\n    folder_uuid: Optional folder UUID for organization\n    max_credits: Optional credit limit for the calculation\n    \nReturns:\n    Workflow object representing the submitted workflow\n    \nExample:\n    # Dihedral scan\n    result = submit_scan_workflow(\n        initial_molecule="CC(C)CC",\n        scan_settings={\n            "type": "dihedral",\n            "atoms": [0, 1, 2, 3],\n            "start": -180,\n            "stop": 180,\n            "step": 15\n        }\n    )\n    \n    # Bond scan with advanced method\n    result = submit_scan_workflow(\n        initial_molecule="CC",\n        scan_settings={\n            "type": "bond",\n            "atoms": [0, 1],\n            "start": 1.0,\n            "stop": 2.5,\n            "step": 0.1\n        },\n        calculation_method="r2scan_3c"\n    )\n', 'inputSchema': {'properties': {'initial_molecule': {'title': 'Initial Molecule', 'type': 'string'}, 'scan_settings': {'anyOf': [{'additionalProperties': True, 'type': 'object'}, {'type': 'null'}], 'default': None, 'title': 'Scan Settings'}, 'calculation_engine': {'default': 'omol25', 'title': 'Calculation Engine', 'type': 'string'}, 'calculation_method': {'default': 'uma_m_omol', 'title': 'Calculation Method', 'type': 'string'}, 'wavefront_propagation': {'default': True, 'title': 'Wavefront Propagation', 'type': 'boolean'}, 'name': {'default': 'Scan Workflow', 'title': 'Name', 'type': 'string'}, 'folder_uuid': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Folder Uuid'}, 'max_credits': {'anyOf': [{'type': 'integer'}, {'type': 'null'}], 'default': None, 'title': 'Max Credits'}}, 'required': ['initial_molecule'], 'type': 'object'}}, {'name': 'submit_irc_workflow', 'description': 'Submits an Intrinsic Reaction Coordinate (IRC) workflow to the API.\n\nArgs:\n    initial_molecule: The initial molecule to perform the IRC calculation on.\n        Can be a dict, StJamesMolecule, or RdkitMol object\n    method: The computational method to use for the IRC calculation (default: "uma_m_omol")\n        See list of available methods for options\n    engine: The computational engine to use for the calculation (default: "omol25")\n        See list of available engines\n    preopt: Whether to perform a pre-optimization of the molecule (default: True)\n    step_size: The step size to use for the IRC calculation (default: 0.05)\n    max_irc_steps: The maximum number of IRC steps to perform (default: 30)\n    name: The name of the workflow\n    folder_uuid: The UUID of the folder to place the workflow in\n    max_credits: The maximum number of credits to use for the workflow\n    \nReturns:\n    Workflow object representing the submitted IRC workflow\n    \nExample:\n    # Basic IRC calculation\n    result = submit_irc_workflow(\n        initial_molecule={"smiles": "[CH3].[CH3]"},\n        method="gfn2_xtb",\n        max_irc_steps=50\n    )\n    \n    # IRC with specific method and engine\n    result = submit_irc_workflow(\n        initial_molecule={"smiles": "CC(O)=CC"},\n        method="r2scan_3c",\n        engine="psi4",\n        step_size=0.03\n    )\n', 'inputSchema': {'properties': {'initial_molecule': {'anyOf': [{'additionalProperties': True, 'type': 'object'}, {}, {'type': 'null'}], 'default': None, 'title': 'Initial Molecule'}, 'method': {'default': 'uma_m_omol', 'title': 'Method', 'type': 'string'}, 'engine': {'default': 'omol25', 'title': 'Engine', 'type': 'string'}, 'preopt': {'default': True, 'title': 'Preopt', 'type': 'boolean'}, 'step_size': {'default': 0.05, 'title': 'Step Size', 'type': 'number'}, 'max_irc_steps': {'default': 30, 'title': 'Max Irc Steps', 'type': 'integer'}, 'name': {'default': 'IRC Workflow', 'title': 'Name', 'type': 'string'}, 'folder_uuid': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Folder Uuid'}, 'max_credits': {'anyOf': [{'type': 'integer'}, {'type': 'null'}], 'default': None, 'title': 'Max Credits'}}, 'type': 'object'}}, {'name': 'submit_protein_cofolding_workflow', 'description': 'Submits a protein cofolding workflow to the API.\n\nArgs:\n    initial_protein_sequences: The sequences of the proteins to be cofolded\n    initial_smiles_list: A list of SMILES strings for the ligands to be cofolded with\n    ligand_binding_affinity_index: The index of the ligand for which to compute the binding affinity\n    use_msa_server: Whether to use the MSA server for the computation\n    use_potentials: Whether to use potentials for the computation\n    name: The name of the workflow\n    model: The model to use for the computation\n    folder_uuid: The UUID of the folder to store the workflow in\n    max_credits: The maximum number of credits to use for the workflow\n    \nReturns:\n    Workflow object representing the submitted workflow\n    \nExample:\n    # Protein dimer cofolding\n    result = submit_protein_cofolding_workflow(\n        initial_protein_sequences=[\n            "MKTAYIAKQRQISFVKSHFSRQLEERLGLIEVQAPILSRVGDGTQDNLSGAEK",\n            "MKQHKAMIVALIVICITAVVAALVTRKDLCEVHIRTGQTEVAVF"\n        ]\n    )\n    \n    # Protein-ligand complex\n    result = submit_protein_cofolding_workflow(\n        initial_protein_sequences=["MGSSHHHHHHSSGLVPRGSH"],\n        initial_smiles_list=["CC(=O)O", "CCO"],\n        ligand_binding_affinity_index=0,\n        use_msa_server=True\n    )\n', 'inputSchema': {'properties': {'initial_protein_sequences': {'items': {'type': 'string'}, 'title': 'Initial Protein Sequences', 'type': 'array'}, 'initial_smiles_list': {'anyOf': [{'items': {'type': 'string'}, 'type': 'array'}, {'type': 'null'}], 'default': None, 'title': 'Initial Smiles List'}, 'ligand_binding_affinity_index': {'anyOf': [{'type': 'integer'}, {'type': 'null'}], 'default': None, 'title': 'Ligand Binding Affinity Index'}, 'use_msa_server': {'default': True, 'title': 'Use Msa Server', 'type': 'boolean'}, 'use_potentials': {'default': False, 'title': 'Use Potentials', 'type': 'boolean'}, 'name': {'default': 'Cofolding Workflow', 'title': 'Name', 'type': 'string'}, 'model': {'default': 'boltz_2', 'title': 'Model', 'type': 'string'}, 'folder_uuid': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Folder Uuid'}, 'max_credits': {'anyOf': [{'type': 'integer'}, {'type': 'null'}], 'default': None, 'title': 'Max Credits'}}, 'required': ['initial_protein_sequences'], 'type': 'object'}}, {'name': 'submit_docking_workflow', 'description': 'Submits a Docking workflow to the API.\n\nArgs:\n    protein: The protein to dock. Can be fed as a uuid or a Protein object\n    pocket: The pocket to dock into\n    initial_molecule: The initial molecule to be docked.\n        Can be a dict, StJamesMolecule, or RdkitMol object\n    do_csearch: Whether to perform a conformational search on the ligand\n    do_optimization: Whether to perform an optimization on the ligand\n    name: The name of the workflow\n    folder_uuid: The UUID of the folder to place the workflow in\n    max_credits: The maximum number of credits to use for the workflow\n    \nReturns:\n    Workflow object representing the submitted workflow\n    \nExample:\n    # Basic docking with protein UUID\n    result = submit_docking_workflow(\n        protein="protein-uuid-123",\n        pocket=pocket_obj,\n        initial_molecule={"smiles": "CC(=O)Oc1ccccc1C(=O)O"}\n    )\n    \n    # Docking with optimization disabled\n    result = submit_docking_workflow(\n        protein=protein_obj,\n        pocket=pocket_obj,\n        initial_molecule={"smiles": "CCO"},\n        do_csearch=False,\n        do_optimization=False\n    )\n', 'inputSchema': {'properties': {'protein': {'anyOf': [{'type': 'string'}, {}], 'title': 'Protein'}, 'pocket': {'title': 'Pocket'}, 'initial_molecule': {'anyOf': [{'additionalProperties': True, 'type': 'object'}, {}, {'type': 'null'}], 'default': None, 'title': 'Initial Molecule'}, 'do_csearch': {'default': True, 'title': 'Do Csearch', 'type': 'boolean'}, 'do_optimization': {'default': True, 'title': 'Do Optimization', 'type': 'boolean'}, 'name': {'default': 'Docking Workflow', 'title': 'Name', 'type': 'string'}, 'folder_uuid': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Folder Uuid'}, 'max_credits': {'anyOf': [{'type': 'integer'}, {'type': 'null'}], 'default': None, 'title': 'Max Credits'}}, 'required': ['protein', 'pocket'], 'type': 'object'}}, {'name': 'workflow_fetch_latest', 'description': 'Fetch the latest workflow data from the database.\n\nUpdates the workflow object with the most recent status and results.\n\nArgs:\n    workflow_uuid: The UUID of the workflow to fetch\n    in_place: Whether to update the workflow object in place (default: False)\n    \nReturns:\n    Dictionary containing the updated workflow data including status and results\n', 'inputSchema': {'properties': {'workflow_uuid': {'title': 'Workflow Uuid', 'type': 'string'}, 'in_place': {'default': False, 'title': 'In Place', 'type': 'boolean'}}, 'required': ['workflow_uuid'], 'type': 'object'}}, {'name': 'workflow_wait_for_result', 'description': 'Wait for a workflow to complete and return the result.\n\nBlocks until the workflow completes, polling at specified intervals.\n\nArgs:\n    workflow_uuid: The UUID of the workflow to wait for\n    poll_interval: Time in seconds between status checks (default: 5)\n    \nReturns:\n    Dictionary containing the completed workflow data including results\n', 'inputSchema': {'properties': {'workflow_uuid': {'title': 'Workflow Uuid', 'type': 'string'}, 'poll_interval': {'default': 5, 'title': 'Poll Interval', 'type': 'integer'}}, 'required': ['workflow_uuid'], 'type': 'object'}}, {'name': 'workflow_get_status', 'description': 'Get the current status of a workflow.\n\nArgs:\n    workflow_uuid: The UUID of the workflow\n    \nReturns:\n    Dictionary with status information\n', 'inputSchema': {'properties': {'workflow_uuid': {'title': 'Workflow Uuid', 'type': 'string'}}, 'required': ['workflow_uuid'], 'type': 'object'}}, {'name': 'workflow_stop', 'description': 'Stop a running workflow.\n\nArgs:\n    workflow_uuid: The UUID of the workflow to stop\n    \nReturns:\n    Dictionary with confirmation message\n', 'inputSchema': {'properties': {'workflow_uuid': {'title': 'Workflow Uuid', 'type': 'string'}}, 'required': ['workflow_uuid'], 'type': 'object'}}, {'name': 'workflow_delete', 'description': 'Delete a workflow.\n\nThis permanently removes the workflow and its results from the database.\n\nArgs:\n    workflow_uuid: The UUID of the workflow to delete\n    \nReturns:\n    Dictionary with confirmation message\n', 'inputSchema': {'properties': {'workflow_uuid': {'title': 'Workflow Uuid', 'type': 'string'}}, 'required': ['workflow_uuid'], 'type': 'object'}}, {'name': 'retrieve_workflow', 'description': 'Retrieve a workflow from the API.\n\nArgs:\n    uuid: The UUID of the workflow to retrieve\n    \nReturns:\n    Dictionary containing the complete workflow data\n    \nRaises:\n    HTTPError: If the API request fails\n', 'inputSchema': {'properties': {'uuid': {'title': 'Uuid', 'type': 'string'}}, 'required': ['uuid'], 'type': 'object'}}, {'name': 'retrieve_calculation_molecules', 'description': 'Retrieve a list of molecules from a calculation.\n\nArgs:\n    uuid: The UUID of the calculation to retrieve molecules from\n    \nReturns:\n    List of dictionaries representing the molecules in the calculation\n    \nRaises:\n    HTTPError: If the API request fails\n', 'inputSchema': {'properties': {'uuid': {'title': 'Uuid', 'type': 'string'}}, 'required': ['uuid'], 'type': 'object'}}, {'name': 'list_workflows', 'description': 'List workflows subject to the specified criteria.\n\nArgs:\n    parent_uuid: The UUID of the parent folder\n    name_contains: Substring to search for in workflow names\n    public: Filter workflows by their public status\n    starred: Filter workflows by their starred status\n    status: Filter workflows by their status\n    workflow_type: Filter workflows by their type\n    page: The page number to retrieve (default: 0)\n    size: The number of items per page (default: 10)\n    \nReturns:\n    List of workflow dictionaries that match the search criteria\n    \nRaises:\n    HTTPError: If the request to the API fails\n', 'inputSchema': {'properties': {'parent_uuid': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Parent Uuid'}, 'name_contains': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Name Contains'}, 'public': {'anyOf': [{'type': 'boolean'}, {'type': 'null'}], 'default': None, 'title': 'Public'}, 'starred': {'anyOf': [{'type': 'boolean'}, {'type': 'null'}], 'default': None, 'title': 'Starred'}, 'status': {'anyOf': [{'type': 'integer'}, {'type': 'null'}], 'default': None, 'title': 'Status'}, 'workflow_type': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Workflow Type'}, 'page': {'default': 0, 'title': 'Page', 'type': 'integer'}, 'size': {'default': 10, 'title': 'Size', 'type': 'integer'}}, 'type': 'object'}}, {'name': 'workflow_update', 'description': 'Update workflow details.\n\nArgs:\n    workflow_uuid: The UUID of the workflow to update\n    name: New name for the workflow (optional)\n    notes: New notes for the workflow (optional)\n    starred: Whether to star/unstar the workflow (optional)\n    public: Whether to make the workflow public/private (optional)\n    \nReturns:\n    Dictionary with updated workflow information\n', 'inputSchema': {'properties': {'workflow_uuid': {'title': 'Workflow Uuid', 'type': 'string'}, 'name': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Name'}, 'notes': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Notes'}, 'starred': {'anyOf': [{'type': 'boolean'}, {'type': 'null'}], 'default': None, 'title': 'Starred'}, 'public': {'anyOf': [{'type': 'boolean'}, {'type': 'null'}], 'default': None, 'title': 'Public'}}, 'required': ['workflow_uuid'], 'type': 'object'}}, {'name': 'workflow_is_finished', 'description': 'Check if a workflow is finished.\n\nArgs:\n    workflow_uuid: The UUID of the workflow to check\n    \nReturns:\n    Dictionary with workflow completion status\n', 'inputSchema': {'properties': {'workflow_uuid': {'title': 'Workflow Uuid', 'type': 'string'}}, 'required': ['workflow_uuid'], 'type': 'object'}}, {'name': 'workflow_delete_data', 'description': 'Delete workflow data while keeping the workflow record.\n\nArgs:\n    workflow_uuid: The UUID of the workflow\n    \nReturns:\n    Dictionary with confirmation message\n', 'inputSchema': {'properties': {'workflow_uuid': {'title': 'Workflow Uuid', 'type': 'string'}}, 'required': ['workflow_uuid'], 'type': 'object'}}]})), metadata=None)
2025-08-02 14:06:02,153 - sse_starlette.sse - DEBUG - chunk: b'event: message\r\ndata: {"jsonrpc":"2.0","id":2,"result":{"tools":[{"name":"submit_basic_calculation_workflow","description":"Submit a basic calculation workflow using Rowan v2 API.\\n\\nPerforms fundamental quantum chemistry calculations with configurable methods\\nand computational tasks. Returns a workflow object for tracking progress.\\n","inputSchema":{"properties":{"initial_molecule":{"anyOf":[{"type":"string"},{"additionalProperties":true,"type":"object"},{}],"description":"The molecule to perform the calculation on. Can be a SMILES string, dict, StJamesMolecule, or RdkitMol object","title":"Initial Molecule"},"method":{"default":"uma_m_omol","description":"The method to use for the calculation (e.g., \'uma_m_omol\', \'gfn2-xtb\', \'r2scan_3c\')","title":"Method","type":"string"},"tasks":{"anyOf":[{"items":{"type":"string"},"type":"array"},{"type":"string"},{"type":"null"}],"default":null,"description":"Tasks to perform: list [\'optimize\'], string \'optimize\', or comma-separated \'optimize,frequencies\'. Defaults to None","title":"Tasks"},"mode":{"default":"auto","description":"The mode to run the calculation in (\'auto\', \'rapid\', \'careful\', \'meticulous\')","title":"Mode","type":"string"},"engine":{"default":"omol25","description":"The computational engine to use (\'omol25\', \'xtb\', \'psi4\')","title":"Engine","type":"string"},"name":{"default":"Basic Calculation Workflow","description":"The name of the workflow for identification","title":"Name","type":"string"},"folder_uuid":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"description":"UUID of the folder to place the workflow in (optional)","title":"Folder Uuid"},"max_credits":{"anyOf":[{"type":"integer"},{"type":"null"}],"default":null,"description":"Maximum number of credits to use for the workflow (optional)","title":"Max Credits"}},"required":["initial_molecule"],"type":"object"}},{"name":"submit_conformer_search_workflow","description":"Submit a conformer search workflow using Rowan v2 API.\\n\\nExplores the conformational space of a molecule to find low-energy structures.\\n\\nArgs:\\n    initial_molecule: SMILES string or molecule object\\n    conf_gen_mode: default to \\"rapid\\"\\n        Options: \\"rapid\\", \\"careful\\", \\"meticulous\\"\\n    final_method: default: \\"aimnet2_wb97md3\\"\\n        Try other options, if user specifies\\n    solvent: Optional solvent for implicit solvation (e.g., \\"water\\", \\"ethanol\\")\\n    transition_state: Whether searching for transition state conformers (default: False)\\n    name: Workflow name for tracking\\n    folder_uuid: Optional folder UUID for organization\\n    max_credits: Optional credit limit for the calculation\\n    \\nReturns:\\n    Workflow object representing the submitted workflow\\n    \\nExample:\\n    # Basic conformer search\\n    result = submit_conformer_search_workflow(\\n        initial_molecule=\\"CCCC\\",\\n        conf_gen_mode=\\"rapid\\"\\n    )\\n    \\n    # Careful search with solvent\\n    result = submit_conformer_search_workflow(\\n        initial_molecule=\\"CC(C)CC(=O)O\\",\\n        conf_gen_mode=\\"careful\\",\\n        solvent=\\"water\\",\\n        final_method=\\"r2scan_3c\\"\\n    )\\n","inputSchema":{"properties":{"initial_molecule":{"title":"Initial Molecule","type":"string"},"conf_gen_mode":{"default":"rapid","title":"Conf Gen Mode","type":"string"},"final_method":{"default":"aimnet2_wb97md3","title":"Final Method","type":"string"},"solvent":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"title":"Solvent"},"transition_state":{"default":false,"title":"Transition State","type":"boolean"},"name":{"default":"Conformer Search Workflow","title":"Name","type":"string"},"folder_uuid":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"title":"Folder Uuid"},"max_credits":{"anyOf":[{"type":"integer"},{"type":"null"}],"default":null,"title":"Max Credits"}},"required":["initial_molecule"],"type":"object"}},{"name":"submit_solubility_workflow","description":"Submit a solubility prediction workflow using Rowan v2 API.\\n\\nPredicts solubility (log S) of a molecule in multiple solvents at various temperatures\\nusing machine learning models.\\n\\nArgs:\\n    initial_smiles: SMILES string of the molecule\\n    solvents: List of solvents as SMILES or common names (e.g., [\\"water\\", \\"ethanol\\"])\\n        If None, uses default solvents\\n    temperatures: List of temperatures in Kelvin\\n        If None, uses default temperature range\\n    name: Workflow name for tracking\\n    folder_uuid: Optional folder UUID for organization\\n    max_credits: Optional credit limit for the calculation\\n    \\nReturns:\\n    Workflow object representing the submitted workflow\\n    \\nExample:\\n    # Basic solubility prediction\\n    result = submit_solubility_workflow(\\n        initial_smiles=\\"CC(=O)Nc1ccc(O)cc1\\",\\n        solvents=[\\"water\\", \\"ethanol\\"],\\n        temperatures=[298.15, 310.15]\\n    )\\n    \\n    # With SMILES solvents\\n    result = submit_solubility_workflow(\\n        initial_smiles=\\"CC(=O)O\\",\\n        solvents=[\\"O\\", \\"CCO\\", \\"CCCCCC\\"],\\n        temperatures=[273.15, 298.15, 323.15]\\n    )\\n","inputSchema":{"properties":{"initial_smiles":{"title":"Initial Smiles","type":"string"},"solvents":{"anyOf":[{"items":{"type":"string"},"type":"array"},{"type":"null"}],"default":null,"title":"Solvents"},"temperatures":{"anyOf":[{"items":{"type":"number"},"type":"array"},{"type":"null"}],"default":null,"title":"Temperatures"},"name":{"default":"Solubility Workflow","title":"Name","type":"string"},"folder_uuid":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"title":"Folder Uuid"},"max_credits":{"anyOf":[{"type":"integer"},{"type":"null"}],"default":null,"title":"Max Credits"}},"required":["initial_smiles"],"type":"object"}},{"name":"submit_pka_workflow","description":"Submit a pKa prediction workflow using Rowan v2 API.\\n\\nPredicts acid dissociation constants (pKa) for ionizable groups in a molecule\\nusing quantum chemistry calculations.\\n\\nArgs:\\n    initial_molecule: SMILES string or molecule object\\n    pka_range: Tuple of (min, max) pKa values to search (default: (2, 12))\\n    deprotonate_elements: List of elements to consider for deprotonation\\n        (e.g., [\\"N\\", \\"O\\", \\"S\\"]). If None, uses defaults\\n    protonate_elements: List of elements to consider for protonation\\n        (e.g., [\\"N\\", \\"O\\"]). If None, uses defaults\\n    mode: Calculation mode (default: \\"careful\\")\\n        Options: \\"rapid\\", \\"careful\\", \\"meticulous\\"\\n    name: Workflow name for tracking\\n    folder_uuid: Optional folder UUID for organization\\n    max_credits: Optional credit limit for the calculation\\n    \\nReturns:\\n    Workflow object representing the submitted workflow\\n    \\nExample:\\n    # Basic pKa prediction\\n    result = submit_pka_workflow(\\n        initial_molecule=\\"CC(=O)O\\",\\n        pka_range=(2, 8)\\n    )\\n    \\n    # Specific elements with meticulous mode\\n    result = submit_pka_workflow(\\n        initial_molecule=\\"NC(C)C(=O)O\\",\\n        pka_range=(1, 14),\\n        deprotonate_elements=[\\"N\\", \\"O\\"],\\n        mode=\\"meticulous\\"\\n    )\\n","inputSchema":{"properties":{"initial_molecule":{"title":"Initial Molecule","type":"string"},"pka_range":{"default":[2,12],"maxItems":2,"minItems":2,"prefixItems":[{"type":"number"},{"type":"number"}],"title":"Pka Range","type":"array"},"deprotonate_elements":{"anyOf":[{"items":{"type":"string"},"type":"array"},{"type":"null"}],"default":null,"title":"Deprotonate Elements"},"protonate_elements":{"anyOf":[{"items":{"type":"string"},"type":"array"},{"type":"null"}],"default":null,"title":"Protonate Elements"},"mode":{"default":"careful","title":"Mode","type":"string"},"name":{"default":"pKa Workflow","title":"Name","type":"string"},"folder_uuid":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"title":"Folder Uuid"},"max_credits":{"anyOf":[{"type":"integer"},{"type":"null"}],"default":null,"title":"Max Credits"}},"required":["initial_molecule"],"type":"object"}},{"name":"submit_redox_potential_workflow","description":"Submit a redox potential calculation workflow using Rowan v2 API.\\n\\nCalculates reduction and/or oxidation potentials for a molecule using\\nquantum chemistry methods.\\n\\nArgs:\\n    initial_molecule: SMILES string or molecule object\\n    reduction: Whether to calculate reduction potential (default: False)\\n    oxidization: Whether to calculate oxidation potential (default: True)\\n    mode: Calculation mode (default: \\"rapid\\")\\n        Options: \\"rapid\\", \\"careful\\", \\"meticulous\\"\\n    name: Workflow name for tracking\\n    folder_uuid: Optional folder UUID for organization\\n    max_credits: Optional credit limit for the calculation\\n    \\nReturns:\\n    Workflow object representing the submitted workflow\\n    \\nExample:\\n    # Basic oxidation potential\\n    result = submit_redox_potential_workflow(\\n        initial_molecule=\\"CC1=CC=CC=C1\\",\\n        oxidization=True\\n    )\\n    \\n    # Both reduction and oxidation with careful mode\\n    result = submit_redox_potential_workflow(\\n        initial_molecule=\\"c1ccccc1\\",\\n        reduction=True,\\n        oxidization=True,\\n        mode=\\"careful\\"\\n    )\\n","inputSchema":{"properties":{"initial_molecule":{"title":"Initial Molecule","type":"string"},"reduction":{"default":false,"title":"Reduction","type":"boolean"},"oxidization":{"default":true,"title":"Oxidization","type":"boolean"},"mode":{"default":"rapid","title":"Mode","type":"string"},"name":{"default":"Redox Potential Workflow","title":"Name","type":"string"},"folder_uuid":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"title":"Folder Uuid"},"max_credits":{"anyOf":[{"type":"integer"},{"type":"null"}],"default":null,"title":"Max Credits"}},"required":["initial_molecule"],"type":"object"}},{"name":"submit_fukui_workflow","description":"Submit a Fukui indices calculation workflow using Rowan v2 API.\\n\\nCalculates Fukui indices to predict molecular reactivity at different sites.\\nFukui indices indicate susceptibility to nucleophilic/electrophilic attack.\\n\\nArgs:\\n    initial_molecule: SMILES string or molecule object\\n    optimization_method: Method for geometry optimization (default: \\"gfn2_xtb\\")\\n        Common options: \\"gfn2_xtb\\", \\"r2scan_3c\\", \\"aimnet2_wb97md3\\"\\n    fukui_method: Method for Fukui calculation (default: \\"gfn1_xtb\\")\\n        Common options: \\"gfn1_xtb\\", \\"gfn2_xtb\\"\\n    solvent_settings: Optional solvent configuration dictionary\\n        Example: {\\"solvent\\": \\"water\\", \\"model\\": \\"alpb\\"}\\n    name: Workflow name for tracking\\n    folder_uuid: Optional folder UUID for organization\\n    max_credits: Optional credit limit for the calculation\\n    \\nReturns:\\n    Workflow object representing the submitted workflow\\n    \\nExample:\\n    # Basic Fukui indices\\n    result = submit_fukui_workflow(\\n        initial_molecule=\\"CC(=O)O\\"\\n    )\\n    \\n    # With solvent and advanced methods\\n    result = submit_fukui_workflow(\\n        initial_molecule=\\"c1ccccc1N\\",\\n        optimization_method=\\"r2scan_3c\\",\\n        fukui_method=\\"gfn2_xtb\\",\\n        solvent_settings={\\"solvent\\": \\"water\\", \\"model\\": \\"alpb\\"}\\n    )\\n","inputSchema":{"properties":{"initial_molecule":{"title":"Initial Molecule","type":"string"},"optimization_method":{"default":"gfn2_xtb","title":"Optimization Method","type":"string"},"fukui_method":{"default":"gfn1_xtb","title":"Fukui Method","type":"string"},"solvent_settings":{"anyOf":[{"additionalProperties":true,"type":"object"},{"type":"null"}],"default":null,"title":"Solvent Settings"},"name":{"default":"Fukui Workflow","title":"Name","type":"string"},"folder_uuid":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"title":"Folder Uuid"},"max_credits":{"anyOf":[{"type":"integer"},{"type":"null"}],"default":null,"title":"Max Credits"}},"required":["initial_molecule"],"type":"object"}},{"name":"submit_tautomer_search_workflow","description":"Submit a tautomer search workflow using Rowan v2 API.\\n\\nSearches for different tautomeric forms of a molecule and evaluates their\\nrelative stabilities. Tautomers are structural isomers that readily interconvert.\\n\\nArgs:\\n    initial_molecule: SMILES string or molecule object\\n    mode: Search mode (default: \\"careful\\")\\n        Options: \\"rapid\\", \\"careful\\", \\"meticulous\\"\\n    name: Workflow name for tracking\\n    folder_uuid: Optional folder UUID for organization\\n    max_credits: Optional credit limit for the calculation\\n    \\nReturns:\\n    Workflow object representing the submitted workflow\\n    \\nExample:\\n    # Basic tautomer search\\n    result = submit_tautomer_search_workflow(\\n        initial_molecule=\\"CC(=O)CC(=O)C\\"\\n    )\\n    \\n    # Meticulous search for complex molecule\\n    result = submit_tautomer_search_workflow(\\n        initial_molecule=\\"c1ccc2c(c1)ncc(=O)[nH]2\\",\\n        mode=\\"meticulous\\"\\n    )\\n","inputSchema":{"properties":{"initial_molecule":{"title":"Initial Molecule","type":"string"},"mode":{"default":"careful","title":"Mode","type":"string"},"name":{"default":"Tautomer Search Workflow","title":"Name","type":"string"},"folder_uuid":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"title":"Folder Uuid"},"max_credits":{"anyOf":[{"type":"integer"},{"type":"null"}],"default":null,"title":"Max Credits"}},"required":["initial_molecule"],"type":"object"}},{"name":"submit_descriptors_workflow","description":"Submit a molecular descriptors calculation workflow using Rowan v2 API.\\n\\nCalculates a comprehensive set of molecular descriptors including:\\n- Physical properties (MW, logP, TPSA, etc.)\\n- Electronic properties (HOMO/LUMO, dipole moment, etc.)\\n- Structural features (rotatable bonds, H-bond donors/acceptors, etc.)\\n- Topological indices\\n\\nArgs:\\n    initial_molecule: SMILES string or molecule object\\n    name: Workflow name for tracking\\n    folder_uuid: Optional folder UUID for organization\\n    max_credits: Optional credit limit for the calculation\\n    \\nReturns:\\n    Workflow object representing the submitted workflow\\n    \\nExample:\\n    # Basic descriptor calculation\\n    result = submit_descriptors_workflow(\\n        initial_molecule=\\"CC(=O)Nc1ccc(O)cc1\\"\\n    )\\n    \\n    # For complex molecule\\n    result = submit_descriptors_workflow(\\n        initial_molecule=\\"CN1C=NC2=C1C(=O)N(C(=O)N2C)C\\",\\n        name=\\"Caffeine Descriptors\\"\\n    )\\n","inputSchema":{"properties":{"initial_molecule":{"title":"Initial Molecule","type":"string"},"name":{"default":"Descriptors Workflow","title":"Name","type":"string"},"folder_uuid":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"title":"Folder Uuid"},"max_credits":{"anyOf":[{"type":"integer"},{"type":"null"}],"default":null,"title":"Max Credits"}},"required":["initial_molecule"],"type":"object"}},{"name":"submit_scan_workflow","description":"Submit a potential energy surface scan workflow using Rowan v2 API.\\n\\nPerforms systematic scans along specified molecular coordinates (bonds, angles,\\nor dihedrals) to map the potential energy surface.\\n\\nArgs:\\n    initial_molecule: SMILES string or molecule object\\n    scan_settings: Dictionary specifying scan parameters\\n        Example: {\\n            \\"type\\": \\"dihedral\\",  # or \\"bond\\", \\"angle\\"\\n            \\"atoms\\": [0, 1, 2, 3],  # atom indices\\n            \\"start\\": -180,\\n            \\"stop\\": 180,\\n            \\"step\\": 10\\n        }\\n    calculation_engine: Computational engine (default: \\"omol25\\")\\n        Options: \\"omol25\\", \\"xtb\\", \\"psi4\\"\\n    calculation_method: Method for calculations (default: \\"uma_m_omol\\")\\n        Options depend on engine\\n    wavefront_propagation: Use wavefront optimization (default: True)\\n        Speeds up scans by using previous geometries as starting points\\n    name: Workflow name for tracking\\n    folder_uuid: Optional folder UUID for organization\\n    max_credits: Optional credit limit for the calculation\\n    \\nReturns:\\n    Workflow object representing the submitted workflow\\n    \\nExample:\\n    # Dihedral scan\\n    result = submit_scan_workflow(\\n        initial_molecule=\\"CC(C)CC\\",\\n        scan_settings={\\n            \\"type\\": \\"dihedral\\",\\n            \\"atoms\\": [0, 1, 2, 3],\\n            \\"start\\": -180,\\n            \\"stop\\": 180,\\n            \\"step\\": 15\\n        }\\n    )\\n    \\n    # Bond scan with advanced method\\n    result = submit_scan_workflow(\\n        initial_molecule=\\"CC\\",\\n        scan_settings={\\n            \\"type\\": \\"bond\\",\\n            \\"atoms\\": [0, 1],\\n            \\"start\\": 1.0,\\n            \\"stop\\": 2.5,\\n            \\"step\\": 0.1\\n        },\\n        calculation_method=\\"r2scan_3c\\"\\n    )\\n","inputSchema":{"properties":{"initial_molecule":{"title":"Initial Molecule","type":"string"},"scan_settings":{"anyOf":[{"additionalProperties":true,"type":"object"},{"type":"null"}],"default":null,"title":"Scan Settings"},"calculation_engine":{"default":"omol25","title":"Calculation Engine","type":"string"},"calculation_method":{"default":"uma_m_omol","title":"Calculation Method","type":"string"},"wavefront_propagation":{"default":true,"title":"Wavefront Propagation","type":"boolean"},"name":{"default":"Scan Workflow","title":"Name","type":"string"},"folder_uuid":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"title":"Folder Uuid"},"max_credits":{"anyOf":[{"type":"integer"},{"type":"null"}],"default":null,"title":"Max Credits"}},"required":["initial_molecule"],"type":"object"}},{"name":"submit_irc_workflow","description":"Submits an Intrinsic Reaction Coordinate (IRC) workflow to the API.\\n\\nArgs:\\n    initial_molecule: The initial molecule to perform the IRC calculation on.\\n        Can be a dict, StJamesMolecule, or RdkitMol object\\n    method: The computational method to use for the IRC calculation (default: \\"uma_m_omol\\")\\n        See list of available methods for options\\n    engine: The computational engine to use for the calculation (default: \\"omol25\\")\\n        See list of available engines\\n    preopt: Whether to perform a pre-optimization of the molecule (default: True)\\n    step_size: The step size to use for the IRC calculation (default: 0.05)\\n    max_irc_steps: The maximum number of IRC steps to perform (default: 30)\\n    name: The name of the workflow\\n    folder_uuid: The UUID of the folder to place the workflow in\\n    max_credits: The maximum number of credits to use for the workflow\\n    \\nReturns:\\n    Workflow object representing the submitted IRC workflow\\n    \\nExample:\\n    # Basic IRC calculation\\n    result = submit_irc_workflow(\\n        initial_molecule={\\"smiles\\": \\"[CH3].[CH3]\\"},\\n        method=\\"gfn2_xtb\\",\\n        max_irc_steps=50\\n    )\\n    \\n    # IRC with specific method and engine\\n    result = submit_irc_workflow(\\n        initial_molecule={\\"smiles\\": \\"CC(O)=CC\\"},\\n        method=\\"r2scan_3c\\",\\n        engine=\\"psi4\\",\\n        step_size=0.03\\n    )\\n","inputSchema":{"properties":{"initial_molecule":{"anyOf":[{"additionalProperties":true,"type":"object"},{},{"type":"null"}],"default":null,"title":"Initial Molecule"},"method":{"default":"uma_m_omol","title":"Method","type":"string"},"engine":{"default":"omol25","title":"Engine","type":"string"},"preopt":{"default":true,"title":"Preopt","type":"boolean"},"step_size":{"default":0.05,"title":"Step Size","type":"number"},"max_irc_steps":{"default":30,"title":"Max Irc Steps","type":"integer"},"name":{"default":"IRC Workflow","title":"Name","type":"string"},"folder_uuid":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"title":"Folder Uuid"},"max_credits":{"anyOf":[{"type":"integer"},{"type":"null"}],"default":null,"title":"Max Credits"}},"type":"object"}},{"name":"submit_protein_cofolding_workflow","description":"Submits a protein cofolding workflow to the API.\\n\\nArgs:\\n    initial_protein_sequences: The sequences of the proteins to be cofolded\\n    initial_smiles_list: A list of SMILES strings for the ligands to be cofolded with\\n    ligand_binding_affinity_index: The index of the ligand for which to compute the binding affinity\\n    use_msa_server: Whether to use the MSA server for the computation\\n    use_potentials: Whether to use potentials for the computation\\n    name: The name of the workflow\\n    model: The model to use for the computation\\n    folder_uuid: The UUID of the folder to store the workflow in\\n    max_credits: The maximum number of credits to use for the workflow\\n    \\nReturns:\\n    Workflow object representing the submitted workflow\\n    \\nExample:\\n    # Protein dimer cofolding\\n    result = submit_protein_cofolding_workflow(\\n        initial_protein_sequences=[\\n            \\"MKTAYIAKQRQISFVKSHFSRQLEERLGLIEVQAPILSRVGDGTQDNLSGAEK\\",\\n            \\"MKQHKAMIVALIVICITAVVAALVTRKDLCEVHIRTGQTEVAVF\\"\\n        ]\\n    )\\n    \\n    # Protein-ligand complex\\n    result = submit_protein_cofolding_workflow(\\n        initial_protein_sequences=[\\"MGSSHHHHHHSSGLVPRGSH\\"],\\n        initial_smiles_list=[\\"CC(=O)O\\", \\"CCO\\"],\\n        ligand_binding_affinity_index=0,\\n        use_msa_server=True\\n    )\\n","inputSchema":{"properties":{"initial_protein_sequences":{"items":{"type":"string"},"title":"Initial Protein Sequences","type":"array"},"initial_smiles_list":{"anyOf":[{"items":{"type":"string"},"type":"array"},{"type":"null"}],"default":null,"title":"Initial Smiles List"},"ligand_binding_affinity_index":{"anyOf":[{"type":"integer"},{"type":"null"}],"default":null,"title":"Ligand Binding Affinity Index"},"use_msa_server":{"default":true,"title":"Use Msa Server","type":"boolean"},"use_potentials":{"default":false,"title":"Use Potentials","type":"boolean"},"name":{"default":"Cofolding Workflow","title":"Name","type":"string"},"model":{"default":"boltz_2","title":"Model","type":"string"},"folder_uuid":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"title":"Folder Uuid"},"max_credits":{"anyOf":[{"type":"integer"},{"type":"null"}],"default":null,"title":"Max Credits"}},"required":["initial_protein_sequences"],"type":"object"}},{"name":"submit_docking_workflow","description":"Submits a Docking workflow to the API.\\n\\nArgs:\\n    protein: The protein to dock. Can be fed as a uuid or a Protein object\\n    pocket: The pocket to dock into\\n    initial_molecule: The initial molecule to be docked.\\n        Can be a dict, StJamesMolecule, or RdkitMol object\\n    do_csearch: Whether to perform a conformational search on the ligand\\n    do_optimization: Whether to perform an optimization on the ligand\\n    name: The name of the workflow\\n    folder_uuid: The UUID of the folder to place the workflow in\\n    max_credits: The maximum number of credits to use for the workflow\\n    \\nReturns:\\n    Workflow object representing the submitted workflow\\n    \\nExample:\\n    # Basic docking with protein UUID\\n    result = submit_docking_workflow(\\n        protein=\\"protein-uuid-123\\",\\n        pocket=pocket_obj,\\n        initial_molecule={\\"smiles\\": \\"CC(=O)Oc1ccccc1C(=O)O\\"}\\n    )\\n    \\n    # Docking with optimization disabled\\n    result = submit_docking_workflow(\\n        protein=protein_obj,\\n        pocket=pocket_obj,\\n        initial_molecule={\\"smiles\\": \\"CCO\\"},\\n        do_csearch=False,\\n        do_optimization=False\\n    )\\n","inputSchema":{"properties":{"protein":{"anyOf":[{"type":"string"},{}],"title":"Protein"},"pocket":{"title":"Pocket"},"initial_molecule":{"anyOf":[{"additionalProperties":true,"type":"object"},{},{"type":"null"}],"default":null,"title":"Initial Molecule"},"do_csearch":{"default":true,"title":"Do Csearch","type":"boolean"},"do_optimization":{"default":true,"title":"Do Optimization","type":"boolean"},"name":{"default":"Docking Workflow","title":"Name","type":"string"},"folder_uuid":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"title":"Folder Uuid"},"max_credits":{"anyOf":[{"type":"integer"},{"type":"null"}],"default":null,"title":"Max Credits"}},"required":["protein","pocket"],"type":"object"}},{"name":"workflow_fetch_latest","description":"Fetch the latest workflow data from the database.\\n\\nUpdates the workflow object with the most recent status and results.\\n\\nArgs:\\n    workflow_uuid: The UUID of the workflow to fetch\\n    in_place: Whether to update the workflow object in place (default: False)\\n    \\nReturns:\\n    Dictionary containing the updated workflow data including status and results\\n","inputSchema":{"properties":{"workflow_uuid":{"title":"Workflow Uuid","type":"string"},"in_place":{"default":false,"title":"In Place","type":"boolean"}},"required":["workflow_uuid"],"type":"object"}},{"name":"workflow_wait_for_result","description":"Wait for a workflow to complete and return the result.\\n\\nBlocks until the workflow completes, polling at specified intervals.\\n\\nArgs:\\n    workflow_uuid: The UUID of the workflow to wait for\\n    poll_interval: Time in seconds between status checks (default: 5)\\n    \\nReturns:\\n    Dictionary containing the completed workflow data including results\\n","inputSchema":{"properties":{"workflow_uuid":{"title":"Workflow Uuid","type":"string"},"poll_interval":{"default":5,"title":"Poll Interval","type":"integer"}},"required":["workflow_uuid"],"type":"object"}},{"name":"workflow_get_status","description":"Get the current status of a workflow.\\n\\nArgs:\\n    workflow_uuid: The UUID of the workflow\\n    \\nReturns:\\n    Dictionary with status information\\n","inputSchema":{"properties":{"workflow_uuid":{"title":"Workflow Uuid","type":"string"}},"required":["workflow_uuid"],"type":"object"}},{"name":"workflow_stop","description":"Stop a running workflow.\\n\\nArgs:\\n    workflow_uuid: The UUID of the workflow to stop\\n    \\nReturns:\\n    Dictionary with confirmation message\\n","inputSchema":{"properties":{"workflow_uuid":{"title":"Workflow Uuid","type":"string"}},"required":["workflow_uuid"],"type":"object"}},{"name":"workflow_delete","description":"Delete a workflow.\\n\\nThis permanently removes the workflow and its results from the database.\\n\\nArgs:\\n    workflow_uuid: The UUID of the workflow to delete\\n    \\nReturns:\\n    Dictionary with confirmation message\\n","inputSchema":{"properties":{"workflow_uuid":{"title":"Workflow Uuid","type":"string"}},"required":["workflow_uuid"],"type":"object"}},{"name":"retrieve_workflow","description":"Retrieve a workflow from the API.\\n\\nArgs:\\n    uuid: The UUID of the workflow to retrieve\\n    \\nReturns:\\n    Dictionary containing the complete workflow data\\n    \\nRaises:\\n    HTTPError: If the API request fails\\n","inputSchema":{"properties":{"uuid":{"title":"Uuid","type":"string"}},"required":["uuid"],"type":"object"}},{"name":"retrieve_calculation_molecules","description":"Retrieve a list of molecules from a calculation.\\n\\nArgs:\\n    uuid: The UUID of the calculation to retrieve molecules from\\n    \\nReturns:\\n    List of dictionaries representing the molecules in the calculation\\n    \\nRaises:\\n    HTTPError: If the API request fails\\n","inputSchema":{"properties":{"uuid":{"title":"Uuid","type":"string"}},"required":["uuid"],"type":"object"}},{"name":"list_workflows","description":"List workflows subject to the specified criteria.\\n\\nArgs:\\n    parent_uuid: The UUID of the parent folder\\n    name_contains: Substring to search for in workflow names\\n    public: Filter workflows by their public status\\n    starred: Filter workflows by their starred status\\n    status: Filter workflows by their status\\n    workflow_type: Filter workflows by their type\\n    page: The page number to retrieve (default: 0)\\n    size: The number of items per page (default: 10)\\n    \\nReturns:\\n    List of workflow dictionaries that match the search criteria\\n    \\nRaises:\\n    HTTPError: If the request to the API fails\\n","inputSchema":{"properties":{"parent_uuid":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"title":"Parent Uuid"},"name_contains":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"title":"Name Contains"},"public":{"anyOf":[{"type":"boolean"},{"type":"null"}],"default":null,"title":"Public"},"starred":{"anyOf":[{"type":"boolean"},{"type":"null"}],"default":null,"title":"Starred"},"status":{"anyOf":[{"type":"integer"},{"type":"null"}],"default":null,"title":"Status"},"workflow_type":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"title":"Workflow Type"},"page":{"default":0,"title":"Page","type":"integer"},"size":{"default":10,"title":"Size","type":"integer"}},"type":"object"}},{"name":"workflow_update","description":"Update workflow details.\\n\\nArgs:\\n    workflow_uuid: The UUID of the workflow to update\\n    name: New name for the workflow (optional)\\n    notes: New notes for the workflow (optional)\\n    starred: Whether to star/unstar the workflow (optional)\\n    public: Whether to make the workflow public/private (optional)\\n    \\nReturns:\\n    Dictionary with updated workflow information\\n","inputSchema":{"properties":{"workflow_uuid":{"title":"Workflow Uuid","type":"string"},"name":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"title":"Name"},"notes":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"title":"Notes"},"starred":{"anyOf":[{"type":"boolean"},{"type":"null"}],"default":null,"title":"Starred"},"public":{"anyOf":[{"type":"boolean"},{"type":"null"}],"default":null,"title":"Public"}},"required":["workflow_uuid"],"type":"object"}},{"name":"workflow_is_finished","description":"Check if a workflow is finished.\\n\\nArgs:\\n    workflow_uuid: The UUID of the workflow to check\\n    \\nReturns:\\n    Dictionary with workflow completion status\\n","inputSchema":{"properties":{"workflow_uuid":{"title":"Workflow Uuid","type":"string"}},"required":["workflow_uuid"],"type":"object"}},{"name":"workflow_delete_data","description":"Delete workflow data while keeping the workflow record.\\n\\nArgs:\\n    workflow_uuid: The UUID of the workflow\\n    \\nReturns:\\n    Dictionary with confirmation message\\n","inputSchema":{"properties":{"workflow_uuid":{"title":"Workflow Uuid","type":"string"}},"required":["workflow_uuid"],"type":"object"}}]}}\r\n\r\n'
2025-08-02 14:06:02,159 - mcp.server.sse - DEBUG - Handling POST message
2025-08-02 14:06:02,159 - mcp.server.sse - DEBUG - Parsed session ID: 8885b603-9234-4432-8b71-971721bc7eb2
2025-08-02 14:06:02,159 - mcp.server.sse - DEBUG - Received JSON: b'{"method":"prompts/list","jsonrpc":"2.0","id":3}'
2025-08-02 14:06:02,159 - mcp.server.sse - DEBUG - Validated client message: root=JSONRPCRequest(method='prompts/list', params=None, jsonrpc='2.0', id=3)
2025-08-02 14:06:02,159 - mcp.server.sse - DEBUG - Sending session message to writer: SessionMessage(message=JSONRPCMessage(root=JSONRPCRequest(method='prompts/list', params=None, jsonrpc='2.0', id=3)), metadata=ServerMessageMetadata(related_request_id=None, request_context=<starlette.requests.Request object at 0x10ab2a720>))
2025-08-02 14:06:02,159 - mcp.server.lowlevel.server - DEBUG - Received message: <mcp.shared.session.RequestResponder object at 0x10ab3bd90>
2025-08-02 14:06:02,159 - mcp.server.lowlevel.server - INFO - Processing request of type ListPromptsRequest
2025-08-02 14:06:02,160 - mcp.server.lowlevel.server - DEBUG - Dispatching request of type ListPromptsRequest
2025-08-02 14:06:02,160 - mcp.server.lowlevel.server - DEBUG - Response sent
2025-08-02 14:06:02,161 - mcp.server.sse - DEBUG - Sending message via SSE: SessionMessage(message=JSONRPCMessage(root=JSONRPCResponse(jsonrpc='2.0', id=3, result={'prompts': []})), metadata=None)
2025-08-02 14:06:02,161 - sse_starlette.sse - DEBUG - chunk: b'event: message\r\ndata: {"jsonrpc":"2.0","id":3,"result":{"prompts":[]}}\r\n\r\n'
2025-08-02 14:06:14,445 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 21:06:14.445509+00:00\r\n\r\n'
2025-08-02 14:06:14,449 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 21:06:14.449507+00:00\r\n\r\n'
2025-08-02 14:06:17,138 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 21:06:17.138698+00:00\r\n\r\n'
2025-08-02 14:06:28,520 - mcp.server.sse - DEBUG - Handling POST message
2025-08-02 14:06:28,521 - mcp.server.sse - DEBUG - Parsed session ID: 8885b603-9234-4432-8b71-971721bc7eb2
2025-08-02 14:06:28,521 - mcp.server.sse - DEBUG - Received JSON: b'{"method":"tools/call","params":{"name":"submit_basic_calculation_workflow","arguments":{"initial_molecule":"{\\n  \\"cell\\": null,\\n  \\"atoms\\": [\\n    {\\n      \\"position\\": [-1.57731622, 0.46259034, 0.02288227],\\n      \\"atomic_number\\": 6\\n    },\\n    {\\n      \\"position\\": [-0.55246934, -0.31349805, -0.78986664],\\n      \\"atomic_number\\": 6\\n    },\\n    {\\n      \\"position\\": [0.65178196, -0.77563238, 0.03104792],\\n      \\"atomic_number\\": 6\\n    },\\n    {\\n      \\"position\\": [1.5013315, 0.37070813, 0.55769072],\\n      \\"atomic_number\\": 6\\n    },\\n    {\\n      \\"position\\": [-1.17009891, 1.41344062, 0.37886292],\\n      \\"atomic_number\\": 1\\n    },\\n    {\\n      \\"position\\": [-1.91277475, -0.11690438, 0.88874548],\\n      \\"atomic_number\\": 1\\n    },\\n    {\\n      \\"position\\": [-2.45332233, 0.68757176, -0.59399069],\\n      \\"atomic_number\\": 1\\n    },\\n    {\\n      \\"position\\": [-0.21575239, 0.30052639, -1.63326648],\\n      \\"atomic_number\\": 1\\n    },\\n    {\\n      \\"position\\": [-1.04230601, -1.19688302, -1.21658189],\\n      \\"atomic_number\\": 1\\n    },\\n    {\\n      \\"position\\": [0.31558706, -1.39539838, 0.87044712],\\n      \\"atomic_number\\": 1\\n    },\\n    {\\n      \\"position\\": [1.28031633, -1.41330121, -0.60197473],\\n      \\"atomic_number\\": 1\\n    },\\n    {\\n      \\"position\\": [2.39258685, -0.02154188, 1.05803044],\\n      \\"atomic_number\\": 1\\n    },\\n    {\\n      \\"position\\": [0.95227634, 0.97534316, 1.28543953],\\n      \\"atomic_number\\": 1\\n    },\\n    {\\n      \\"position\\": [1.83015992, 1.0229789, -0.25746596],\\n      \\"atomic_number\\": 1\\n    }\\n  ],\\n  \\"charge\\": 0,\\n  \\"dipole\\": null,\\n  \\"energy\\": null,\\n  \\"smiles\\": \\"CCCC\\",\\n  \\"stress\\": null,\\n  \\"elapsed\\": null,\\n  \\"gradient\\": null,\\n  \\"velocities\\": null,\\n  \\"multiplicity\\": 1,\\n  \\"homo_lumo_gap\\": null,\\n  \\"scf_completed\\": null,\\n  \\"scf_iterations\\": null,\\n  \\"mulliken_charges\\": null,\\n  \\"calculation_index\\": null,\\n  \\"vibrational_modes\\": null,\\n  \\"zero_point_energy\\": null,\\n  \\"thermal_energy_corr\\": null,\\n  \\"thermal_enthalpy_corr\\": null,\\n  \\"mulliken_spin_densities\\": null,\\n  \\"thermal_free_energy_corr\\": null\\n}","engine":"xtb","method":"gfn2_xtb","mode":"rapid","tasks":"optimize","name":"Butane Optimization Workflow"},"_meta":{"progressToken":4}},"jsonrpc":"2.0","id":4}'
2025-08-02 14:06:28,521 - mcp.server.sse - DEBUG - Validated client message: root=JSONRPCRequest(method='tools/call', params={'name': 'submit_basic_calculation_workflow', 'arguments': {'initial_molecule': '{\n  "cell": null,\n  "atoms": [\n    {\n      "position": [-1.57731622, 0.46259034, 0.02288227],\n      "atomic_number": 6\n    },\n    {\n      "position": [-0.55246934, -0.31349805, -0.78986664],\n      "atomic_number": 6\n    },\n    {\n      "position": [0.65178196, -0.77563238, 0.03104792],\n      "atomic_number": 6\n    },\n    {\n      "position": [1.5013315, 0.37070813, 0.55769072],\n      "atomic_number": 6\n    },\n    {\n      "position": [-1.17009891, 1.41344062, 0.37886292],\n      "atomic_number": 1\n    },\n    {\n      "position": [-1.91277475, -0.11690438, 0.88874548],\n      "atomic_number": 1\n    },\n    {\n      "position": [-2.45332233, 0.68757176, -0.59399069],\n      "atomic_number": 1\n    },\n    {\n      "position": [-0.21575239, 0.30052639, -1.63326648],\n      "atomic_number": 1\n    },\n    {\n      "position": [-1.04230601, -1.19688302, -1.21658189],\n      "atomic_number": 1\n    },\n    {\n      "position": [0.31558706, -1.39539838, 0.87044712],\n      "atomic_number": 1\n    },\n    {\n      "position": [1.28031633, -1.41330121, -0.60197473],\n      "atomic_number": 1\n    },\n    {\n      "position": [2.39258685, -0.02154188, 1.05803044],\n      "atomic_number": 1\n    },\n    {\n      "position": [0.95227634, 0.97534316, 1.28543953],\n      "atomic_number": 1\n    },\n    {\n      "position": [1.83015992, 1.0229789, -0.25746596],\n      "atomic_number": 1\n    }\n  ],\n  "charge": 0,\n  "dipole": null,\n  "energy": null,\n  "smiles": "CCCC",\n  "stress": null,\n  "elapsed": null,\n  "gradient": null,\n  "velocities": null,\n  "multiplicity": 1,\n  "homo_lumo_gap": null,\n  "scf_completed": null,\n  "scf_iterations": null,\n  "mulliken_charges": null,\n  "calculation_index": null,\n  "vibrational_modes": null,\n  "zero_point_energy": null,\n  "thermal_energy_corr": null,\n  "thermal_enthalpy_corr": null,\n  "mulliken_spin_densities": null,\n  "thermal_free_energy_corr": null\n}', 'engine': 'xtb', 'method': 'gfn2_xtb', 'mode': 'rapid', 'tasks': 'optimize', 'name': 'Butane Optimization Workflow'}, '_meta': {'progressToken': 4}}, jsonrpc='2.0', id=4)
2025-08-02 14:06:28,521 - mcp.server.sse - DEBUG - Sending session message to writer: SessionMessage(message=JSONRPCMessage(root=JSONRPCRequest(method='tools/call', params={'name': 'submit_basic_calculation_workflow', 'arguments': {'initial_molecule': '{\n  "cell": null,\n  "atoms": [\n    {\n      "position": [-1.57731622, 0.46259034, 0.02288227],\n      "atomic_number": 6\n    },\n    {\n      "position": [-0.55246934, -0.31349805, -0.78986664],\n      "atomic_number": 6\n    },\n    {\n      "position": [0.65178196, -0.77563238, 0.03104792],\n      "atomic_number": 6\n    },\n    {\n      "position": [1.5013315, 0.37070813, 0.55769072],\n      "atomic_number": 6\n    },\n    {\n      "position": [-1.17009891, 1.41344062, 0.37886292],\n      "atomic_number": 1\n    },\n    {\n      "position": [-1.91277475, -0.11690438, 0.88874548],\n      "atomic_number": 1\n    },\n    {\n      "position": [-2.45332233, 0.68757176, -0.59399069],\n      "atomic_number": 1\n    },\n    {\n      "position": [-0.21575239, 0.30052639, -1.63326648],\n      "atomic_number": 1\n    },\n    {\n      "position": [-1.04230601, -1.19688302, -1.21658189],\n      "atomic_number": 1\n    },\n    {\n      "position": [0.31558706, -1.39539838, 0.87044712],\n      "atomic_number": 1\n    },\n    {\n      "position": [1.28031633, -1.41330121, -0.60197473],\n      "atomic_number": 1\n    },\n    {\n      "position": [2.39258685, -0.02154188, 1.05803044],\n      "atomic_number": 1\n    },\n    {\n      "position": [0.95227634, 0.97534316, 1.28543953],\n      "atomic_number": 1\n    },\n    {\n      "position": [1.83015992, 1.0229789, -0.25746596],\n      "atomic_number": 1\n    }\n  ],\n  "charge": 0,\n  "dipole": null,\n  "energy": null,\n  "smiles": "CCCC",\n  "stress": null,\n  "elapsed": null,\n  "gradient": null,\n  "velocities": null,\n  "multiplicity": 1,\n  "homo_lumo_gap": null,\n  "scf_completed": null,\n  "scf_iterations": null,\n  "mulliken_charges": null,\n  "calculation_index": null,\n  "vibrational_modes": null,\n  "zero_point_energy": null,\n  "thermal_energy_corr": null,\n  "thermal_enthalpy_corr": null,\n  "mulliken_spin_densities": null,\n  "thermal_free_energy_corr": null\n}', 'engine': 'xtb', 'method': 'gfn2_xtb', 'mode': 'rapid', 'tasks': 'optimize', 'name': 'Butane Optimization Workflow'}, '_meta': {'progressToken': 4}}, jsonrpc='2.0', id=4)), metadata=ServerMessageMetadata(related_request_id=None, request_context=<starlette.requests.Request object at 0x10ab2a8d0>))
2025-08-02 14:06:28,522 - mcp.server.lowlevel.server - DEBUG - Received message: <mcp.shared.session.RequestResponder object at 0x10ab99480>
2025-08-02 14:06:28,522 - mcp.server.lowlevel.server - INFO - Processing request of type CallToolRequest
2025-08-02 14:06:28,522 - mcp.server.lowlevel.server - DEBUG - Dispatching request of type CallToolRequest
2025-08-02 14:06:28,522 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - INFO - Parsed string tasks '['optimize']' to list: ['optimize']
2025-08-02 14:06:28,523 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - INFO - ============================================================
2025-08-02 14:06:28,523 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - INFO - submit_basic_calculation_workflow called with:
2025-08-02 14:06:28,523 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - INFO -   method: gfn2_xtb (type: <class 'str'>)
2025-08-02 14:06:28,523 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - INFO -   tasks: ['optimize'] (type: <class 'list'>)
2025-08-02 14:06:28,523 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - INFO -   mode: rapid
2025-08-02 14:06:28,523 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - INFO -   engine: xtb
2025-08-02 14:06:28,523 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - INFO -   name: Butane Optimization Workflow
2025-08-02 14:06:28,523 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - INFO -   initial_molecule: '{
  "cell": null,
  "atoms": [
    {
      "position": [-1.57731622, 0.46259034, 0.02288227],
      "atomic_number": 6
    },
    {
      "position": [-0.55246934, -0.31349805, -0.78986664],
      "atomic_number": 6
    },
    {
      "position": [0.65178196, -0.77563238, 0.03104792],
      "atomic_number": 6
    },
    {
      "position": [1.5013315, 0.37070813, 0.55769072],
      "atomic_number": 6
    },
    {
      "position": [-1.17009891, 1.41344062, 0.37886292],
      "atomic_number": 1
    },
    {
      "position": [-1.91277475, -0.11690438, 0.88874548],
      "atomic_number": 1
    },
    {
      "position": [-2.45332233, 0.68757176, -0.59399069],
      "atomic_number": 1
    },
    {
      "position": [-0.21575239, 0.30052639, -1.63326648],
      "atomic_number": 1
    },
    {
      "position": [-1.04230601, -1.19688302, -1.21658189],
      "atomic_number": 1
    },
    {
      "position": [0.31558706, -1.39539838, 0.87044712],
      "atomic_number": 1
    },
    {
      "position": [1.28031633, -1.41330121, -0.60197473],
      "atomic_number": 1
    },
    {
      "position": [2.39258685, -0.02154188, 1.05803044],
      "atomic_number": 1
    },
    {
      "position": [0.95227634, 0.97534316, 1.28543953],
      "atomic_number": 1
    },
    {
      "position": [1.83015992, 1.0229789, -0.25746596],
      "atomic_number": 1
    }
  ],
  "charge": 0,
  "dipole": null,
  "energy": null,
  "smiles": "CCCC",
  "stress": null,
  "elapsed": null,
  "gradient": null,
  "velocities": null,
  "multiplicity": 1,
  "homo_lumo_gap": null,
  "scf_completed": null,
  "scf_iterations": null,
  "mulliken_charges": null,
  "calculation_index": null,
  "vibrational_modes": null,
  "zero_point_energy": null,
  "thermal_energy_corr": null,
  "thermal_enthalpy_corr": null,
  "mulliken_spin_densities": null,
  "thermal_free_energy_corr": null
}' (SMILES string)
2025-08-02 14:06:28,523 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - DEBUG - Converting SMILES string to StJamesMolecule
2025-08-02 14:06:28,523 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - DEBUG - Could not convert to StJamesMolecule: , passing string directly
2025-08-02 14:06:28,523 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - INFO - Calling rowan.submit_basic_calculation_workflow...
2025-08-02 14:06:28,548 - httpcore.connection - DEBUG - connect_tcp.started host='api.rowansci.com' port=443 local_address=None timeout=5.0 socket_options=None
2025-08-02 14:06:28,650 - httpcore.connection - DEBUG - connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x10ac612b0>
2025-08-02 14:06:28,650 - httpcore.connection - DEBUG - start_tls.started ssl_context=<ssl.SSLContext object at 0x10ac219a0> server_hostname='api.rowansci.com' timeout=5.0
2025-08-02 14:06:28,765 - httpcore.connection - DEBUG - start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x10ac24a50>
2025-08-02 14:06:28,765 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-08-02 14:06:28,765 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-08-02 14:06:28,765 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-08-02 14:06:28,765 - httpcore.http11 - DEBUG - send_request_body.complete
2025-08-02 14:06:28,765 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-08-02 14:06:29,134 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 500, b'Internal Server Error', [(b'Date', b'Sat, 02 Aug 2025 21:06:29 GMT'), (b'Content-Type', b'application/json'), (b'Content-Length', b'57'), (b'Connection', b'keep-alive'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains')])
2025-08-02 14:06:29,138 - httpx - INFO - HTTP Request: POST https://api.rowansci.com/workflow "HTTP/1.1 500 Internal Server Error"
2025-08-02 14:06:29,139 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-08-02 14:06:29,139 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-08-02 14:06:29,139 - httpcore.http11 - DEBUG - response_closed.started
2025-08-02 14:06:29,139 - httpcore.http11 - DEBUG - response_closed.complete
2025-08-02 14:06:29,140 - httpcore.connection - DEBUG - close.started
2025-08-02 14:06:29,140 - httpcore.connection - DEBUG - close.complete
2025-08-02 14:06:29,140 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - ERROR - ERROR in submit_basic_calculation_workflow: Server error '500 Internal Server Error' for url 'https://api.rowansci.com/workflow'
For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/500
2025-08-02 14:06:29,140 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - ERROR - Error type: HTTPStatusError
2025-08-02 14:06:29,145 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - ERROR - Traceback:
Traceback (most recent call last):
  File "/Users/katherineyenko/Desktop/sandbox/rowan-mcp/rowan_mcp/functions_v2/submit_basic_calculation_workflow.py", line 157, in submit_basic_calculation_workflow
    result = rowan.submit_basic_calculation_workflow(
        initial_molecule=initial_molecule,
    ...<6 lines>...
        max_credits=max_credits
    )
  File "/Users/katherineyenko/Desktop/sandbox/rowan-mcp/.venv/lib/python3.13/site-packages/rowan/workflow.py", line 410, in submit_basic_calculation_workflow
    response.raise_for_status()
    ~~~~~~~~~~~~~~~~~~~~~~~~~^^
  File "/Users/katherineyenko/Desktop/sandbox/rowan-mcp/.venv/lib/python3.13/site-packages/httpx/_models.py", line 829, in raise_for_status
    raise HTTPStatusError(message, request=request, response=self)
httpx.HTTPStatusError: Server error '500 Internal Server Error' for url 'https://api.rowansci.com/workflow'
For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/500

2025-08-02 14:06:29,146 - FastMCP.fastmcp.tools.tool_manager - ERROR - Error calling tool 'submit_basic_calculation_workflow': Server error '500 Internal Server Error' for url 'https://api.rowansci.com/workflow'
For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/500
Traceback (most recent call last):
  File "/Users/katherineyenko/Desktop/sandbox/rowan-mcp/.venv/lib/python3.13/site-packages/fastmcp/tools/tool_manager.py", line 131, in call_tool
    return await tool.run(arguments)
           ^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/katherineyenko/Desktop/sandbox/rowan-mcp/.venv/lib/python3.13/site-packages/fastmcp/tools/tool.py", line 187, in run
    result = type_adapter.validate_python(arguments)
  File "/Users/katherineyenko/Desktop/sandbox/rowan-mcp/.venv/lib/python3.13/site-packages/pydantic/type_adapter.py", line 421, in validate_python
    return self.validator.validate_python(
           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^
        object,
        ^^^^^^^
    ...<5 lines>...
        by_name=by_name,
        ^^^^^^^^^^^^^^^^
    )
    ^
  File "/Users/katherineyenko/Desktop/sandbox/rowan-mcp/rowan_mcp/functions_v2/submit_basic_calculation_workflow.py", line 157, in submit_basic_calculation_workflow
    result = rowan.submit_basic_calculation_workflow(
        initial_molecule=initial_molecule,
    ...<6 lines>...
        max_credits=max_credits
    )
  File "/Users/katherineyenko/Desktop/sandbox/rowan-mcp/.venv/lib/python3.13/site-packages/rowan/workflow.py", line 410, in submit_basic_calculation_workflow
    response.raise_for_status()
    ~~~~~~~~~~~~~~~~~~~~~~~~~^^
  File "/Users/katherineyenko/Desktop/sandbox/rowan-mcp/.venv/lib/python3.13/site-packages/httpx/_models.py", line 829, in raise_for_status
    raise HTTPStatusError(message, request=request, response=self)
httpx.HTTPStatusError: Server error '500 Internal Server Error' for url 'https://api.rowansci.com/workflow'
For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/500
2025-08-02 14:06:29,263 - mcp.server.lowlevel.server - DEBUG - Response sent
2025-08-02 14:06:29,264 - mcp.server.sse - DEBUG - Sending message via SSE: SessionMessage(message=JSONRPCMessage(root=JSONRPCResponse(jsonrpc='2.0', id=4, result={'content': [{'type': 'text', 'text': "Error calling tool 'submit_basic_calculation_workflow': Server error '500 Internal Server Error' for url 'https://api.rowansci.com/workflow'\nFor more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/500"}], 'isError': True})), metadata=None)
2025-08-02 14:06:29,264 - sse_starlette.sse - DEBUG - chunk: b'event: message\r\ndata: {"jsonrpc":"2.0","id":4,"result":{"content":[{"type":"text","text":"Error calling tool \'submit_basic_calculation_workflow\': Server error \'500 Internal Server Error\' for url \'https://api.rowansci.com/workflow\'\\nFor more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/500"}],"isError":true}}\r\n\r\n'
2025-08-02 14:06:29,448 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 21:06:29.448572+00:00\r\n\r\n'
2025-08-02 14:06:29,449 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 21:06:29.449615+00:00\r\n\r\n'
2025-08-02 14:06:32,140 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 21:06:32.140679+00:00\r\n\r\n'
2025-08-02 14:06:35,563 - mcp.server.sse - DEBUG - Handling POST message
2025-08-02 14:06:35,564 - mcp.server.sse - DEBUG - Parsed session ID: 8885b603-9234-4432-8b71-971721bc7eb2
2025-08-02 14:06:35,564 - mcp.server.sse - DEBUG - Received JSON: b'{"method":"tools/call","params":{"name":"submit_basic_calculation_workflow","arguments":{"initial_molecule":"CCCC","engine":"xtb","method":"gfn2_xtb","mode":"rapid","tasks":"optimize","name":"Butane Optimization Workflow"},"_meta":{"progressToken":5}},"jsonrpc":"2.0","id":5}'
2025-08-02 14:06:35,564 - mcp.server.sse - DEBUG - Validated client message: root=JSONRPCRequest(method='tools/call', params={'name': 'submit_basic_calculation_workflow', 'arguments': {'initial_molecule': 'CCCC', 'engine': 'xtb', 'method': 'gfn2_xtb', 'mode': 'rapid', 'tasks': 'optimize', 'name': 'Butane Optimization Workflow'}, '_meta': {'progressToken': 5}}, jsonrpc='2.0', id=5)
2025-08-02 14:06:35,564 - mcp.server.sse - DEBUG - Sending session message to writer: SessionMessage(message=JSONRPCMessage(root=JSONRPCRequest(method='tools/call', params={'name': 'submit_basic_calculation_workflow', 'arguments': {'initial_molecule': 'CCCC', 'engine': 'xtb', 'method': 'gfn2_xtb', 'mode': 'rapid', 'tasks': 'optimize', 'name': 'Butane Optimization Workflow'}, '_meta': {'progressToken': 5}}, jsonrpc='2.0', id=5)), metadata=ServerMessageMetadata(related_request_id=None, request_context=<starlette.requests.Request object at 0x10ac9d400>))
2025-08-02 14:06:35,565 - mcp.server.lowlevel.server - DEBUG - Received message: <mcp.shared.session.RequestResponder object at 0x10ab9b100>
2025-08-02 14:06:35,566 - mcp.server.lowlevel.server - INFO - Processing request of type CallToolRequest
2025-08-02 14:06:35,566 - mcp.server.lowlevel.server - DEBUG - Dispatching request of type CallToolRequest
2025-08-02 14:06:35,567 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - INFO - Parsed string tasks '['optimize']' to list: ['optimize']
2025-08-02 14:06:35,567 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - INFO - ============================================================
2025-08-02 14:06:35,567 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - INFO - submit_basic_calculation_workflow called with:
2025-08-02 14:06:35,567 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - INFO -   method: gfn2_xtb (type: <class 'str'>)
2025-08-02 14:06:35,567 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - INFO -   tasks: ['optimize'] (type: <class 'list'>)
2025-08-02 14:06:35,567 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - INFO -   mode: rapid
2025-08-02 14:06:35,567 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - INFO -   engine: xtb
2025-08-02 14:06:35,567 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - INFO -   name: Butane Optimization Workflow
2025-08-02 14:06:35,568 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - INFO -   initial_molecule: 'CCCC' (SMILES string)
2025-08-02 14:06:35,568 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - DEBUG - Converting SMILES string to StJamesMolecule
2025-08-02 14:06:35,601 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - DEBUG - Successfully converted to StJamesMolecule
2025-08-02 14:06:35,601 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - INFO - Calling rowan.submit_basic_calculation_workflow...
2025-08-02 14:06:35,609 - httpcore.connection - DEBUG - connect_tcp.started host='api.rowansci.com' port=443 local_address=None timeout=5.0 socket_options=None
2025-08-02 14:06:35,710 - httpcore.connection - DEBUG - connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x10ac26fd0>
2025-08-02 14:06:35,710 - httpcore.connection - DEBUG - start_tls.started ssl_context=<ssl.SSLContext object at 0x10ab2ad50> server_hostname='api.rowansci.com' timeout=5.0
2025-08-02 14:06:35,829 - httpcore.connection - DEBUG - start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x10ab9aea0>
2025-08-02 14:06:35,830 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-08-02 14:06:35,830 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-08-02 14:06:35,830 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-08-02 14:06:35,831 - httpcore.http11 - DEBUG - send_request_body.complete
2025-08-02 14:06:35,831 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-08-02 14:06:36,405 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sat, 02 Aug 2025 21:06:36 GMT'), (b'Content-Type', b'application/json'), (b'Content-Length', b'2081'), (b'Connection', b'keep-alive'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains')])
2025-08-02 14:06:36,406 - httpx - INFO - HTTP Request: POST https://api.rowansci.com/workflow "HTTP/1.1 200 OK"
2025-08-02 14:06:36,407 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-08-02 14:06:36,407 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-08-02 14:06:36,408 - httpcore.http11 - DEBUG - response_closed.started
2025-08-02 14:06:36,408 - httpcore.http11 - DEBUG - response_closed.complete
2025-08-02 14:06:36,408 - httpcore.connection - DEBUG - close.started
2025-08-02 14:06:36,409 - httpcore.connection - DEBUG - close.complete
2025-08-02 14:06:36,409 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - INFO - SUCCESS: Workflow submitted with UUID: 002e0eb2-60a6-440b-9f2b-c7e8859d6d82
2025-08-02 14:06:36,410 - mcp.server.lowlevel.server - DEBUG - Response sent
2025-08-02 14:06:36,410 - mcp.server.sse - DEBUG - Sending message via SSE: SessionMessage(message=JSONRPCMessage(root=JSONRPCResponse(jsonrpc='2.0', id=5, result={'content': [{'type': 'text', 'text': '{\n  "name": "Butane Optimization Workflow",\n  "uuid": "002e0eb2-60a6-440b-9f2b-c7e8859d6d82",\n  "created_at": "2025-08-02T21:06:35.999439Z",\n  "updated_at": null,\n  "started_at": null,\n  "completed_at": null,\n  "object_status": 0,\n  "parent_uuid": "e5c3ce65-43df-4ab3-90e0-a56f42584cc0",\n  "notes": "",\n  "starred": false,\n  "public": false,\n  "object_type": "basic_calculation",\n  "object_data": {\n    "settings": {\n      "method": "GFN2_XTB",\n      "tasks": [\n        "optimize"\n      ],\n      "mode": "rapid"\n    },\n    "engine": "xtb",\n    "initial_molecule": {\n      "charge": 0,\n      "multiplicity": 1,\n      "atoms": [\n        {\n          "atomic_number": 6,\n          "position": [\n            -1.57731622,\n            0.46259034,\n            0.02288227\n          ]\n        },\n        {\n          "atomic_number": 6,\n          "position": [\n            -0.55246934,\n            -0.31349805,\n            -0.78986664\n          ]\n        },\n        {\n          "atomic_number": 6,\n          "position": [\n            0.65178196,\n            -0.77563238,\n            0.03104792\n          ]\n        },\n        {\n          "atomic_number": 6,\n          "position": [\n            1.5013315,\n            0.37070813,\n            0.55769072\n          ]\n        },\n        {\n          "atomic_number": 1,\n          "position": [\n            -1.17009891,\n            1.41344062,\n            0.37886292\n          ]\n        },\n        {\n          "atomic_number": 1,\n          "position": [\n            -1.91277475,\n            -0.11690438,\n            0.88874548\n          ]\n        },\n        {\n          "atomic_number": 1,\n          "position": [\n            -2.45332233,\n            0.68757176,\n            -0.59399069\n          ]\n        },\n        {\n          "atomic_number": 1,\n          "position": [\n            -0.21575239,\n            0.30052639,\n            -1.63326648\n          ]\n        },\n        {\n          "atomic_number": 1,\n          "position": [\n            -1.04230601,\n            -1.19688302,\n            -1.21658189\n          ]\n        },\n        {\n          "atomic_number": 1,\n          "position": [\n            0.31558706,\n            -1.39539838,\n            0.87044712\n          ]\n        },\n        {\n          "atomic_number": 1,\n          "position": [\n            1.28031633,\n            -1.41330121,\n            -0.60197473\n          ]\n        },\n        {\n          "atomic_number": 1,\n          "position": [\n            2.39258685,\n            -0.02154188,\n            1.05803044\n          ]\n        },\n        {\n          "atomic_number": 1,\n          "position": [\n            0.95227634,\n            0.97534316,\n            1.28543953\n          ]\n        },\n        {\n          "atomic_number": 1,\n          "position": [\n            1.83015992,\n            1.0229789,\n            -0.25746596\n          ]\n        }\n      ],\n      "cell": null,\n      "energy": null,\n      "scf_iterations": null,\n      "scf_completed": null,\n      "elapsed": null,\n      "homo_lumo_gap": null,\n      "gradient": null,\n      "stress": null,\n      "velocities": null,\n      "mulliken_charges": null,\n      "mulliken_spin_densities": null,\n      "dipole": null,\n      "vibrational_modes": null,\n      "zero_point_energy": null,\n      "thermal_energy_corr": null,\n      "thermal_enthalpy_corr": null,\n      "thermal_free_energy_corr": null,\n      "smiles": "CCCC",\n      "calculation_index": null\n    }\n  },\n  "email_when_complete": false,\n  "max_credits": null,\n  "elapsed": 0.0,\n  "credits_charged": 0.0\n}'}], 'isError': False})), metadata=None)
2025-08-02 14:06:36,411 - sse_starlette.sse - DEBUG - chunk: b'event: message\r\ndata: {"jsonrpc":"2.0","id":5,"result":{"content":[{"type":"text","text":"{\\n  \\"name\\": \\"Butane Optimization Workflow\\",\\n  \\"uuid\\": \\"002e0eb2-60a6-440b-9f2b-c7e8859d6d82\\",\\n  \\"created_at\\": \\"2025-08-02T21:06:35.999439Z\\",\\n  \\"updated_at\\": null,\\n  \\"started_at\\": null,\\n  \\"completed_at\\": null,\\n  \\"object_status\\": 0,\\n  \\"parent_uuid\\": \\"e5c3ce65-43df-4ab3-90e0-a56f42584cc0\\",\\n  \\"notes\\": \\"\\",\\n  \\"starred\\": false,\\n  \\"public\\": false,\\n  \\"object_type\\": \\"basic_calculation\\",\\n  \\"object_data\\": {\\n    \\"settings\\": {\\n      \\"method\\": \\"GFN2_XTB\\",\\n      \\"tasks\\": [\\n        \\"optimize\\"\\n      ],\\n      \\"mode\\": \\"rapid\\"\\n    },\\n    \\"engine\\": \\"xtb\\",\\n    \\"initial_molecule\\": {\\n      \\"charge\\": 0,\\n      \\"multiplicity\\": 1,\\n      \\"atoms\\": [\\n        {\\n          \\"atomic_number\\": 6,\\n          \\"position\\": [\\n            -1.57731622,\\n            0.46259034,\\n            0.02288227\\n          ]\\n        },\\n        {\\n          \\"atomic_number\\": 6,\\n          \\"position\\": [\\n            -0.55246934,\\n            -0.31349805,\\n            -0.78986664\\n          ]\\n        },\\n        {\\n          \\"atomic_number\\": 6,\\n          \\"position\\": [\\n            0.65178196,\\n            -0.77563238,\\n            0.03104792\\n          ]\\n        },\\n        {\\n          \\"atomic_number\\": 6,\\n          \\"position\\": [\\n            1.5013315,\\n            0.37070813,\\n            0.55769072\\n          ]\\n        },\\n        {\\n          \\"atomic_number\\": 1,\\n          \\"position\\": [\\n            -1.17009891,\\n            1.41344062,\\n            0.37886292\\n          ]\\n        },\\n        {\\n          \\"atomic_number\\": 1,\\n          \\"position\\": [\\n            -1.91277475,\\n            -0.11690438,\\n            0.88874548\\n          ]\\n        },\\n        {\\n          \\"atomic_number\\": 1,\\n          \\"position\\": [\\n            -2.45332233,\\n            0.68757176,\\n            -0.59399069\\n          ]\\n        },\\n        {\\n          \\"atomic_number\\": 1,\\n          \\"position\\": [\\n            -0.21575239,\\n            0.30052639,\\n            -1.63326648\\n          ]\\n        },\\n        {\\n          \\"atomic_number\\": 1,\\n          \\"position\\": [\\n            -1.04230601,\\n            -1.19688302,\\n            -1.21658189\\n          ]\\n        },\\n        {\\n          \\"atomic_number\\": 1,\\n          \\"position\\": [\\n            0.31558706,\\n            -1.39539838,\\n            0.87044712\\n          ]\\n        },\\n        {\\n          \\"atomic_number\\": 1,\\n          \\"position\\": [\\n            1.28031633,\\n            -1.41330121,\\n            -0.60197473\\n          ]\\n        },\\n        {\\n          \\"atomic_number\\": 1,\\n          \\"position\\": [\\n            2.39258685,\\n            -0.02154188,\\n            1.05803044\\n          ]\\n        },\\n        {\\n          \\"atomic_number\\": 1,\\n          \\"position\\": [\\n            0.95227634,\\n            0.97534316,\\n            1.28543953\\n          ]\\n        },\\n        {\\n          \\"atomic_number\\": 1,\\n          \\"position\\": [\\n            1.83015992,\\n            1.0229789,\\n            -0.25746596\\n          ]\\n        }\\n      ],\\n      \\"cell\\": null,\\n      \\"energy\\": null,\\n      \\"scf_iterations\\": null,\\n      \\"scf_completed\\": null,\\n      \\"elapsed\\": null,\\n      \\"homo_lumo_gap\\": null,\\n      \\"gradient\\": null,\\n      \\"stress\\": null,\\n      \\"velocities\\": null,\\n      \\"mulliken_charges\\": null,\\n      \\"mulliken_spin_densities\\": null,\\n      \\"dipole\\": null,\\n      \\"vibrational_modes\\": null,\\n      \\"zero_point_energy\\": null,\\n      \\"thermal_energy_corr\\": null,\\n      \\"thermal_enthalpy_corr\\": null,\\n      \\"thermal_free_energy_corr\\": null,\\n      \\"smiles\\": \\"CCCC\\",\\n      \\"calculation_index\\": null\\n    }\\n  },\\n  \\"email_when_complete\\": false,\\n  \\"max_credits\\": null,\\n  \\"elapsed\\": 0.0,\\n  \\"credits_charged\\": 0.0\\n}"}],"isError":false}}\r\n\r\n'
2025-08-02 14:06:44,449 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 21:06:44.449269+00:00\r\n\r\n'
2025-08-02 14:06:44,451 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 21:06:44.451520+00:00\r\n\r\n'
2025-08-02 14:06:47,141 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 21:06:47.141348+00:00\r\n\r\n'
2025-08-02 14:06:59,452 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 21:06:59.452506+00:00\r\n\r\n'
2025-08-02 14:06:59,455 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 21:06:59.455907+00:00\r\n\r\n'
2025-08-02 14:07:02,144 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 21:07:02.143871+00:00\r\n\r\n'
2025-08-02 14:07:14,457 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 21:07:14.457828+00:00\r\n\r\n'
2025-08-02 14:07:14,458 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 21:07:14.458198+00:00\r\n\r\n'
2025-08-02 14:07:17,146 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 21:07:17.146009+00:00\r\n\r\n'
2025-08-02 14:07:29,459 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 21:07:29.459598+00:00\r\n\r\n'
2025-08-02 14:07:29,460 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 21:07:29.460694+00:00\r\n\r\n'
2025-08-02 14:07:32,147 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 21:07:32.147510+00:00\r\n\r\n'
2025-08-02 14:07:44,464 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 21:07:44.464113+00:00\r\n\r\n'
2025-08-02 14:07:44,466 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 21:07:44.466545+00:00\r\n\r\n'
2025-08-02 14:07:47,148 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 21:07:47.148708+00:00\r\n\r\n'
2025-08-02 14:07:59,468 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 21:07:59.468603+00:00\r\n\r\n'
2025-08-02 14:07:59,468 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 21:07:59.468977+00:00\r\n\r\n'
2025-08-02 14:08:02,150 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 21:08:02.150418+00:00\r\n\r\n'
2025-08-02 14:08:14,470 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 21:08:14.470266+00:00\r\n\r\n'
2025-08-02 14:08:14,471 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 21:08:14.471941+00:00\r\n\r\n'
2025-08-02 14:08:17,152 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 21:08:17.152618+00:00\r\n\r\n'
2025-08-02 14:08:29,473 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 21:08:29.473105+00:00\r\n\r\n'
2025-08-02 14:08:29,473 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 21:08:29.473267+00:00\r\n\r\n'
2025-08-02 14:08:32,155 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 21:08:32.155338+00:00\r\n\r\n'
2025-08-02 14:08:44,474 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 21:08:44.474459+00:00\r\n\r\n'
2025-08-02 14:08:44,475 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 21:08:44.475600+00:00\r\n\r\n'
2025-08-02 14:08:47,157 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 21:08:47.157511+00:00\r\n\r\n'
2025-08-02 14:08:59,477 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 21:08:59.477404+00:00\r\n\r\n'
2025-08-02 14:08:59,478 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 21:08:59.478001+00:00\r\n\r\n'
2025-08-02 14:09:02,160 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 21:09:02.160226+00:00\r\n\r\n'
2025-08-02 14:09:14,479 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 21:09:14.478749+00:00\r\n\r\n'
2025-08-02 14:09:14,482 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 21:09:14.482153+00:00\r\n\r\n'
2025-08-02 14:09:17,166 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 21:09:17.166000+00:00\r\n\r\n'
2025-08-02 14:09:29,484 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 21:09:29.483901+00:00\r\n\r\n'
2025-08-02 14:09:29,485 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 21:09:29.485052+00:00\r\n\r\n'
2025-08-02 14:09:32,169 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 21:09:32.168834+00:00\r\n\r\n'
2025-08-02 14:09:44,487 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 21:09:44.486916+00:00\r\n\r\n'
2025-08-02 14:09:44,490 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 21:09:44.490548+00:00\r\n\r\n'
2025-08-02 14:09:47,171 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 21:09:47.171361+00:00\r\n\r\n'
2025-08-02 14:09:59,491 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 21:09:59.491436+00:00\r\n\r\n'
2025-08-02 14:09:59,492 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 21:09:59.492552+00:00\r\n\r\n'
2025-08-02 14:10:02,172 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 21:10:02.172028+00:00\r\n\r\n'
2025-08-02 14:10:14,493 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 21:10:14.493479+00:00\r\n\r\n'
2025-08-02 14:10:14,495 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 21:10:14.494989+00:00\r\n\r\n'
2025-08-02 14:10:17,173 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 21:10:17.173513+00:00\r\n\r\n'
2025-08-02 14:10:29,495 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 21:10:29.495682+00:00\r\n\r\n'
2025-08-02 14:10:29,499 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 21:10:29.499536+00:00\r\n\r\n'
2025-08-02 14:10:32,175 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 21:10:32.175458+00:00\r\n\r\n'
2025-08-02 14:10:44,501 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 21:10:44.501328+00:00\r\n\r\n'
2025-08-02 14:10:44,505 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 21:10:44.505018+00:00\r\n\r\n'
2025-08-02 14:10:47,177 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 21:10:47.177572+00:00\r\n\r\n'
2025-08-02 14:11:02,368 - mcp.server.lowlevel.server - DEBUG - Initializing server 'Rowan MCP Server'
2025-08-02 14:11:02,369 - mcp.server.lowlevel.server - DEBUG - Registering handler for ListToolsRequest
2025-08-02 14:11:02,369 - mcp.server.lowlevel.server - DEBUG - Registering handler for ListResourcesRequest
2025-08-02 14:11:02,369 - mcp.server.lowlevel.server - DEBUG - Registering handler for ListResourceTemplatesRequest
2025-08-02 14:11:02,369 - mcp.server.lowlevel.server - DEBUG - Registering handler for PromptListRequest
2025-08-02 14:11:02,369 - mcp.server.lowlevel.server - DEBUG - Registering handler for CallToolRequest
2025-08-02 14:11:02,369 - mcp.server.lowlevel.server - DEBUG - Registering handler for ReadResourceRequest
2025-08-02 14:11:02,369 - mcp.server.lowlevel.server - DEBUG - Registering handler for GetPromptRequest
2025-08-02 14:11:02,385 - asyncio - DEBUG - Using selector: KqueueSelector
2025-08-02 14:11:02,385 - mcp.server.sse - DEBUG - SseServerTransport initialized with endpoint: /messages/
2025-08-02 14:11:02,386 - FastMCP.fastmcp.server.server - INFO - Starting MCP server 'Rowan MCP Server' with transport 'sse' on http://127.0.0.1:6276/sse
2025-08-02 14:11:03,365 - mcp.server.sse - DEBUG - Setting up SSE connection
2025-08-02 14:11:03,367 - mcp.server.sse - DEBUG - Created new session with ID: 63b1b003-2a42-4e10-9373-a42f8907b175
2025-08-02 14:11:03,367 - mcp.server.sse - DEBUG - Starting SSE response task
2025-08-02 14:11:03,367 - mcp.server.sse - DEBUG - Yielding read and write streams
2025-08-02 14:11:03,371 - mcp.server.sse - DEBUG - Starting SSE writer
2025-08-02 14:11:03,372 - mcp.server.sse - DEBUG - Sent endpoint event: /messages/?session_id=63b1b0032a424e109373a42f8907b175
2025-08-02 14:11:03,372 - sse_starlette.sse - DEBUG - chunk: b'event: endpoint\r\ndata: /messages/?session_id=63b1b0032a424e109373a42f8907b175\r\n\r\n'
2025-08-02 14:11:03,373 - mcp.server.sse - DEBUG - Setting up SSE connection
2025-08-02 14:11:03,374 - mcp.server.sse - DEBUG - Created new session with ID: f57c3b67-d2ae-43a6-b332-48d6de342bd6
2025-08-02 14:11:03,374 - mcp.server.sse - DEBUG - Starting SSE response task
2025-08-02 14:11:03,375 - mcp.server.sse - DEBUG - Yielding read and write streams
2025-08-02 14:11:03,377 - mcp.server.sse - DEBUG - Setting up SSE connection
2025-08-02 14:11:03,377 - mcp.server.sse - DEBUG - Created new session with ID: 973bbfa0-fea7-4937-99c1-e7435b1c7e13
2025-08-02 14:11:03,377 - mcp.server.sse - DEBUG - Starting SSE response task
2025-08-02 14:11:03,377 - mcp.server.sse - DEBUG - Yielding read and write streams
2025-08-02 14:11:03,380 - mcp.server.sse - DEBUG - Starting SSE writer
2025-08-02 14:11:03,380 - mcp.server.sse - DEBUG - Starting SSE writer
2025-08-02 14:11:03,381 - mcp.server.sse - DEBUG - Sent endpoint event: /messages/?session_id=f57c3b67d2ae43a6b33248d6de342bd6
2025-08-02 14:11:03,381 - mcp.server.sse - DEBUG - Sent endpoint event: /messages/?session_id=973bbfa0fea7493799c1e7435b1c7e13
2025-08-02 14:11:03,381 - sse_starlette.sse - DEBUG - chunk: b'event: endpoint\r\ndata: /messages/?session_id=f57c3b67d2ae43a6b33248d6de342bd6\r\n\r\n'
2025-08-02 14:11:03,381 - sse_starlette.sse - DEBUG - chunk: b'event: endpoint\r\ndata: /messages/?session_id=973bbfa0fea7493799c1e7435b1c7e13\r\n\r\n'
2025-08-02 14:11:06,082 - sse_starlette.sse - DEBUG - Got event: http.disconnect. Stop streaming.
2025-08-02 14:11:06,083 - root - DEBUG - Client session disconnected 973bbfa0-fea7-4937-99c1-e7435b1c7e13
2025-08-02 14:11:06,544 - mcp.server.sse - DEBUG - Setting up SSE connection
2025-08-02 14:11:06,545 - mcp.server.sse - DEBUG - Created new session with ID: 049901af-d6f5-4643-b2c0-abf61b4cca46
2025-08-02 14:11:06,545 - mcp.server.sse - DEBUG - Starting SSE response task
2025-08-02 14:11:06,545 - mcp.server.sse - DEBUG - Yielding read and write streams
2025-08-02 14:11:06,548 - mcp.server.sse - DEBUG - Starting SSE writer
2025-08-02 14:11:06,548 - mcp.server.sse - DEBUG - Sent endpoint event: /messages/?session_id=049901afd6f54643b2c0abf61b4cca46
2025-08-02 14:11:06,548 - sse_starlette.sse - DEBUG - chunk: b'event: endpoint\r\ndata: /messages/?session_id=049901afd6f54643b2c0abf61b4cca46\r\n\r\n'
2025-08-02 14:11:06,552 - mcp.server.sse - DEBUG - Handling POST message
2025-08-02 14:11:06,552 - mcp.server.sse - DEBUG - Parsed session ID: 049901af-d6f5-4643-b2c0-abf61b4cca46
2025-08-02 14:11:06,552 - mcp.server.sse - DEBUG - Received JSON: b'{"method":"initialize","params":{"protocolVersion":"2025-06-18","capabilities":{"tools":true,"prompts":true,"resources":false,"logging":false,"roots":{"listChanged":false}},"clientInfo":{"name":"cursor-vscode","version":"1.0.0"}},"jsonrpc":"2.0","id":1}'
2025-08-02 14:11:06,553 - mcp.server.sse - DEBUG - Validated client message: root=JSONRPCRequest(method='initialize', params={'protocolVersion': '2025-06-18', 'capabilities': {'tools': True, 'prompts': True, 'resources': False, 'logging': False, 'roots': {'listChanged': False}}, 'clientInfo': {'name': 'cursor-vscode', 'version': '1.0.0'}}, jsonrpc='2.0', id=1)
2025-08-02 14:11:06,553 - mcp.server.sse - DEBUG - Sending session message to writer: SessionMessage(message=JSONRPCMessage(root=JSONRPCRequest(method='initialize', params={'protocolVersion': '2025-06-18', 'capabilities': {'tools': True, 'prompts': True, 'resources': False, 'logging': False, 'roots': {'listChanged': False}}, 'clientInfo': {'name': 'cursor-vscode', 'version': '1.0.0'}}, jsonrpc='2.0', id=1)), metadata=ServerMessageMetadata(related_request_id=None, request_context=<starlette.requests.Request object at 0x10bf11610>))
2025-08-02 14:11:06,554 - mcp.server.sse - DEBUG - Sending message via SSE: SessionMessage(message=JSONRPCMessage(root=JSONRPCResponse(jsonrpc='2.0', id=1, result={'protocolVersion': '2025-03-26', 'capabilities': {'experimental': {}, 'prompts': {'listChanged': False}, 'resources': {'subscribe': False, 'listChanged': False}, 'tools': {'listChanged': False}}, 'serverInfo': {'name': 'Rowan MCP Server', 'version': '1.9.3'}})), metadata=None)
2025-08-02 14:11:06,555 - sse_starlette.sse - DEBUG - chunk: b'event: message\r\ndata: {"jsonrpc":"2.0","id":1,"result":{"protocolVersion":"2025-03-26","capabilities":{"experimental":{},"prompts":{"listChanged":false},"resources":{"subscribe":false,"listChanged":false},"tools":{"listChanged":false}},"serverInfo":{"name":"Rowan MCP Server","version":"1.9.3"}}}\r\n\r\n'
2025-08-02 14:11:06,558 - mcp.server.sse - DEBUG - Handling POST message
2025-08-02 14:11:06,558 - mcp.server.sse - DEBUG - Parsed session ID: 049901af-d6f5-4643-b2c0-abf61b4cca46
2025-08-02 14:11:06,558 - mcp.server.sse - DEBUG - Received JSON: b'{"method":"notifications/initialized","jsonrpc":"2.0"}'
2025-08-02 14:11:06,558 - mcp.server.sse - DEBUG - Validated client message: root=JSONRPCNotification(method='notifications/initialized', params=None, jsonrpc='2.0')
2025-08-02 14:11:06,558 - mcp.server.sse - DEBUG - Sending session message to writer: SessionMessage(message=JSONRPCMessage(root=JSONRPCNotification(method='notifications/initialized', params=None, jsonrpc='2.0')), metadata=ServerMessageMetadata(related_request_id=None, request_context=<starlette.requests.Request object at 0x10bf1ce10>))
2025-08-02 14:11:06,559 - mcp.server.lowlevel.server - DEBUG - Received message: root=InitializedNotification(method='notifications/initialized', params=None, jsonrpc='2.0')
2025-08-02 14:11:06,563 - mcp.server.sse - DEBUG - Handling POST message
2025-08-02 14:11:06,563 - mcp.server.sse - DEBUG - Parsed session ID: 049901af-d6f5-4643-b2c0-abf61b4cca46
2025-08-02 14:11:06,564 - mcp.server.sse - DEBUG - Received JSON: b'{"method":"tools/list","jsonrpc":"2.0","id":2}'
2025-08-02 14:11:06,564 - mcp.server.sse - DEBUG - Validated client message: root=JSONRPCRequest(method='tools/list', params=None, jsonrpc='2.0', id=2)
2025-08-02 14:11:06,564 - mcp.server.sse - DEBUG - Sending session message to writer: SessionMessage(message=JSONRPCMessage(root=JSONRPCRequest(method='tools/list', params=None, jsonrpc='2.0', id=2)), metadata=ServerMessageMetadata(related_request_id=None, request_context=<starlette.requests.Request object at 0x10be7ad50>))
2025-08-02 14:11:06,565 - mcp.server.lowlevel.server - DEBUG - Received message: <mcp.shared.session.RequestResponder object at 0x10be8b890>
2025-08-02 14:11:06,565 - mcp.server.lowlevel.server - INFO - Processing request of type ListToolsRequest
2025-08-02 14:11:06,566 - mcp.server.lowlevel.server - DEBUG - Dispatching request of type ListToolsRequest
2025-08-02 14:11:06,567 - mcp.server.lowlevel.server - DEBUG - Response sent
2025-08-02 14:11:06,567 - mcp.server.sse - DEBUG - Sending message via SSE: SessionMessage(message=JSONRPCMessage(root=JSONRPCResponse(jsonrpc='2.0', id=2, result={'tools': [{'name': 'submit_basic_calculation_workflow', 'description': 'Submit a basic calculation workflow using Rowan v2 API.\n\nPerforms fundamental quantum chemistry calculations with configurable methods\nand computational tasks. Returns a workflow object for tracking progress.\n', 'inputSchema': {'properties': {'initial_molecule': {'anyOf': [{'type': 'string'}, {'additionalProperties': True, 'type': 'object'}, {}], 'description': 'The molecule to perform the calculation on. Can be a SMILES string, dict, StJamesMolecule, or RdkitMol object', 'title': 'Initial Molecule'}, 'method': {'default': 'uma_m_omol', 'description': "The method to use for the calculation (e.g., 'uma_m_omol', 'gfn2-xtb', 'r2scan_3c')", 'title': 'Method', 'type': 'string'}, 'tasks': {'anyOf': [{'items': {'type': 'string'}, 'type': 'array'}, {'type': 'string'}, {'type': 'null'}], 'default': None, 'description': "Tasks to perform: list ['optimize'], string 'optimize', or comma-separated 'optimize,frequencies'. Defaults to None", 'title': 'Tasks'}, 'mode': {'default': 'auto', 'description': "The mode to run the calculation in ('auto', 'rapid', 'careful', 'meticulous')", 'title': 'Mode', 'type': 'string'}, 'engine': {'default': 'omol25', 'description': "The computational engine to use ('omol25', 'xtb', 'psi4')", 'title': 'Engine', 'type': 'string'}, 'name': {'default': 'Basic Calculation Workflow', 'description': 'The name of the workflow for identification', 'title': 'Name', 'type': 'string'}, 'folder_uuid': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'UUID of the folder to place the workflow in (optional)', 'title': 'Folder Uuid'}, 'max_credits': {'anyOf': [{'type': 'integer'}, {'type': 'null'}], 'default': None, 'description': 'Maximum number of credits to use for the workflow (optional)', 'title': 'Max Credits'}}, 'required': ['initial_molecule'], 'type': 'object'}}, {'name': 'submit_conformer_search_workflow', 'description': 'Submit a conformer search workflow using Rowan v2 API.\n\nExplores the conformational space of a molecule to find low-energy structures.\n\nArgs:\n    initial_molecule: SMILES string or molecule object\n    conf_gen_mode: default to "rapid"\n        Options: "rapid", "careful", "meticulous"\n    final_method: default: "aimnet2_wb97md3"\n        Try other options, if user specifies\n    solvent: Optional solvent for implicit solvation (e.g., "water", "ethanol")\n    transition_state: Whether searching for transition state conformers (default: False)\n    name: Workflow name for tracking\n    folder_uuid: Optional folder UUID for organization\n    max_credits: Optional credit limit for the calculation\n    \nReturns:\n    Workflow object representing the submitted workflow\n    \nExample:\n    # Basic conformer search\n    result = submit_conformer_search_workflow(\n        initial_molecule="CCCC",\n        conf_gen_mode="rapid"\n    )\n    \n    # Careful search with solvent\n    result = submit_conformer_search_workflow(\n        initial_molecule="CC(C)CC(=O)O",\n        conf_gen_mode="careful",\n        solvent="water",\n        final_method="r2scan_3c"\n    )\n', 'inputSchema': {'properties': {'initial_molecule': {'title': 'Initial Molecule', 'type': 'string'}, 'conf_gen_mode': {'default': 'rapid', 'title': 'Conf Gen Mode', 'type': 'string'}, 'final_method': {'default': 'aimnet2_wb97md3', 'title': 'Final Method', 'type': 'string'}, 'solvent': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Solvent'}, 'transition_state': {'default': False, 'title': 'Transition State', 'type': 'boolean'}, 'name': {'default': 'Conformer Search Workflow', 'title': 'Name', 'type': 'string'}, 'folder_uuid': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Folder Uuid'}, 'max_credits': {'anyOf': [{'type': 'integer'}, {'type': 'null'}], 'default': None, 'title': 'Max Credits'}}, 'required': ['initial_molecule'], 'type': 'object'}}, {'name': 'submit_solubility_workflow', 'description': 'Submit a solubility prediction workflow using Rowan v2 API.\n\nPredicts solubility (log S) of a molecule in multiple solvents at various temperatures\nusing machine learning models.\n\nArgs:\n    initial_smiles: SMILES string of the molecule\n    solvents: List of solvents as SMILES or common names (e.g., ["water", "ethanol"])\n        If None, uses default solvents\n    temperatures: List of temperatures in Kelvin\n        If None, uses default temperature range\n    name: Workflow name for tracking\n    folder_uuid: Optional folder UUID for organization\n    max_credits: Optional credit limit for the calculation\n    \nReturns:\n    Workflow object representing the submitted workflow\n    \nExample:\n    # Basic solubility prediction\n    result = submit_solubility_workflow(\n        initial_smiles="CC(=O)Nc1ccc(O)cc1",\n        solvents=["water", "ethanol"],\n        temperatures=[298.15, 310.15]\n    )\n    \n    # With SMILES solvents\n    result = submit_solubility_workflow(\n        initial_smiles="CC(=O)O",\n        solvents=["O", "CCO", "CCCCCC"],\n        temperatures=[273.15, 298.15, 323.15]\n    )\n', 'inputSchema': {'properties': {'initial_smiles': {'title': 'Initial Smiles', 'type': 'string'}, 'solvents': {'anyOf': [{'items': {'type': 'string'}, 'type': 'array'}, {'type': 'null'}], 'default': None, 'title': 'Solvents'}, 'temperatures': {'anyOf': [{'items': {'type': 'number'}, 'type': 'array'}, {'type': 'null'}], 'default': None, 'title': 'Temperatures'}, 'name': {'default': 'Solubility Workflow', 'title': 'Name', 'type': 'string'}, 'folder_uuid': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Folder Uuid'}, 'max_credits': {'anyOf': [{'type': 'integer'}, {'type': 'null'}], 'default': None, 'title': 'Max Credits'}}, 'required': ['initial_smiles'], 'type': 'object'}}, {'name': 'submit_pka_workflow', 'description': 'Submit a pKa prediction workflow using Rowan v2 API.\n\nPredicts acid dissociation constants (pKa) for ionizable groups in a molecule\nusing quantum chemistry calculations.\n\nArgs:\n    initial_molecule: SMILES string or molecule object\n    pka_range: Tuple of (min, max) pKa values to search (default: (2, 12))\n    deprotonate_elements: List of elements to consider for deprotonation\n        (e.g., ["N", "O", "S"]). If None, uses defaults\n    protonate_elements: List of elements to consider for protonation\n        (e.g., ["N", "O"]). If None, uses defaults\n    mode: Calculation mode (default: "careful")\n        Options: "rapid", "careful", "meticulous"\n    name: Workflow name for tracking\n    folder_uuid: Optional folder UUID for organization\n    max_credits: Optional credit limit for the calculation\n    \nReturns:\n    Workflow object representing the submitted workflow\n    \nExample:\n    # Basic pKa prediction\n    result = submit_pka_workflow(\n        initial_molecule="CC(=O)O",\n        pka_range=(2, 8)\n    )\n    \n    # Specific elements with meticulous mode\n    result = submit_pka_workflow(\n        initial_molecule="NC(C)C(=O)O",\n        pka_range=(1, 14),\n        deprotonate_elements=["N", "O"],\n        mode="meticulous"\n    )\n', 'inputSchema': {'properties': {'initial_molecule': {'title': 'Initial Molecule', 'type': 'string'}, 'pka_range': {'default': [2, 12], 'maxItems': 2, 'minItems': 2, 'prefixItems': [{'type': 'number'}, {'type': 'number'}], 'title': 'Pka Range', 'type': 'array'}, 'deprotonate_elements': {'anyOf': [{'items': {'type': 'string'}, 'type': 'array'}, {'type': 'null'}], 'default': None, 'title': 'Deprotonate Elements'}, 'protonate_elements': {'anyOf': [{'items': {'type': 'string'}, 'type': 'array'}, {'type': 'null'}], 'default': None, 'title': 'Protonate Elements'}, 'mode': {'default': 'careful', 'title': 'Mode', 'type': 'string'}, 'name': {'default': 'pKa Workflow', 'title': 'Name', 'type': 'string'}, 'folder_uuid': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Folder Uuid'}, 'max_credits': {'anyOf': [{'type': 'integer'}, {'type': 'null'}], 'default': None, 'title': 'Max Credits'}}, 'required': ['initial_molecule'], 'type': 'object'}}, {'name': 'submit_redox_potential_workflow', 'description': 'Submit a redox potential calculation workflow using Rowan v2 API.\n\nCalculates reduction and/or oxidation potentials for a molecule using\nquantum chemistry methods.\n\nArgs:\n    initial_molecule: SMILES string or molecule object\n    reduction: Whether to calculate reduction potential (default: False)\n    oxidization: Whether to calculate oxidation potential (default: True)\n    mode: Calculation mode (default: "rapid")\n        Options: "rapid", "careful", "meticulous"\n    name: Workflow name for tracking\n    folder_uuid: Optional folder UUID for organization\n    max_credits: Optional credit limit for the calculation\n    \nReturns:\n    Workflow object representing the submitted workflow\n    \nExample:\n    # Basic oxidation potential\n    result = submit_redox_potential_workflow(\n        initial_molecule="CC1=CC=CC=C1",\n        oxidization=True\n    )\n    \n    # Both reduction and oxidation with careful mode\n    result = submit_redox_potential_workflow(\n        initial_molecule="c1ccccc1",\n        reduction=True,\n        oxidization=True,\n        mode="careful"\n    )\n', 'inputSchema': {'properties': {'initial_molecule': {'title': 'Initial Molecule', 'type': 'string'}, 'reduction': {'default': False, 'title': 'Reduction', 'type': 'boolean'}, 'oxidization': {'default': True, 'title': 'Oxidization', 'type': 'boolean'}, 'mode': {'default': 'rapid', 'title': 'Mode', 'type': 'string'}, 'name': {'default': 'Redox Potential Workflow', 'title': 'Name', 'type': 'string'}, 'folder_uuid': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Folder Uuid'}, 'max_credits': {'anyOf': [{'type': 'integer'}, {'type': 'null'}], 'default': None, 'title': 'Max Credits'}}, 'required': ['initial_molecule'], 'type': 'object'}}, {'name': 'submit_fukui_workflow', 'description': 'Submit a Fukui indices calculation workflow using Rowan v2 API.\n\nCalculates Fukui indices to predict molecular reactivity at different sites.\nFukui indices indicate susceptibility to nucleophilic/electrophilic attack.\n\nArgs:\n    initial_molecule: SMILES string or molecule object\n    optimization_method: Method for geometry optimization (default: "gfn2_xtb")\n        Common options: "gfn2_xtb", "r2scan_3c", "aimnet2_wb97md3"\n    fukui_method: Method for Fukui calculation (default: "gfn1_xtb")\n        Common options: "gfn1_xtb", "gfn2_xtb"\n    solvent_settings: Optional solvent configuration dictionary\n        Example: {"solvent": "water", "model": "alpb"}\n    name: Workflow name for tracking\n    folder_uuid: Optional folder UUID for organization\n    max_credits: Optional credit limit for the calculation\n    \nReturns:\n    Workflow object representing the submitted workflow\n    \nExample:\n    # Basic Fukui indices\n    result = submit_fukui_workflow(\n        initial_molecule="CC(=O)O"\n    )\n    \n    # With solvent and advanced methods\n    result = submit_fukui_workflow(\n        initial_molecule="c1ccccc1N",\n        optimization_method="r2scan_3c",\n        fukui_method="gfn2_xtb",\n        solvent_settings={"solvent": "water", "model": "alpb"}\n    )\n', 'inputSchema': {'properties': {'initial_molecule': {'title': 'Initial Molecule', 'type': 'string'}, 'optimization_method': {'default': 'gfn2_xtb', 'title': 'Optimization Method', 'type': 'string'}, 'fukui_method': {'default': 'gfn1_xtb', 'title': 'Fukui Method', 'type': 'string'}, 'solvent_settings': {'anyOf': [{'additionalProperties': True, 'type': 'object'}, {'type': 'null'}], 'default': None, 'title': 'Solvent Settings'}, 'name': {'default': 'Fukui Workflow', 'title': 'Name', 'type': 'string'}, 'folder_uuid': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Folder Uuid'}, 'max_credits': {'anyOf': [{'type': 'integer'}, {'type': 'null'}], 'default': None, 'title': 'Max Credits'}}, 'required': ['initial_molecule'], 'type': 'object'}}, {'name': 'submit_tautomer_search_workflow', 'description': 'Submit a tautomer search workflow using Rowan v2 API.\n\nSearches for different tautomeric forms of a molecule and evaluates their\nrelative stabilities. Tautomers are structural isomers that readily interconvert.\n\nArgs:\n    initial_molecule: SMILES string or molecule object\n    mode: Search mode (default: "careful")\n        Options: "rapid", "careful", "meticulous"\n    name: Workflow name for tracking\n    folder_uuid: Optional folder UUID for organization\n    max_credits: Optional credit limit for the calculation\n    \nReturns:\n    Workflow object representing the submitted workflow\n    \nExample:\n    # Basic tautomer search\n    result = submit_tautomer_search_workflow(\n        initial_molecule="CC(=O)CC(=O)C"\n    )\n    \n    # Meticulous search for complex molecule\n    result = submit_tautomer_search_workflow(\n        initial_molecule="c1ccc2c(c1)ncc(=O)[nH]2",\n        mode="meticulous"\n    )\n', 'inputSchema': {'properties': {'initial_molecule': {'title': 'Initial Molecule', 'type': 'string'}, 'mode': {'default': 'careful', 'title': 'Mode', 'type': 'string'}, 'name': {'default': 'Tautomer Search Workflow', 'title': 'Name', 'type': 'string'}, 'folder_uuid': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Folder Uuid'}, 'max_credits': {'anyOf': [{'type': 'integer'}, {'type': 'null'}], 'default': None, 'title': 'Max Credits'}}, 'required': ['initial_molecule'], 'type': 'object'}}, {'name': 'submit_descriptors_workflow', 'description': 'Submit a molecular descriptors calculation workflow using Rowan v2 API.\n\nCalculates a comprehensive set of molecular descriptors including:\n- Physical properties (MW, logP, TPSA, etc.)\n- Electronic properties (HOMO/LUMO, dipole moment, etc.)\n- Structural features (rotatable bonds, H-bond donors/acceptors, etc.)\n- Topological indices\n\nArgs:\n    initial_molecule: SMILES string or molecule object\n    name: Workflow name for tracking\n    folder_uuid: Optional folder UUID for organization\n    max_credits: Optional credit limit for the calculation\n    \nReturns:\n    Workflow object representing the submitted workflow\n    \nExample:\n    # Basic descriptor calculation\n    result = submit_descriptors_workflow(\n        initial_molecule="CC(=O)Nc1ccc(O)cc1"\n    )\n    \n    # For complex molecule\n    result = submit_descriptors_workflow(\n        initial_molecule="CN1C=NC2=C1C(=O)N(C(=O)N2C)C",\n        name="Caffeine Descriptors"\n    )\n', 'inputSchema': {'properties': {'initial_molecule': {'title': 'Initial Molecule', 'type': 'string'}, 'name': {'default': 'Descriptors Workflow', 'title': 'Name', 'type': 'string'}, 'folder_uuid': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Folder Uuid'}, 'max_credits': {'anyOf': [{'type': 'integer'}, {'type': 'null'}], 'default': None, 'title': 'Max Credits'}}, 'required': ['initial_molecule'], 'type': 'object'}}, {'name': 'submit_scan_workflow', 'description': 'Submit a potential energy surface scan workflow using Rowan v2 API.\n\nPerforms systematic scans along specified molecular coordinates (bonds, angles,\nor dihedrals) to map the potential energy surface.\n\nArgs:\n    initial_molecule: SMILES string or molecule object\n    scan_settings: Dictionary specifying scan parameters\n        Example: {\n            "type": "dihedral",  # or "bond", "angle"\n            "atoms": [0, 1, 2, 3],  # atom indices\n            "start": -180,\n            "stop": 180,\n            "step": 10\n        }\n    calculation_engine: Computational engine (default: "omol25")\n        Options: "omol25", "xtb", "psi4"\n    calculation_method: Method for calculations (default: "uma_m_omol")\n        Options depend on engine\n    wavefront_propagation: Use wavefront optimization (default: True)\n        Speeds up scans by using previous geometries as starting points\n    name: Workflow name for tracking\n    folder_uuid: Optional folder UUID for organization\n    max_credits: Optional credit limit for the calculation\n    \nReturns:\n    Workflow object representing the submitted workflow\n    \nExample:\n    # Dihedral scan\n    result = submit_scan_workflow(\n        initial_molecule="CC(C)CC",\n        scan_settings={\n            "type": "dihedral",\n            "atoms": [0, 1, 2, 3],\n            "start": -180,\n            "stop": 180,\n            "step": 15\n        }\n    )\n    \n    # Bond scan with advanced method\n    result = submit_scan_workflow(\n        initial_molecule="CC",\n        scan_settings={\n            "type": "bond",\n            "atoms": [0, 1],\n            "start": 1.0,\n            "stop": 2.5,\n            "step": 0.1\n        },\n        calculation_method="r2scan_3c"\n    )\n', 'inputSchema': {'properties': {'initial_molecule': {'title': 'Initial Molecule', 'type': 'string'}, 'scan_settings': {'anyOf': [{'additionalProperties': True, 'type': 'object'}, {'type': 'null'}], 'default': None, 'title': 'Scan Settings'}, 'calculation_engine': {'default': 'omol25', 'title': 'Calculation Engine', 'type': 'string'}, 'calculation_method': {'default': 'uma_m_omol', 'title': 'Calculation Method', 'type': 'string'}, 'wavefront_propagation': {'default': True, 'title': 'Wavefront Propagation', 'type': 'boolean'}, 'name': {'default': 'Scan Workflow', 'title': 'Name', 'type': 'string'}, 'folder_uuid': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Folder Uuid'}, 'max_credits': {'anyOf': [{'type': 'integer'}, {'type': 'null'}], 'default': None, 'title': 'Max Credits'}}, 'required': ['initial_molecule'], 'type': 'object'}}, {'name': 'submit_irc_workflow', 'description': 'Submits an Intrinsic Reaction Coordinate (IRC) workflow to the API.\n\nArgs:\n    initial_molecule: The initial molecule to perform the IRC calculation on.\n        Can be a dict, StJamesMolecule, or RdkitMol object\n    method: The computational method to use for the IRC calculation (default: "uma_m_omol")\n        See list of available methods for options\n    engine: The computational engine to use for the calculation (default: "omol25")\n        See list of available engines\n    preopt: Whether to perform a pre-optimization of the molecule (default: True)\n    step_size: The step size to use for the IRC calculation (default: 0.05)\n    max_irc_steps: The maximum number of IRC steps to perform (default: 30)\n    name: The name of the workflow\n    folder_uuid: The UUID of the folder to place the workflow in\n    max_credits: The maximum number of credits to use for the workflow\n    \nReturns:\n    Workflow object representing the submitted IRC workflow\n    \nExample:\n    # Basic IRC calculation\n    result = submit_irc_workflow(\n        initial_molecule={"smiles": "[CH3].[CH3]"},\n        method="gfn2_xtb",\n        max_irc_steps=50\n    )\n    \n    # IRC with specific method and engine\n    result = submit_irc_workflow(\n        initial_molecule={"smiles": "CC(O)=CC"},\n        method="r2scan_3c",\n        engine="psi4",\n        step_size=0.03\n    )\n', 'inputSchema': {'properties': {'initial_molecule': {'anyOf': [{'additionalProperties': True, 'type': 'object'}, {}, {'type': 'null'}], 'default': None, 'title': 'Initial Molecule'}, 'method': {'default': 'uma_m_omol', 'title': 'Method', 'type': 'string'}, 'engine': {'default': 'omol25', 'title': 'Engine', 'type': 'string'}, 'preopt': {'default': True, 'title': 'Preopt', 'type': 'boolean'}, 'step_size': {'default': 0.05, 'title': 'Step Size', 'type': 'number'}, 'max_irc_steps': {'default': 30, 'title': 'Max Irc Steps', 'type': 'integer'}, 'name': {'default': 'IRC Workflow', 'title': 'Name', 'type': 'string'}, 'folder_uuid': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Folder Uuid'}, 'max_credits': {'anyOf': [{'type': 'integer'}, {'type': 'null'}], 'default': None, 'title': 'Max Credits'}}, 'type': 'object'}}, {'name': 'submit_protein_cofolding_workflow', 'description': 'Submits a protein cofolding workflow to the API.\n\nArgs:\n    initial_protein_sequences: The sequences of the proteins to be cofolded\n    initial_smiles_list: A list of SMILES strings for the ligands to be cofolded with\n    ligand_binding_affinity_index: The index of the ligand for which to compute the binding affinity\n    use_msa_server: Whether to use the MSA server for the computation\n    use_potentials: Whether to use potentials for the computation\n    name: The name of the workflow\n    model: The model to use for the computation\n    folder_uuid: The UUID of the folder to store the workflow in\n    max_credits: The maximum number of credits to use for the workflow\n    \nReturns:\n    Workflow object representing the submitted workflow\n    \nExample:\n    # Protein dimer cofolding\n    result = submit_protein_cofolding_workflow(\n        initial_protein_sequences=[\n            "MKTAYIAKQRQISFVKSHFSRQLEERLGLIEVQAPILSRVGDGTQDNLSGAEK",\n            "MKQHKAMIVALIVICITAVVAALVTRKDLCEVHIRTGQTEVAVF"\n        ]\n    )\n    \n    # Protein-ligand complex\n    result = submit_protein_cofolding_workflow(\n        initial_protein_sequences=["MGSSHHHHHHSSGLVPRGSH"],\n        initial_smiles_list=["CC(=O)O", "CCO"],\n        ligand_binding_affinity_index=0,\n        use_msa_server=True\n    )\n', 'inputSchema': {'properties': {'initial_protein_sequences': {'items': {'type': 'string'}, 'title': 'Initial Protein Sequences', 'type': 'array'}, 'initial_smiles_list': {'anyOf': [{'items': {'type': 'string'}, 'type': 'array'}, {'type': 'null'}], 'default': None, 'title': 'Initial Smiles List'}, 'ligand_binding_affinity_index': {'anyOf': [{'type': 'integer'}, {'type': 'null'}], 'default': None, 'title': 'Ligand Binding Affinity Index'}, 'use_msa_server': {'default': True, 'title': 'Use Msa Server', 'type': 'boolean'}, 'use_potentials': {'default': False, 'title': 'Use Potentials', 'type': 'boolean'}, 'name': {'default': 'Cofolding Workflow', 'title': 'Name', 'type': 'string'}, 'model': {'default': 'boltz_2', 'title': 'Model', 'type': 'string'}, 'folder_uuid': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Folder Uuid'}, 'max_credits': {'anyOf': [{'type': 'integer'}, {'type': 'null'}], 'default': None, 'title': 'Max Credits'}}, 'required': ['initial_protein_sequences'], 'type': 'object'}}, {'name': 'submit_docking_workflow', 'description': 'Submits a Docking workflow to the API.\n\nArgs:\n    protein: The protein to dock. Can be fed as a uuid or a Protein object\n    pocket: The pocket to dock into\n    initial_molecule: The initial molecule to be docked.\n        Can be a dict, StJamesMolecule, or RdkitMol object\n    do_csearch: Whether to perform a conformational search on the ligand\n    do_optimization: Whether to perform an optimization on the ligand\n    name: The name of the workflow\n    folder_uuid: The UUID of the folder to place the workflow in\n    max_credits: The maximum number of credits to use for the workflow\n    \nReturns:\n    Workflow object representing the submitted workflow\n    \nExample:\n    # Basic docking with protein UUID\n    result = submit_docking_workflow(\n        protein="protein-uuid-123",\n        pocket=pocket_obj,\n        initial_molecule={"smiles": "CC(=O)Oc1ccccc1C(=O)O"}\n    )\n    \n    # Docking with optimization disabled\n    result = submit_docking_workflow(\n        protein=protein_obj,\n        pocket=pocket_obj,\n        initial_molecule={"smiles": "CCO"},\n        do_csearch=False,\n        do_optimization=False\n    )\n', 'inputSchema': {'properties': {'protein': {'anyOf': [{'type': 'string'}, {}], 'title': 'Protein'}, 'pocket': {'title': 'Pocket'}, 'initial_molecule': {'anyOf': [{'additionalProperties': True, 'type': 'object'}, {}, {'type': 'null'}], 'default': None, 'title': 'Initial Molecule'}, 'do_csearch': {'default': True, 'title': 'Do Csearch', 'type': 'boolean'}, 'do_optimization': {'default': True, 'title': 'Do Optimization', 'type': 'boolean'}, 'name': {'default': 'Docking Workflow', 'title': 'Name', 'type': 'string'}, 'folder_uuid': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Folder Uuid'}, 'max_credits': {'anyOf': [{'type': 'integer'}, {'type': 'null'}], 'default': None, 'title': 'Max Credits'}}, 'required': ['protein', 'pocket'], 'type': 'object'}}, {'name': 'workflow_fetch_latest', 'description': 'Fetch the latest workflow data from the database.\n\nUpdates the workflow object with the most recent status and results.\n\nArgs:\n    workflow_uuid: The UUID of the workflow to fetch\n    in_place: Whether to update the workflow object in place (default: False)\n    \nReturns:\n    Dictionary containing the updated workflow data including status and results\n', 'inputSchema': {'properties': {'workflow_uuid': {'title': 'Workflow Uuid', 'type': 'string'}, 'in_place': {'default': False, 'title': 'In Place', 'type': 'boolean'}}, 'required': ['workflow_uuid'], 'type': 'object'}}, {'name': 'workflow_wait_for_result', 'description': 'Wait for a workflow to complete and return the result.\n\nBlocks until the workflow completes, polling at specified intervals.\n\nArgs:\n    workflow_uuid: The UUID of the workflow to wait for\n    poll_interval: Time in seconds between status checks (default: 5)\n    \nReturns:\n    Dictionary containing the completed workflow data including results\n', 'inputSchema': {'properties': {'workflow_uuid': {'title': 'Workflow Uuid', 'type': 'string'}, 'poll_interval': {'default': 5, 'title': 'Poll Interval', 'type': 'integer'}}, 'required': ['workflow_uuid'], 'type': 'object'}}, {'name': 'workflow_get_status', 'description': 'Get the current status of a workflow.\n\nArgs:\n    workflow_uuid: The UUID of the workflow\n    \nReturns:\n    Dictionary with status information\n', 'inputSchema': {'properties': {'workflow_uuid': {'title': 'Workflow Uuid', 'type': 'string'}}, 'required': ['workflow_uuid'], 'type': 'object'}}, {'name': 'workflow_stop', 'description': 'Stop a running workflow.\n\nArgs:\n    workflow_uuid: The UUID of the workflow to stop\n    \nReturns:\n    Dictionary with confirmation message\n', 'inputSchema': {'properties': {'workflow_uuid': {'title': 'Workflow Uuid', 'type': 'string'}}, 'required': ['workflow_uuid'], 'type': 'object'}}, {'name': 'workflow_delete', 'description': 'Delete a workflow.\n\nThis permanently removes the workflow and its results from the database.\n\nArgs:\n    workflow_uuid: The UUID of the workflow to delete\n    \nReturns:\n    Dictionary with confirmation message\n', 'inputSchema': {'properties': {'workflow_uuid': {'title': 'Workflow Uuid', 'type': 'string'}}, 'required': ['workflow_uuid'], 'type': 'object'}}, {'name': 'retrieve_workflow', 'description': 'Retrieve a workflow from the API.\n\nArgs:\n    uuid: The UUID of the workflow to retrieve\n    \nReturns:\n    Dictionary containing the complete workflow data\n    \nRaises:\n    HTTPError: If the API request fails\n', 'inputSchema': {'properties': {'uuid': {'title': 'Uuid', 'type': 'string'}}, 'required': ['uuid'], 'type': 'object'}}, {'name': 'retrieve_calculation_molecules', 'description': 'Retrieve a list of molecules from a calculation.\n\nArgs:\n    uuid: The UUID of the calculation to retrieve molecules from\n    \nReturns:\n    List of dictionaries representing the molecules in the calculation\n    \nRaises:\n    HTTPError: If the API request fails\n', 'inputSchema': {'properties': {'uuid': {'title': 'Uuid', 'type': 'string'}}, 'required': ['uuid'], 'type': 'object'}}, {'name': 'list_workflows', 'description': 'List workflows subject to the specified criteria.\n\nArgs:\n    parent_uuid: The UUID of the parent folder\n    name_contains: Substring to search for in workflow names\n    public: Filter workflows by their public status\n    starred: Filter workflows by their starred status\n    status: Filter workflows by their status\n    workflow_type: Filter workflows by their type\n    page: The page number to retrieve (default: 0)\n    size: The number of items per page (default: 10)\n    \nReturns:\n    List of workflow dictionaries that match the search criteria\n    \nRaises:\n    HTTPError: If the request to the API fails\n', 'inputSchema': {'properties': {'parent_uuid': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Parent Uuid'}, 'name_contains': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Name Contains'}, 'public': {'anyOf': [{'type': 'boolean'}, {'type': 'null'}], 'default': None, 'title': 'Public'}, 'starred': {'anyOf': [{'type': 'boolean'}, {'type': 'null'}], 'default': None, 'title': 'Starred'}, 'status': {'anyOf': [{'type': 'integer'}, {'type': 'null'}], 'default': None, 'title': 'Status'}, 'workflow_type': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Workflow Type'}, 'page': {'default': 0, 'title': 'Page', 'type': 'integer'}, 'size': {'default': 10, 'title': 'Size', 'type': 'integer'}}, 'type': 'object'}}, {'name': 'workflow_update', 'description': 'Update workflow details.\n\nArgs:\n    workflow_uuid: The UUID of the workflow to update\n    name: New name for the workflow (optional)\n    notes: New notes for the workflow (optional)\n    starred: Whether to star/unstar the workflow (optional)\n    public: Whether to make the workflow public/private (optional)\n    \nReturns:\n    Dictionary with updated workflow information\n', 'inputSchema': {'properties': {'workflow_uuid': {'title': 'Workflow Uuid', 'type': 'string'}, 'name': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Name'}, 'notes': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Notes'}, 'starred': {'anyOf': [{'type': 'boolean'}, {'type': 'null'}], 'default': None, 'title': 'Starred'}, 'public': {'anyOf': [{'type': 'boolean'}, {'type': 'null'}], 'default': None, 'title': 'Public'}}, 'required': ['workflow_uuid'], 'type': 'object'}}, {'name': 'workflow_is_finished', 'description': 'Check if a workflow is finished.\n\nArgs:\n    workflow_uuid: The UUID of the workflow to check\n    \nReturns:\n    Dictionary with workflow completion status\n', 'inputSchema': {'properties': {'workflow_uuid': {'title': 'Workflow Uuid', 'type': 'string'}}, 'required': ['workflow_uuid'], 'type': 'object'}}, {'name': 'workflow_delete_data', 'description': 'Delete workflow data while keeping the workflow record.\n\nArgs:\n    workflow_uuid: The UUID of the workflow\n    \nReturns:\n    Dictionary with confirmation message\n', 'inputSchema': {'properties': {'workflow_uuid': {'title': 'Workflow Uuid', 'type': 'string'}}, 'required': ['workflow_uuid'], 'type': 'object'}}]})), metadata=None)
2025-08-02 14:11:06,569 - sse_starlette.sse - DEBUG - chunk: b'event: message\r\ndata: {"jsonrpc":"2.0","id":2,"result":{"tools":[{"name":"submit_basic_calculation_workflow","description":"Submit a basic calculation workflow using Rowan v2 API.\\n\\nPerforms fundamental quantum chemistry calculations with configurable methods\\nand computational tasks. Returns a workflow object for tracking progress.\\n","inputSchema":{"properties":{"initial_molecule":{"anyOf":[{"type":"string"},{"additionalProperties":true,"type":"object"},{}],"description":"The molecule to perform the calculation on. Can be a SMILES string, dict, StJamesMolecule, or RdkitMol object","title":"Initial Molecule"},"method":{"default":"uma_m_omol","description":"The method to use for the calculation (e.g., \'uma_m_omol\', \'gfn2-xtb\', \'r2scan_3c\')","title":"Method","type":"string"},"tasks":{"anyOf":[{"items":{"type":"string"},"type":"array"},{"type":"string"},{"type":"null"}],"default":null,"description":"Tasks to perform: list [\'optimize\'], string \'optimize\', or comma-separated \'optimize,frequencies\'. Defaults to None","title":"Tasks"},"mode":{"default":"auto","description":"The mode to run the calculation in (\'auto\', \'rapid\', \'careful\', \'meticulous\')","title":"Mode","type":"string"},"engine":{"default":"omol25","description":"The computational engine to use (\'omol25\', \'xtb\', \'psi4\')","title":"Engine","type":"string"},"name":{"default":"Basic Calculation Workflow","description":"The name of the workflow for identification","title":"Name","type":"string"},"folder_uuid":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"description":"UUID of the folder to place the workflow in (optional)","title":"Folder Uuid"},"max_credits":{"anyOf":[{"type":"integer"},{"type":"null"}],"default":null,"description":"Maximum number of credits to use for the workflow (optional)","title":"Max Credits"}},"required":["initial_molecule"],"type":"object"}},{"name":"submit_conformer_search_workflow","description":"Submit a conformer search workflow using Rowan v2 API.\\n\\nExplores the conformational space of a molecule to find low-energy structures.\\n\\nArgs:\\n    initial_molecule: SMILES string or molecule object\\n    conf_gen_mode: default to \\"rapid\\"\\n        Options: \\"rapid\\", \\"careful\\", \\"meticulous\\"\\n    final_method: default: \\"aimnet2_wb97md3\\"\\n        Try other options, if user specifies\\n    solvent: Optional solvent for implicit solvation (e.g., \\"water\\", \\"ethanol\\")\\n    transition_state: Whether searching for transition state conformers (default: False)\\n    name: Workflow name for tracking\\n    folder_uuid: Optional folder UUID for organization\\n    max_credits: Optional credit limit for the calculation\\n    \\nReturns:\\n    Workflow object representing the submitted workflow\\n    \\nExample:\\n    # Basic conformer search\\n    result = submit_conformer_search_workflow(\\n        initial_molecule=\\"CCCC\\",\\n        conf_gen_mode=\\"rapid\\"\\n    )\\n    \\n    # Careful search with solvent\\n    result = submit_conformer_search_workflow(\\n        initial_molecule=\\"CC(C)CC(=O)O\\",\\n        conf_gen_mode=\\"careful\\",\\n        solvent=\\"water\\",\\n        final_method=\\"r2scan_3c\\"\\n    )\\n","inputSchema":{"properties":{"initial_molecule":{"title":"Initial Molecule","type":"string"},"conf_gen_mode":{"default":"rapid","title":"Conf Gen Mode","type":"string"},"final_method":{"default":"aimnet2_wb97md3","title":"Final Method","type":"string"},"solvent":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"title":"Solvent"},"transition_state":{"default":false,"title":"Transition State","type":"boolean"},"name":{"default":"Conformer Search Workflow","title":"Name","type":"string"},"folder_uuid":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"title":"Folder Uuid"},"max_credits":{"anyOf":[{"type":"integer"},{"type":"null"}],"default":null,"title":"Max Credits"}},"required":["initial_molecule"],"type":"object"}},{"name":"submit_solubility_workflow","description":"Submit a solubility prediction workflow using Rowan v2 API.\\n\\nPredicts solubility (log S) of a molecule in multiple solvents at various temperatures\\nusing machine learning models.\\n\\nArgs:\\n    initial_smiles: SMILES string of the molecule\\n    solvents: List of solvents as SMILES or common names (e.g., [\\"water\\", \\"ethanol\\"])\\n        If None, uses default solvents\\n    temperatures: List of temperatures in Kelvin\\n        If None, uses default temperature range\\n    name: Workflow name for tracking\\n    folder_uuid: Optional folder UUID for organization\\n    max_credits: Optional credit limit for the calculation\\n    \\nReturns:\\n    Workflow object representing the submitted workflow\\n    \\nExample:\\n    # Basic solubility prediction\\n    result = submit_solubility_workflow(\\n        initial_smiles=\\"CC(=O)Nc1ccc(O)cc1\\",\\n        solvents=[\\"water\\", \\"ethanol\\"],\\n        temperatures=[298.15, 310.15]\\n    )\\n    \\n    # With SMILES solvents\\n    result = submit_solubility_workflow(\\n        initial_smiles=\\"CC(=O)O\\",\\n        solvents=[\\"O\\", \\"CCO\\", \\"CCCCCC\\"],\\n        temperatures=[273.15, 298.15, 323.15]\\n    )\\n","inputSchema":{"properties":{"initial_smiles":{"title":"Initial Smiles","type":"string"},"solvents":{"anyOf":[{"items":{"type":"string"},"type":"array"},{"type":"null"}],"default":null,"title":"Solvents"},"temperatures":{"anyOf":[{"items":{"type":"number"},"type":"array"},{"type":"null"}],"default":null,"title":"Temperatures"},"name":{"default":"Solubility Workflow","title":"Name","type":"string"},"folder_uuid":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"title":"Folder Uuid"},"max_credits":{"anyOf":[{"type":"integer"},{"type":"null"}],"default":null,"title":"Max Credits"}},"required":["initial_smiles"],"type":"object"}},{"name":"submit_pka_workflow","description":"Submit a pKa prediction workflow using Rowan v2 API.\\n\\nPredicts acid dissociation constants (pKa) for ionizable groups in a molecule\\nusing quantum chemistry calculations.\\n\\nArgs:\\n    initial_molecule: SMILES string or molecule object\\n    pka_range: Tuple of (min, max) pKa values to search (default: (2, 12))\\n    deprotonate_elements: List of elements to consider for deprotonation\\n        (e.g., [\\"N\\", \\"O\\", \\"S\\"]). If None, uses defaults\\n    protonate_elements: List of elements to consider for protonation\\n        (e.g., [\\"N\\", \\"O\\"]). If None, uses defaults\\n    mode: Calculation mode (default: \\"careful\\")\\n        Options: \\"rapid\\", \\"careful\\", \\"meticulous\\"\\n    name: Workflow name for tracking\\n    folder_uuid: Optional folder UUID for organization\\n    max_credits: Optional credit limit for the calculation\\n    \\nReturns:\\n    Workflow object representing the submitted workflow\\n    \\nExample:\\n    # Basic pKa prediction\\n    result = submit_pka_workflow(\\n        initial_molecule=\\"CC(=O)O\\",\\n        pka_range=(2, 8)\\n    )\\n    \\n    # Specific elements with meticulous mode\\n    result = submit_pka_workflow(\\n        initial_molecule=\\"NC(C)C(=O)O\\",\\n        pka_range=(1, 14),\\n        deprotonate_elements=[\\"N\\", \\"O\\"],\\n        mode=\\"meticulous\\"\\n    )\\n","inputSchema":{"properties":{"initial_molecule":{"title":"Initial Molecule","type":"string"},"pka_range":{"default":[2,12],"maxItems":2,"minItems":2,"prefixItems":[{"type":"number"},{"type":"number"}],"title":"Pka Range","type":"array"},"deprotonate_elements":{"anyOf":[{"items":{"type":"string"},"type":"array"},{"type":"null"}],"default":null,"title":"Deprotonate Elements"},"protonate_elements":{"anyOf":[{"items":{"type":"string"},"type":"array"},{"type":"null"}],"default":null,"title":"Protonate Elements"},"mode":{"default":"careful","title":"Mode","type":"string"},"name":{"default":"pKa Workflow","title":"Name","type":"string"},"folder_uuid":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"title":"Folder Uuid"},"max_credits":{"anyOf":[{"type":"integer"},{"type":"null"}],"default":null,"title":"Max Credits"}},"required":["initial_molecule"],"type":"object"}},{"name":"submit_redox_potential_workflow","description":"Submit a redox potential calculation workflow using Rowan v2 API.\\n\\nCalculates reduction and/or oxidation potentials for a molecule using\\nquantum chemistry methods.\\n\\nArgs:\\n    initial_molecule: SMILES string or molecule object\\n    reduction: Whether to calculate reduction potential (default: False)\\n    oxidization: Whether to calculate oxidation potential (default: True)\\n    mode: Calculation mode (default: \\"rapid\\")\\n        Options: \\"rapid\\", \\"careful\\", \\"meticulous\\"\\n    name: Workflow name for tracking\\n    folder_uuid: Optional folder UUID for organization\\n    max_credits: Optional credit limit for the calculation\\n    \\nReturns:\\n    Workflow object representing the submitted workflow\\n    \\nExample:\\n    # Basic oxidation potential\\n    result = submit_redox_potential_workflow(\\n        initial_molecule=\\"CC1=CC=CC=C1\\",\\n        oxidization=True\\n    )\\n    \\n    # Both reduction and oxidation with careful mode\\n    result = submit_redox_potential_workflow(\\n        initial_molecule=\\"c1ccccc1\\",\\n        reduction=True,\\n        oxidization=True,\\n        mode=\\"careful\\"\\n    )\\n","inputSchema":{"properties":{"initial_molecule":{"title":"Initial Molecule","type":"string"},"reduction":{"default":false,"title":"Reduction","type":"boolean"},"oxidization":{"default":true,"title":"Oxidization","type":"boolean"},"mode":{"default":"rapid","title":"Mode","type":"string"},"name":{"default":"Redox Potential Workflow","title":"Name","type":"string"},"folder_uuid":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"title":"Folder Uuid"},"max_credits":{"anyOf":[{"type":"integer"},{"type":"null"}],"default":null,"title":"Max Credits"}},"required":["initial_molecule"],"type":"object"}},{"name":"submit_fukui_workflow","description":"Submit a Fukui indices calculation workflow using Rowan v2 API.\\n\\nCalculates Fukui indices to predict molecular reactivity at different sites.\\nFukui indices indicate susceptibility to nucleophilic/electrophilic attack.\\n\\nArgs:\\n    initial_molecule: SMILES string or molecule object\\n    optimization_method: Method for geometry optimization (default: \\"gfn2_xtb\\")\\n        Common options: \\"gfn2_xtb\\", \\"r2scan_3c\\", \\"aimnet2_wb97md3\\"\\n    fukui_method: Method for Fukui calculation (default: \\"gfn1_xtb\\")\\n        Common options: \\"gfn1_xtb\\", \\"gfn2_xtb\\"\\n    solvent_settings: Optional solvent configuration dictionary\\n        Example: {\\"solvent\\": \\"water\\", \\"model\\": \\"alpb\\"}\\n    name: Workflow name for tracking\\n    folder_uuid: Optional folder UUID for organization\\n    max_credits: Optional credit limit for the calculation\\n    \\nReturns:\\n    Workflow object representing the submitted workflow\\n    \\nExample:\\n    # Basic Fukui indices\\n    result = submit_fukui_workflow(\\n        initial_molecule=\\"CC(=O)O\\"\\n    )\\n    \\n    # With solvent and advanced methods\\n    result = submit_fukui_workflow(\\n        initial_molecule=\\"c1ccccc1N\\",\\n        optimization_method=\\"r2scan_3c\\",\\n        fukui_method=\\"gfn2_xtb\\",\\n        solvent_settings={\\"solvent\\": \\"water\\", \\"model\\": \\"alpb\\"}\\n    )\\n","inputSchema":{"properties":{"initial_molecule":{"title":"Initial Molecule","type":"string"},"optimization_method":{"default":"gfn2_xtb","title":"Optimization Method","type":"string"},"fukui_method":{"default":"gfn1_xtb","title":"Fukui Method","type":"string"},"solvent_settings":{"anyOf":[{"additionalProperties":true,"type":"object"},{"type":"null"}],"default":null,"title":"Solvent Settings"},"name":{"default":"Fukui Workflow","title":"Name","type":"string"},"folder_uuid":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"title":"Folder Uuid"},"max_credits":{"anyOf":[{"type":"integer"},{"type":"null"}],"default":null,"title":"Max Credits"}},"required":["initial_molecule"],"type":"object"}},{"name":"submit_tautomer_search_workflow","description":"Submit a tautomer search workflow using Rowan v2 API.\\n\\nSearches for different tautomeric forms of a molecule and evaluates their\\nrelative stabilities. Tautomers are structural isomers that readily interconvert.\\n\\nArgs:\\n    initial_molecule: SMILES string or molecule object\\n    mode: Search mode (default: \\"careful\\")\\n        Options: \\"rapid\\", \\"careful\\", \\"meticulous\\"\\n    name: Workflow name for tracking\\n    folder_uuid: Optional folder UUID for organization\\n    max_credits: Optional credit limit for the calculation\\n    \\nReturns:\\n    Workflow object representing the submitted workflow\\n    \\nExample:\\n    # Basic tautomer search\\n    result = submit_tautomer_search_workflow(\\n        initial_molecule=\\"CC(=O)CC(=O)C\\"\\n    )\\n    \\n    # Meticulous search for complex molecule\\n    result = submit_tautomer_search_workflow(\\n        initial_molecule=\\"c1ccc2c(c1)ncc(=O)[nH]2\\",\\n        mode=\\"meticulous\\"\\n    )\\n","inputSchema":{"properties":{"initial_molecule":{"title":"Initial Molecule","type":"string"},"mode":{"default":"careful","title":"Mode","type":"string"},"name":{"default":"Tautomer Search Workflow","title":"Name","type":"string"},"folder_uuid":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"title":"Folder Uuid"},"max_credits":{"anyOf":[{"type":"integer"},{"type":"null"}],"default":null,"title":"Max Credits"}},"required":["initial_molecule"],"type":"object"}},{"name":"submit_descriptors_workflow","description":"Submit a molecular descriptors calculation workflow using Rowan v2 API.\\n\\nCalculates a comprehensive set of molecular descriptors including:\\n- Physical properties (MW, logP, TPSA, etc.)\\n- Electronic properties (HOMO/LUMO, dipole moment, etc.)\\n- Structural features (rotatable bonds, H-bond donors/acceptors, etc.)\\n- Topological indices\\n\\nArgs:\\n    initial_molecule: SMILES string or molecule object\\n    name: Workflow name for tracking\\n    folder_uuid: Optional folder UUID for organization\\n    max_credits: Optional credit limit for the calculation\\n    \\nReturns:\\n    Workflow object representing the submitted workflow\\n    \\nExample:\\n    # Basic descriptor calculation\\n    result = submit_descriptors_workflow(\\n        initial_molecule=\\"CC(=O)Nc1ccc(O)cc1\\"\\n    )\\n    \\n    # For complex molecule\\n    result = submit_descriptors_workflow(\\n        initial_molecule=\\"CN1C=NC2=C1C(=O)N(C(=O)N2C)C\\",\\n        name=\\"Caffeine Descriptors\\"\\n    )\\n","inputSchema":{"properties":{"initial_molecule":{"title":"Initial Molecule","type":"string"},"name":{"default":"Descriptors Workflow","title":"Name","type":"string"},"folder_uuid":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"title":"Folder Uuid"},"max_credits":{"anyOf":[{"type":"integer"},{"type":"null"}],"default":null,"title":"Max Credits"}},"required":["initial_molecule"],"type":"object"}},{"name":"submit_scan_workflow","description":"Submit a potential energy surface scan workflow using Rowan v2 API.\\n\\nPerforms systematic scans along specified molecular coordinates (bonds, angles,\\nor dihedrals) to map the potential energy surface.\\n\\nArgs:\\n    initial_molecule: SMILES string or molecule object\\n    scan_settings: Dictionary specifying scan parameters\\n        Example: {\\n            \\"type\\": \\"dihedral\\",  # or \\"bond\\", \\"angle\\"\\n            \\"atoms\\": [0, 1, 2, 3],  # atom indices\\n            \\"start\\": -180,\\n            \\"stop\\": 180,\\n            \\"step\\": 10\\n        }\\n    calculation_engine: Computational engine (default: \\"omol25\\")\\n        Options: \\"omol25\\", \\"xtb\\", \\"psi4\\"\\n    calculation_method: Method for calculations (default: \\"uma_m_omol\\")\\n        Options depend on engine\\n    wavefront_propagation: Use wavefront optimization (default: True)\\n        Speeds up scans by using previous geometries as starting points\\n    name: Workflow name for tracking\\n    folder_uuid: Optional folder UUID for organization\\n    max_credits: Optional credit limit for the calculation\\n    \\nReturns:\\n    Workflow object representing the submitted workflow\\n    \\nExample:\\n    # Dihedral scan\\n    result = submit_scan_workflow(\\n        initial_molecule=\\"CC(C)CC\\",\\n        scan_settings={\\n            \\"type\\": \\"dihedral\\",\\n            \\"atoms\\": [0, 1, 2, 3],\\n            \\"start\\": -180,\\n            \\"stop\\": 180,\\n            \\"step\\": 15\\n        }\\n    )\\n    \\n    # Bond scan with advanced method\\n    result = submit_scan_workflow(\\n        initial_molecule=\\"CC\\",\\n        scan_settings={\\n            \\"type\\": \\"bond\\",\\n            \\"atoms\\": [0, 1],\\n            \\"start\\": 1.0,\\n            \\"stop\\": 2.5,\\n            \\"step\\": 0.1\\n        },\\n        calculation_method=\\"r2scan_3c\\"\\n    )\\n","inputSchema":{"properties":{"initial_molecule":{"title":"Initial Molecule","type":"string"},"scan_settings":{"anyOf":[{"additionalProperties":true,"type":"object"},{"type":"null"}],"default":null,"title":"Scan Settings"},"calculation_engine":{"default":"omol25","title":"Calculation Engine","type":"string"},"calculation_method":{"default":"uma_m_omol","title":"Calculation Method","type":"string"},"wavefront_propagation":{"default":true,"title":"Wavefront Propagation","type":"boolean"},"name":{"default":"Scan Workflow","title":"Name","type":"string"},"folder_uuid":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"title":"Folder Uuid"},"max_credits":{"anyOf":[{"type":"integer"},{"type":"null"}],"default":null,"title":"Max Credits"}},"required":["initial_molecule"],"type":"object"}},{"name":"submit_irc_workflow","description":"Submits an Intrinsic Reaction Coordinate (IRC) workflow to the API.\\n\\nArgs:\\n    initial_molecule: The initial molecule to perform the IRC calculation on.\\n        Can be a dict, StJamesMolecule, or RdkitMol object\\n    method: The computational method to use for the IRC calculation (default: \\"uma_m_omol\\")\\n        See list of available methods for options\\n    engine: The computational engine to use for the calculation (default: \\"omol25\\")\\n        See list of available engines\\n    preopt: Whether to perform a pre-optimization of the molecule (default: True)\\n    step_size: The step size to use for the IRC calculation (default: 0.05)\\n    max_irc_steps: The maximum number of IRC steps to perform (default: 30)\\n    name: The name of the workflow\\n    folder_uuid: The UUID of the folder to place the workflow in\\n    max_credits: The maximum number of credits to use for the workflow\\n    \\nReturns:\\n    Workflow object representing the submitted IRC workflow\\n    \\nExample:\\n    # Basic IRC calculation\\n    result = submit_irc_workflow(\\n        initial_molecule={\\"smiles\\": \\"[CH3].[CH3]\\"},\\n        method=\\"gfn2_xtb\\",\\n        max_irc_steps=50\\n    )\\n    \\n    # IRC with specific method and engine\\n    result = submit_irc_workflow(\\n        initial_molecule={\\"smiles\\": \\"CC(O)=CC\\"},\\n        method=\\"r2scan_3c\\",\\n        engine=\\"psi4\\",\\n        step_size=0.03\\n    )\\n","inputSchema":{"properties":{"initial_molecule":{"anyOf":[{"additionalProperties":true,"type":"object"},{},{"type":"null"}],"default":null,"title":"Initial Molecule"},"method":{"default":"uma_m_omol","title":"Method","type":"string"},"engine":{"default":"omol25","title":"Engine","type":"string"},"preopt":{"default":true,"title":"Preopt","type":"boolean"},"step_size":{"default":0.05,"title":"Step Size","type":"number"},"max_irc_steps":{"default":30,"title":"Max Irc Steps","type":"integer"},"name":{"default":"IRC Workflow","title":"Name","type":"string"},"folder_uuid":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"title":"Folder Uuid"},"max_credits":{"anyOf":[{"type":"integer"},{"type":"null"}],"default":null,"title":"Max Credits"}},"type":"object"}},{"name":"submit_protein_cofolding_workflow","description":"Submits a protein cofolding workflow to the API.\\n\\nArgs:\\n    initial_protein_sequences: The sequences of the proteins to be cofolded\\n    initial_smiles_list: A list of SMILES strings for the ligands to be cofolded with\\n    ligand_binding_affinity_index: The index of the ligand for which to compute the binding affinity\\n    use_msa_server: Whether to use the MSA server for the computation\\n    use_potentials: Whether to use potentials for the computation\\n    name: The name of the workflow\\n    model: The model to use for the computation\\n    folder_uuid: The UUID of the folder to store the workflow in\\n    max_credits: The maximum number of credits to use for the workflow\\n    \\nReturns:\\n    Workflow object representing the submitted workflow\\n    \\nExample:\\n    # Protein dimer cofolding\\n    result = submit_protein_cofolding_workflow(\\n        initial_protein_sequences=[\\n            \\"MKTAYIAKQRQISFVKSHFSRQLEERLGLIEVQAPILSRVGDGTQDNLSGAEK\\",\\n            \\"MKQHKAMIVALIVICITAVVAALVTRKDLCEVHIRTGQTEVAVF\\"\\n        ]\\n    )\\n    \\n    # Protein-ligand complex\\n    result = submit_protein_cofolding_workflow(\\n        initial_protein_sequences=[\\"MGSSHHHHHHSSGLVPRGSH\\"],\\n        initial_smiles_list=[\\"CC(=O)O\\", \\"CCO\\"],\\n        ligand_binding_affinity_index=0,\\n        use_msa_server=True\\n    )\\n","inputSchema":{"properties":{"initial_protein_sequences":{"items":{"type":"string"},"title":"Initial Protein Sequences","type":"array"},"initial_smiles_list":{"anyOf":[{"items":{"type":"string"},"type":"array"},{"type":"null"}],"default":null,"title":"Initial Smiles List"},"ligand_binding_affinity_index":{"anyOf":[{"type":"integer"},{"type":"null"}],"default":null,"title":"Ligand Binding Affinity Index"},"use_msa_server":{"default":true,"title":"Use Msa Server","type":"boolean"},"use_potentials":{"default":false,"title":"Use Potentials","type":"boolean"},"name":{"default":"Cofolding Workflow","title":"Name","type":"string"},"model":{"default":"boltz_2","title":"Model","type":"string"},"folder_uuid":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"title":"Folder Uuid"},"max_credits":{"anyOf":[{"type":"integer"},{"type":"null"}],"default":null,"title":"Max Credits"}},"required":["initial_protein_sequences"],"type":"object"}},{"name":"submit_docking_workflow","description":"Submits a Docking workflow to the API.\\n\\nArgs:\\n    protein: The protein to dock. Can be fed as a uuid or a Protein object\\n    pocket: The pocket to dock into\\n    initial_molecule: The initial molecule to be docked.\\n        Can be a dict, StJamesMolecule, or RdkitMol object\\n    do_csearch: Whether to perform a conformational search on the ligand\\n    do_optimization: Whether to perform an optimization on the ligand\\n    name: The name of the workflow\\n    folder_uuid: The UUID of the folder to place the workflow in\\n    max_credits: The maximum number of credits to use for the workflow\\n    \\nReturns:\\n    Workflow object representing the submitted workflow\\n    \\nExample:\\n    # Basic docking with protein UUID\\n    result = submit_docking_workflow(\\n        protein=\\"protein-uuid-123\\",\\n        pocket=pocket_obj,\\n        initial_molecule={\\"smiles\\": \\"CC(=O)Oc1ccccc1C(=O)O\\"}\\n    )\\n    \\n    # Docking with optimization disabled\\n    result = submit_docking_workflow(\\n        protein=protein_obj,\\n        pocket=pocket_obj,\\n        initial_molecule={\\"smiles\\": \\"CCO\\"},\\n        do_csearch=False,\\n        do_optimization=False\\n    )\\n","inputSchema":{"properties":{"protein":{"anyOf":[{"type":"string"},{}],"title":"Protein"},"pocket":{"title":"Pocket"},"initial_molecule":{"anyOf":[{"additionalProperties":true,"type":"object"},{},{"type":"null"}],"default":null,"title":"Initial Molecule"},"do_csearch":{"default":true,"title":"Do Csearch","type":"boolean"},"do_optimization":{"default":true,"title":"Do Optimization","type":"boolean"},"name":{"default":"Docking Workflow","title":"Name","type":"string"},"folder_uuid":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"title":"Folder Uuid"},"max_credits":{"anyOf":[{"type":"integer"},{"type":"null"}],"default":null,"title":"Max Credits"}},"required":["protein","pocket"],"type":"object"}},{"name":"workflow_fetch_latest","description":"Fetch the latest workflow data from the database.\\n\\nUpdates the workflow object with the most recent status and results.\\n\\nArgs:\\n    workflow_uuid: The UUID of the workflow to fetch\\n    in_place: Whether to update the workflow object in place (default: False)\\n    \\nReturns:\\n    Dictionary containing the updated workflow data including status and results\\n","inputSchema":{"properties":{"workflow_uuid":{"title":"Workflow Uuid","type":"string"},"in_place":{"default":false,"title":"In Place","type":"boolean"}},"required":["workflow_uuid"],"type":"object"}},{"name":"workflow_wait_for_result","description":"Wait for a workflow to complete and return the result.\\n\\nBlocks until the workflow completes, polling at specified intervals.\\n\\nArgs:\\n    workflow_uuid: The UUID of the workflow to wait for\\n    poll_interval: Time in seconds between status checks (default: 5)\\n    \\nReturns:\\n    Dictionary containing the completed workflow data including results\\n","inputSchema":{"properties":{"workflow_uuid":{"title":"Workflow Uuid","type":"string"},"poll_interval":{"default":5,"title":"Poll Interval","type":"integer"}},"required":["workflow_uuid"],"type":"object"}},{"name":"workflow_get_status","description":"Get the current status of a workflow.\\n\\nArgs:\\n    workflow_uuid: The UUID of the workflow\\n    \\nReturns:\\n    Dictionary with status information\\n","inputSchema":{"properties":{"workflow_uuid":{"title":"Workflow Uuid","type":"string"}},"required":["workflow_uuid"],"type":"object"}},{"name":"workflow_stop","description":"Stop a running workflow.\\n\\nArgs:\\n    workflow_uuid: The UUID of the workflow to stop\\n    \\nReturns:\\n    Dictionary with confirmation message\\n","inputSchema":{"properties":{"workflow_uuid":{"title":"Workflow Uuid","type":"string"}},"required":["workflow_uuid"],"type":"object"}},{"name":"workflow_delete","description":"Delete a workflow.\\n\\nThis permanently removes the workflow and its results from the database.\\n\\nArgs:\\n    workflow_uuid: The UUID of the workflow to delete\\n    \\nReturns:\\n    Dictionary with confirmation message\\n","inputSchema":{"properties":{"workflow_uuid":{"title":"Workflow Uuid","type":"string"}},"required":["workflow_uuid"],"type":"object"}},{"name":"retrieve_workflow","description":"Retrieve a workflow from the API.\\n\\nArgs:\\n    uuid: The UUID of the workflow to retrieve\\n    \\nReturns:\\n    Dictionary containing the complete workflow data\\n    \\nRaises:\\n    HTTPError: If the API request fails\\n","inputSchema":{"properties":{"uuid":{"title":"Uuid","type":"string"}},"required":["uuid"],"type":"object"}},{"name":"retrieve_calculation_molecules","description":"Retrieve a list of molecules from a calculation.\\n\\nArgs:\\n    uuid: The UUID of the calculation to retrieve molecules from\\n    \\nReturns:\\n    List of dictionaries representing the molecules in the calculation\\n    \\nRaises:\\n    HTTPError: If the API request fails\\n","inputSchema":{"properties":{"uuid":{"title":"Uuid","type":"string"}},"required":["uuid"],"type":"object"}},{"name":"list_workflows","description":"List workflows subject to the specified criteria.\\n\\nArgs:\\n    parent_uuid: The UUID of the parent folder\\n    name_contains: Substring to search for in workflow names\\n    public: Filter workflows by their public status\\n    starred: Filter workflows by their starred status\\n    status: Filter workflows by their status\\n    workflow_type: Filter workflows by their type\\n    page: The page number to retrieve (default: 0)\\n    size: The number of items per page (default: 10)\\n    \\nReturns:\\n    List of workflow dictionaries that match the search criteria\\n    \\nRaises:\\n    HTTPError: If the request to the API fails\\n","inputSchema":{"properties":{"parent_uuid":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"title":"Parent Uuid"},"name_contains":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"title":"Name Contains"},"public":{"anyOf":[{"type":"boolean"},{"type":"null"}],"default":null,"title":"Public"},"starred":{"anyOf":[{"type":"boolean"},{"type":"null"}],"default":null,"title":"Starred"},"status":{"anyOf":[{"type":"integer"},{"type":"null"}],"default":null,"title":"Status"},"workflow_type":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"title":"Workflow Type"},"page":{"default":0,"title":"Page","type":"integer"},"size":{"default":10,"title":"Size","type":"integer"}},"type":"object"}},{"name":"workflow_update","description":"Update workflow details.\\n\\nArgs:\\n    workflow_uuid: The UUID of the workflow to update\\n    name: New name for the workflow (optional)\\n    notes: New notes for the workflow (optional)\\n    starred: Whether to star/unstar the workflow (optional)\\n    public: Whether to make the workflow public/private (optional)\\n    \\nReturns:\\n    Dictionary with updated workflow information\\n","inputSchema":{"properties":{"workflow_uuid":{"title":"Workflow Uuid","type":"string"},"name":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"title":"Name"},"notes":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"title":"Notes"},"starred":{"anyOf":[{"type":"boolean"},{"type":"null"}],"default":null,"title":"Starred"},"public":{"anyOf":[{"type":"boolean"},{"type":"null"}],"default":null,"title":"Public"}},"required":["workflow_uuid"],"type":"object"}},{"name":"workflow_is_finished","description":"Check if a workflow is finished.\\n\\nArgs:\\n    workflow_uuid: The UUID of the workflow to check\\n    \\nReturns:\\n    Dictionary with workflow completion status\\n","inputSchema":{"properties":{"workflow_uuid":{"title":"Workflow Uuid","type":"string"}},"required":["workflow_uuid"],"type":"object"}},{"name":"workflow_delete_data","description":"Delete workflow data while keeping the workflow record.\\n\\nArgs:\\n    workflow_uuid: The UUID of the workflow\\n    \\nReturns:\\n    Dictionary with confirmation message\\n","inputSchema":{"properties":{"workflow_uuid":{"title":"Workflow Uuid","type":"string"}},"required":["workflow_uuid"],"type":"object"}}]}}\r\n\r\n'
2025-08-02 14:11:06,575 - mcp.server.sse - DEBUG - Handling POST message
2025-08-02 14:11:06,575 - mcp.server.sse - DEBUG - Parsed session ID: 049901af-d6f5-4643-b2c0-abf61b4cca46
2025-08-02 14:11:06,575 - mcp.server.sse - DEBUG - Received JSON: b'{"method":"prompts/list","jsonrpc":"2.0","id":3}'
2025-08-02 14:11:06,575 - mcp.server.sse - DEBUG - Validated client message: root=JSONRPCRequest(method='prompts/list', params=None, jsonrpc='2.0', id=3)
2025-08-02 14:11:06,575 - mcp.server.sse - DEBUG - Sending session message to writer: SessionMessage(message=JSONRPCMessage(root=JSONRPCRequest(method='prompts/list', params=None, jsonrpc='2.0', id=3)), metadata=ServerMessageMetadata(related_request_id=None, request_context=<starlette.requests.Request object at 0x10be7a570>))
2025-08-02 14:11:06,575 - mcp.server.lowlevel.server - DEBUG - Received message: <mcp.shared.session.RequestResponder object at 0x10be8bd90>
2025-08-02 14:11:06,575 - mcp.server.lowlevel.server - INFO - Processing request of type ListPromptsRequest
2025-08-02 14:11:06,575 - mcp.server.lowlevel.server - DEBUG - Dispatching request of type ListPromptsRequest
2025-08-02 14:11:06,576 - mcp.server.lowlevel.server - DEBUG - Response sent
2025-08-02 14:11:06,576 - mcp.server.sse - DEBUG - Sending message via SSE: SessionMessage(message=JSONRPCMessage(root=JSONRPCResponse(jsonrpc='2.0', id=3, result={'prompts': []})), metadata=None)
2025-08-02 14:11:06,576 - sse_starlette.sse - DEBUG - chunk: b'event: message\r\ndata: {"jsonrpc":"2.0","id":3,"result":{"prompts":[]}}\r\n\r\n'
2025-08-02 14:11:18,372 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 21:11:18.372376+00:00\r\n\r\n'
2025-08-02 14:11:18,380 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 21:11:18.380422+00:00\r\n\r\n'
2025-08-02 14:11:21,550 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 21:11:21.550067+00:00\r\n\r\n'
2025-08-02 14:11:23,615 - mcp.server.sse - DEBUG - Handling POST message
2025-08-02 14:11:23,615 - mcp.server.sse - DEBUG - Parsed session ID: 049901af-d6f5-4643-b2c0-abf61b4cca46
2025-08-02 14:11:23,616 - mcp.server.sse - DEBUG - Received JSON: b'{"method":"tools/call","params":{"name":"submit_basic_calculation_workflow","arguments":{"initial_molecule":"CCCC","engine":"xtb","method":"gfn2_xtb","mode":"rapid","tasks":"optimize","name":"Basic Calculation Workflow from data.json"},"_meta":{"progressToken":4}},"jsonrpc":"2.0","id":4}'
2025-08-02 14:11:23,616 - mcp.server.sse - DEBUG - Validated client message: root=JSONRPCRequest(method='tools/call', params={'name': 'submit_basic_calculation_workflow', 'arguments': {'initial_molecule': 'CCCC', 'engine': 'xtb', 'method': 'gfn2_xtb', 'mode': 'rapid', 'tasks': 'optimize', 'name': 'Basic Calculation Workflow from data.json'}, '_meta': {'progressToken': 4}}, jsonrpc='2.0', id=4)
2025-08-02 14:11:23,616 - mcp.server.sse - DEBUG - Sending session message to writer: SessionMessage(message=JSONRPCMessage(root=JSONRPCRequest(method='tools/call', params={'name': 'submit_basic_calculation_workflow', 'arguments': {'initial_molecule': 'CCCC', 'engine': 'xtb', 'method': 'gfn2_xtb', 'mode': 'rapid', 'tasks': 'optimize', 'name': 'Basic Calculation Workflow from data.json'}, '_meta': {'progressToken': 4}}, jsonrpc='2.0', id=4)), metadata=ServerMessageMetadata(related_request_id=None, request_context=<starlette.requests.Request object at 0x10be7a600>))
2025-08-02 14:11:23,617 - mcp.server.lowlevel.server - DEBUG - Received message: <mcp.shared.session.RequestResponder object at 0x10beee190>
2025-08-02 14:11:23,617 - mcp.server.lowlevel.server - INFO - Processing request of type CallToolRequest
2025-08-02 14:11:23,617 - mcp.server.lowlevel.server - DEBUG - Dispatching request of type CallToolRequest
2025-08-02 14:11:23,618 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - INFO - Parsed string tasks '['optimize']' to list: ['optimize']
2025-08-02 14:11:23,618 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - INFO - ============================================================
2025-08-02 14:11:23,618 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - INFO - submit_basic_calculation_workflow called with:
2025-08-02 14:11:23,618 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - INFO -   method: gfn2_xtb (type: <class 'str'>)
2025-08-02 14:11:23,618 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - INFO -   tasks: ['optimize'] (type: <class 'list'>)
2025-08-02 14:11:23,618 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - INFO -   mode: rapid
2025-08-02 14:11:23,618 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - INFO -   engine: xtb
2025-08-02 14:11:23,618 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - INFO -   name: Basic Calculation Workflow from data.json
2025-08-02 14:11:23,619 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - INFO -   initial_molecule: 'CCCC' (SMILES string)
2025-08-02 14:11:23,619 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - DEBUG - Converting SMILES string to StJamesMolecule
2025-08-02 14:11:23,651 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - DEBUG - Successfully converted to StJamesMolecule
2025-08-02 14:11:23,651 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - INFO - Calling rowan.submit_basic_calculation_workflow...
2025-08-02 14:11:23,677 - httpcore.connection - DEBUG - connect_tcp.started host='api.rowansci.com' port=443 local_address=None timeout=5.0 socket_options=None
2025-08-02 14:11:23,773 - httpcore.connection - DEBUG - connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x10bf99400>
2025-08-02 14:11:23,773 - httpcore.connection - DEBUG - start_tls.started ssl_context=<ssl.SSLContext object at 0x10bf759a0> server_hostname='api.rowansci.com' timeout=5.0
2025-08-02 14:11:23,893 - httpcore.connection - DEBUG - start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x10bf70a50>
2025-08-02 14:11:23,894 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-08-02 14:11:23,894 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-08-02 14:11:23,894 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-08-02 14:11:23,894 - httpcore.http11 - DEBUG - send_request_body.complete
2025-08-02 14:11:23,894 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-08-02 14:11:24,473 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sat, 02 Aug 2025 21:11:24 GMT'), (b'Content-Type', b'application/json'), (b'Content-Length', b'2094'), (b'Connection', b'keep-alive'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains')])
2025-08-02 14:11:24,474 - httpx - INFO - HTTP Request: POST https://api.rowansci.com/workflow "HTTP/1.1 200 OK"
2025-08-02 14:11:24,474 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-08-02 14:11:24,478 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-08-02 14:11:24,478 - httpcore.http11 - DEBUG - response_closed.started
2025-08-02 14:11:24,478 - httpcore.http11 - DEBUG - response_closed.complete
2025-08-02 14:11:24,479 - httpcore.connection - DEBUG - close.started
2025-08-02 14:11:24,479 - httpcore.connection - DEBUG - close.complete
2025-08-02 14:11:24,479 - rowan_mcp.functions_v2.submit_basic_calculation_workflow - INFO - SUCCESS: Workflow submitted with UUID: aaff5016-58e1-41bf-b383-5dc35f5f1228
2025-08-02 14:11:24,480 - mcp.server.lowlevel.server - DEBUG - Response sent
2025-08-02 14:11:24,480 - mcp.server.sse - DEBUG - Sending message via SSE: SessionMessage(message=JSONRPCMessage(root=JSONRPCResponse(jsonrpc='2.0', id=4, result={'content': [{'type': 'text', 'text': '{\n  "name": "Basic Calculation Workflow from data.json",\n  "uuid": "aaff5016-58e1-41bf-b383-5dc35f5f1228",\n  "created_at": "2025-08-02T21:11:24.068435Z",\n  "updated_at": null,\n  "started_at": null,\n  "completed_at": null,\n  "object_status": 0,\n  "parent_uuid": "e5c3ce65-43df-4ab3-90e0-a56f42584cc0",\n  "notes": "",\n  "starred": false,\n  "public": false,\n  "object_type": "basic_calculation",\n  "object_data": {\n    "settings": {\n      "method": "GFN2_XTB",\n      "tasks": [\n        "optimize"\n      ],\n      "mode": "rapid"\n    },\n    "engine": "xtb",\n    "initial_molecule": {\n      "charge": 0,\n      "multiplicity": 1,\n      "atoms": [\n        {\n          "atomic_number": 6,\n          "position": [\n            -1.57731622,\n            0.46259034,\n            0.02288227\n          ]\n        },\n        {\n          "atomic_number": 6,\n          "position": [\n            -0.55246934,\n            -0.31349805,\n            -0.78986664\n          ]\n        },\n        {\n          "atomic_number": 6,\n          "position": [\n            0.65178196,\n            -0.77563238,\n            0.03104792\n          ]\n        },\n        {\n          "atomic_number": 6,\n          "position": [\n            1.5013315,\n            0.37070813,\n            0.55769072\n          ]\n        },\n        {\n          "atomic_number": 1,\n          "position": [\n            -1.17009891,\n            1.41344062,\n            0.37886292\n          ]\n        },\n        {\n          "atomic_number": 1,\n          "position": [\n            -1.91277475,\n            -0.11690438,\n            0.88874548\n          ]\n        },\n        {\n          "atomic_number": 1,\n          "position": [\n            -2.45332233,\n            0.68757176,\n            -0.59399069\n          ]\n        },\n        {\n          "atomic_number": 1,\n          "position": [\n            -0.21575239,\n            0.30052639,\n            -1.63326648\n          ]\n        },\n        {\n          "atomic_number": 1,\n          "position": [\n            -1.04230601,\n            -1.19688302,\n            -1.21658189\n          ]\n        },\n        {\n          "atomic_number": 1,\n          "position": [\n            0.31558706,\n            -1.39539838,\n            0.87044712\n          ]\n        },\n        {\n          "atomic_number": 1,\n          "position": [\n            1.28031633,\n            -1.41330121,\n            -0.60197473\n          ]\n        },\n        {\n          "atomic_number": 1,\n          "position": [\n            2.39258685,\n            -0.02154188,\n            1.05803044\n          ]\n        },\n        {\n          "atomic_number": 1,\n          "position": [\n            0.95227634,\n            0.97534316,\n            1.28543953\n          ]\n        },\n        {\n          "atomic_number": 1,\n          "position": [\n            1.83015992,\n            1.0229789,\n            -0.25746596\n          ]\n        }\n      ],\n      "cell": null,\n      "energy": null,\n      "scf_iterations": null,\n      "scf_completed": null,\n      "elapsed": null,\n      "homo_lumo_gap": null,\n      "gradient": null,\n      "stress": null,\n      "velocities": null,\n      "mulliken_charges": null,\n      "mulliken_spin_densities": null,\n      "dipole": null,\n      "vibrational_modes": null,\n      "zero_point_energy": null,\n      "thermal_energy_corr": null,\n      "thermal_enthalpy_corr": null,\n      "thermal_free_energy_corr": null,\n      "smiles": "CCCC",\n      "calculation_index": null\n    }\n  },\n  "email_when_complete": false,\n  "max_credits": null,\n  "elapsed": 0.0,\n  "credits_charged": 0.0\n}'}], 'isError': False})), metadata=None)
2025-08-02 14:11:24,480 - sse_starlette.sse - DEBUG - chunk: b'event: message\r\ndata: {"jsonrpc":"2.0","id":4,"result":{"content":[{"type":"text","text":"{\\n  \\"name\\": \\"Basic Calculation Workflow from data.json\\",\\n  \\"uuid\\": \\"aaff5016-58e1-41bf-b383-5dc35f5f1228\\",\\n  \\"created_at\\": \\"2025-08-02T21:11:24.068435Z\\",\\n  \\"updated_at\\": null,\\n  \\"started_at\\": null,\\n  \\"completed_at\\": null,\\n  \\"object_status\\": 0,\\n  \\"parent_uuid\\": \\"e5c3ce65-43df-4ab3-90e0-a56f42584cc0\\",\\n  \\"notes\\": \\"\\",\\n  \\"starred\\": false,\\n  \\"public\\": false,\\n  \\"object_type\\": \\"basic_calculation\\",\\n  \\"object_data\\": {\\n    \\"settings\\": {\\n      \\"method\\": \\"GFN2_XTB\\",\\n      \\"tasks\\": [\\n        \\"optimize\\"\\n      ],\\n      \\"mode\\": \\"rapid\\"\\n    },\\n    \\"engine\\": \\"xtb\\",\\n    \\"initial_molecule\\": {\\n      \\"charge\\": 0,\\n      \\"multiplicity\\": 1,\\n      \\"atoms\\": [\\n        {\\n          \\"atomic_number\\": 6,\\n          \\"position\\": [\\n            -1.57731622,\\n            0.46259034,\\n            0.02288227\\n          ]\\n        },\\n        {\\n          \\"atomic_number\\": 6,\\n          \\"position\\": [\\n            -0.55246934,\\n            -0.31349805,\\n            -0.78986664\\n          ]\\n        },\\n        {\\n          \\"atomic_number\\": 6,\\n          \\"position\\": [\\n            0.65178196,\\n            -0.77563238,\\n            0.03104792\\n          ]\\n        },\\n        {\\n          \\"atomic_number\\": 6,\\n          \\"position\\": [\\n            1.5013315,\\n            0.37070813,\\n            0.55769072\\n          ]\\n        },\\n        {\\n          \\"atomic_number\\": 1,\\n          \\"position\\": [\\n            -1.17009891,\\n            1.41344062,\\n            0.37886292\\n          ]\\n        },\\n        {\\n          \\"atomic_number\\": 1,\\n          \\"position\\": [\\n            -1.91277475,\\n            -0.11690438,\\n            0.88874548\\n          ]\\n        },\\n        {\\n          \\"atomic_number\\": 1,\\n          \\"position\\": [\\n            -2.45332233,\\n            0.68757176,\\n            -0.59399069\\n          ]\\n        },\\n        {\\n          \\"atomic_number\\": 1,\\n          \\"position\\": [\\n            -0.21575239,\\n            0.30052639,\\n            -1.63326648\\n          ]\\n        },\\n        {\\n          \\"atomic_number\\": 1,\\n          \\"position\\": [\\n            -1.04230601,\\n            -1.19688302,\\n            -1.21658189\\n          ]\\n        },\\n        {\\n          \\"atomic_number\\": 1,\\n          \\"position\\": [\\n            0.31558706,\\n            -1.39539838,\\n            0.87044712\\n          ]\\n        },\\n        {\\n          \\"atomic_number\\": 1,\\n          \\"position\\": [\\n            1.28031633,\\n            -1.41330121,\\n            -0.60197473\\n          ]\\n        },\\n        {\\n          \\"atomic_number\\": 1,\\n          \\"position\\": [\\n            2.39258685,\\n            -0.02154188,\\n            1.05803044\\n          ]\\n        },\\n        {\\n          \\"atomic_number\\": 1,\\n          \\"position\\": [\\n            0.95227634,\\n            0.97534316,\\n            1.28543953\\n          ]\\n        },\\n        {\\n          \\"atomic_number\\": 1,\\n          \\"position\\": [\\n            1.83015992,\\n            1.0229789,\\n            -0.25746596\\n          ]\\n        }\\n      ],\\n      \\"cell\\": null,\\n      \\"energy\\": null,\\n      \\"scf_iterations\\": null,\\n      \\"scf_completed\\": null,\\n      \\"elapsed\\": null,\\n      \\"homo_lumo_gap\\": null,\\n      \\"gradient\\": null,\\n      \\"stress\\": null,\\n      \\"velocities\\": null,\\n      \\"mulliken_charges\\": null,\\n      \\"mulliken_spin_densities\\": null,\\n      \\"dipole\\": null,\\n      \\"vibrational_modes\\": null,\\n      \\"zero_point_energy\\": null,\\n      \\"thermal_energy_corr\\": null,\\n      \\"thermal_enthalpy_corr\\": null,\\n      \\"thermal_free_energy_corr\\": null,\\n      \\"smiles\\": \\"CCCC\\",\\n      \\"calculation_index\\": null\\n    }\\n  },\\n  \\"email_when_complete\\": false,\\n  \\"max_credits\\": null,\\n  \\"elapsed\\": 0.0,\\n  \\"credits_charged\\": 0.0\\n}"}],"isError":false}}\r\n\r\n'
2025-08-02 14:11:33,374 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 21:11:33.373929+00:00\r\n\r\n'
2025-08-02 14:11:33,383 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 21:11:33.383269+00:00\r\n\r\n'
2025-08-02 14:11:36,552 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 21:11:36.551935+00:00\r\n\r\n'
2025-08-02 14:11:48,375 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 21:11:48.375506+00:00\r\n\r\n'
2025-08-02 14:11:48,384 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 21:11:48.384223+00:00\r\n\r\n'
2025-08-02 14:11:51,555 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 21:11:51.554950+00:00\r\n\r\n'
2025-08-02 14:12:03,377 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 21:12:03.377230+00:00\r\n\r\n'
2025-08-02 14:12:03,386 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 21:12:03.386651+00:00\r\n\r\n'
2025-08-02 14:12:06,558 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 21:12:06.558230+00:00\r\n\r\n'
2025-08-02 14:12:18,383 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 21:12:18.383648+00:00\r\n\r\n'
2025-08-02 14:12:18,389 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 21:12:18.388858+00:00\r\n\r\n'
2025-08-02 14:12:21,560 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 21:12:21.560874+00:00\r\n\r\n'
2025-08-02 14:12:33,386 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 21:12:33.386411+00:00\r\n\r\n'
2025-08-02 14:12:33,393 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 21:12:33.393325+00:00\r\n\r\n'
2025-08-02 14:12:36,562 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 21:12:36.562628+00:00\r\n\r\n'
2025-08-02 14:12:48,388 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 21:12:48.387963+00:00\r\n\r\n'
2025-08-02 14:12:48,393 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 21:12:48.393921+00:00\r\n\r\n'
2025-08-02 14:12:51,564 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 21:12:51.564270+00:00\r\n\r\n'
2025-08-02 14:13:03,392 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 21:13:03.392438+00:00\r\n\r\n'
2025-08-02 14:13:03,394 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 21:13:03.394322+00:00\r\n\r\n'
2025-08-02 14:13:06,567 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 21:13:06.567192+00:00\r\n\r\n'
2025-08-02 14:13:18,395 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 21:13:18.395343+00:00\r\n\r\n'
2025-08-02 14:13:18,399 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 21:13:18.399819+00:00\r\n\r\n'
2025-08-02 14:13:21,569 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 21:13:21.569547+00:00\r\n\r\n'
2025-08-02 14:13:33,401 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 21:13:33.401419+00:00\r\n\r\n'
2025-08-02 14:13:33,404 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 21:13:33.404036+00:00\r\n\r\n'
2025-08-02 14:13:36,571 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 21:13:36.571541+00:00\r\n\r\n'
2025-08-02 14:13:48,406 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 21:13:48.405925+00:00\r\n\r\n'
2025-08-02 14:13:48,409 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 21:13:48.409518+00:00\r\n\r\n'
2025-08-02 14:13:51,573 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 21:13:51.573204+00:00\r\n\r\n'
2025-08-02 14:14:03,411 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 21:14:03.411713+00:00\r\n\r\n'
2025-08-02 14:14:03,411 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 21:14:03.411896+00:00\r\n\r\n'
2025-08-02 14:14:06,575 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 21:14:06.575006+00:00\r\n\r\n'
2025-08-02 14:14:18,412 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 21:14:18.412471+00:00\r\n\r\n'
2025-08-02 14:14:18,413 - sse_starlette.sse - DEBUG - ping: b': ping - 2025-08-02 21:14:18.413598+00:00\r\n\r\n'
2025-08-02 14:14:21,876 - FastMCP.fastmcp.server.server - INFO - Starting MCP server 'Rowan MCP Server' with transport 'sse' on http://127.0.0.1:6276/sse
2025-08-02 14:18:40,439 - FastMCP.fastmcp.server.server - INFO - Starting MCP server 'Rowan MCP Server' with transport 'sse' on http://127.0.0.1:6276/sse
2025-08-02 14:20:36,092 - FastMCP.fastmcp.server.server - INFO - Starting MCP server 'Rowan MCP Server' with transport 'sse' on http://127.0.0.1:6276/sse
2025-08-02 14:20:41,571 - mcp.server.lowlevel.server - INFO - Processing request of type ListToolsRequest
2025-08-02 14:20:41,577 - mcp.server.lowlevel.server - INFO - Processing request of type ListPromptsRequest
2025-08-02 14:21:07,216 - mcp.server.lowlevel.server - INFO - Processing request of type CallToolRequest
2025-08-02 14:21:08,210 - httpx - INFO - HTTP Request: POST https://api.rowansci.com/workflow "HTTP/1.1 200 OK"
2025-08-02 14:22:28,175 - FastMCP.fastmcp.server.server - INFO - Starting MCP server 'Rowan MCP Server' with transport 'sse' on http://127.0.0.1:6276/sse
2025-08-02 14:22:29,844 - mcp.server.lowlevel.server - INFO - Processing request of type ListToolsRequest
2025-08-02 14:22:29,849 - mcp.server.lowlevel.server - INFO - Processing request of type ListPromptsRequest
2025-08-02 14:22:30,360 - mcp.server.lowlevel.server - INFO - Processing request of type ListToolsRequest
2025-08-02 14:22:30,365 - mcp.server.lowlevel.server - INFO - Processing request of type ListPromptsRequest
2025-08-02 14:23:27,975 - mcp.server.lowlevel.server - INFO - Processing request of type CallToolRequest
2025-08-02 14:23:28,866 - httpx - INFO - HTTP Request: POST https://api.rowansci.com/workflow "HTTP/1.1 200 OK"
2025-08-02 19:50:03,905 - FastMCP.fastmcp.server.server - INFO - Starting MCP server 'Rowan MCP Server' with transport 'sse' on http://127.0.0.1:6276/sse
2025-08-02 19:50:08,086 - mcp.server.lowlevel.server - INFO - Processing request of type ListToolsRequest
2025-08-02 19:50:08,087 - mcp.server.lowlevel.server - INFO - Processing request of type ListToolsRequest
2025-08-02 19:50:08,093 - mcp.server.lowlevel.server - INFO - Processing request of type ListPromptsRequest
2025-08-02 19:50:08,094 - mcp.server.lowlevel.server - INFO - Processing request of type ListPromptsRequest
2025-08-02 19:50:10,303 - mcp.server.lowlevel.server - INFO - Processing request of type ListToolsRequest
2025-08-02 19:50:10,304 - mcp.server.lowlevel.server - INFO - Processing request of type ListToolsRequest
2025-08-02 19:50:10,312 - mcp.server.lowlevel.server - INFO - Processing request of type ListPromptsRequest
2025-08-02 19:50:10,312 - mcp.server.lowlevel.server - INFO - Processing request of type ListPromptsRequest
2025-08-02 19:51:12,984 - mcp.server.lowlevel.server - INFO - Processing request of type CallToolRequest
2025-08-02 19:51:13,853 - httpx - INFO - HTTP Request: POST https://api.rowansci.com/workflow "HTTP/1.1 200 OK"
2025-08-03 16:25:05,503 - mcp.server.lowlevel.server - INFO - Processing request of type ListToolsRequest
2025-08-03 16:25:05,514 - mcp.server.lowlevel.server - INFO - Processing request of type ListPromptsRequest
2025-08-03 16:26:27,035 - FastMCP.fastmcp.server.server - INFO - Starting MCP server 'Rowan MCP Server' with transport 'sse' on http://127.0.0.1:6276/sse
2025-08-03 16:26:28,569 - mcp.server.lowlevel.server - INFO - Processing request of type ListToolsRequest
2025-08-03 16:26:28,576 - mcp.server.lowlevel.server - INFO - Processing request of type ListPromptsRequest
2025-08-03 16:27:48,178 - FastMCP.fastmcp.server.server - INFO - Starting MCP server 'Rowan MCP Server' with transport 'sse' on http://127.0.0.1:6276/sse
2025-08-03 16:27:49,665 - mcp.server.lowlevel.server - INFO - Processing request of type ListToolsRequest
2025-08-03 16:27:49,671 - mcp.server.lowlevel.server - INFO - Processing request of type ListPromptsRequest
2025-08-03 16:29:06,077 - FastMCP.fastmcp.server.server - INFO - Starting MCP server 'Rowan MCP Server' with transport 'sse' on http://127.0.0.1:6276/sse
2025-08-03 16:29:10,320 - mcp.server.lowlevel.server - INFO - Processing request of type ListToolsRequest
2025-08-03 16:29:10,327 - mcp.server.lowlevel.server - INFO - Processing request of type ListPromptsRequest
2025-08-03 16:32:26,579 - FastMCP.fastmcp.server.server - INFO - Starting MCP server 'Rowan MCP Server' with transport 'sse' on http://127.0.0.1:6276/sse
2025-08-03 16:32:29,416 - mcp.server.lowlevel.server - INFO - Processing request of type ListToolsRequest
2025-08-03 16:32:29,421 - mcp.server.lowlevel.server - INFO - Processing request of type ListPromptsRequest
2025-08-03 16:36:00,057 - FastMCP.fastmcp.server.server - INFO - Starting MCP server 'Rowan MCP Server' with transport 'sse' on http://127.0.0.1:6276/sse
2025-08-03 16:36:02,524 - mcp.server.lowlevel.server - INFO - Processing request of type ListToolsRequest
2025-08-03 16:36:02,531 - mcp.server.lowlevel.server - INFO - Processing request of type ListPromptsRequest
2025-08-03 16:38:35,094 - FastMCP.fastmcp.server.server - INFO - Starting MCP server 'Rowan MCP Server' with transport 'sse' on http://127.0.0.1:6276/sse
2025-08-03 16:38:36,163 - mcp.server.lowlevel.server - INFO - Processing request of type ListToolsRequest
2025-08-03 16:38:36,170 - mcp.server.lowlevel.server - INFO - Processing request of type ListPromptsRequest
2025-08-03 16:40:24,816 - FastMCP.fastmcp.server.server - INFO - Starting MCP server 'Rowan MCP Server' with transport 'sse' on http://127.0.0.1:6276/sse
2025-08-03 16:40:26,274 - mcp.server.lowlevel.server - INFO - Processing request of type ListToolsRequest
2025-08-03 16:40:26,280 - mcp.server.lowlevel.server - INFO - Processing request of type ListPromptsRequest
2025-08-03 17:08:13,769 - FastMCP.fastmcp.server.server - INFO - Starting MCP server 'Rowan MCP Server' with transport 'sse' on http://127.0.0.1:6276/sse
2025-08-03 17:08:16,476 - mcp.server.lowlevel.server - INFO - Processing request of type ListToolsRequest
2025-08-03 17:08:16,483 - mcp.server.lowlevel.server - INFO - Processing request of type ListPromptsRequest
